!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("sound",[],t):"object"==typeof exports?exports.sound=t():(e.lazer=e.lazer||{},e.lazer.sound=t())}(this,function(){return function(e){function t(r){if(a[r])return a[r].exports;var n=a[r]={exports:{},id:r,loaded:!1};return e[r].call(n.exports,n,n.exports,t),n.loaded=!0,n.exports}var a={};return t.m=e,t.c=a,t.p="",t(0)}({0:function(e,t,a){"use strict";"create index";function r(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&(t[a]=e[a]);return t["default"]=e,t}Object.defineProperty(t,"__esModule",{value:!0}),t.sfxr=void 0;var n=a(732),u=r(n);t.sfxr=u},732:function(e,t,a){"use strict";"create index";function r(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&(t[a]=e[a]);return t["default"]=e,t}function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0}),t.webaudio=t.synths=t.effects=t.data=t.Shapes=t.RandFloat=t.Rand=void 0;var u=a(733),o=n(u),f=a(734),l=n(f),d=a(735),i=n(d),p=a(736),s=r(p),c=a(746),v=r(c),h=a(757),y=r(h),m=a(766),_=r(m);t.Rand=o["default"],t.RandFloat=l["default"],t.Shapes=i["default"],t.data=s,t.effects=v,t.synths=y,t.webaudio=_},733:function(e,t){"use strict";function a(e){return Math.floor(Math.random()*(e+1))}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=a},734:function(e,t){"use strict";function a(e){return Math.random()*e}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=a},735:function(e,t){"use strict";function a(e){return Math.floor(e(d.length))}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=a;var r=t.SQUARE=0,n=t.SAWTOOTH=1,u=t.SINE=2,o=t.NOISE=3,f=t.TRIANGLE=4,l=t.BREAKER=5,d=[r,n,u,o,f,l]},736:function(e,t,a){"use strict";function r(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&(t[a]=e[a]);return t["default"]=e,t}function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0}),t.generators=t.UpdateData=t.GenerateData=void 0;var u=a(737),o=n(u),f=a(738),l=n(f),d=a(739),i=r(d);t.GenerateData=o["default"],t.UpdateData=l["default"],t.generators=i},737:function(e,t){"use strict";function a(e){return{repeatTime:0,fPeriod:0,period:0,fMaxPeriod:0,fSlide:0,fDeltaSlide:0,squareDuty:0,squareSlide:0,arpMod:0,arpTime:0,arpLimit:0,gain:Math.exp(e.volume)-1,sampleSum:0,numSummed:0,summands:Math.floor(44100/e.sampleRate),bufferIndex:0,bufferLength:0,bufferComplete:!1}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=a},738:function(e,t){"use strict";function a(e,t){return e.repeatTime=0,e.fPeriod=100/(t.tone.frequency*t.tone.frequency+.001),e.period=Math.floor(e.fPeriod),e.fMaxPeriod=100/(t.tone.limit*t.tone.limit+.001),e.fSlide=1-.01*Math.pow(t.tone.ramp,3),e.fDeltaSlide=1e-6*-Math.pow(t.tone.deltaRamp,3),e.squareDuty=.5-.5*t.duty.value,e.squareSlide=5e-5*-t.duty.ramp,t.tonal.mod>=0?e.arpMod=1-.9*Math.pow(t.tonal.mod,2):e.arpMod=1+10*Math.pow(t.tonal.mod,2),e.arpTime=0,e.arpLimit=Math.floor(2e4*Math.pow(1-t.tonal.speed,2)+32),1===t.tonal.speed&&(e.arpLimit=0),e}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=a},739:function(e,t,a){"use strict";"create index";function r(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0}),t.Vibrato=t.Repeat=t.Phaser=t.Noise=t.Filter=t.Envelope=void 0;var n=a(740),u=r(n),o=a(741),f=r(o),l=a(742),d=r(l),i=a(743),p=r(i),s=a(744),c=r(s),v=a(745),h=r(v);t.Envelope=u["default"],t.Filter=f["default"],t.Noise=d["default"],t.Phaser=p["default"],t.Repeat=c["default"],t.Vibrato=h["default"]},740:function(e,t){"use strict";function a(e){var t=[Math.floor(e.envelope.attack*e.envelope.attack*1e5),Math.floor(e.envelope.sustain*e.envelope.sustain*1e5),Math.floor(e.envelope.decay*e.envelope.decay*1e5)];return{vol:0,stage:0,time:0,length:t,totalLength:t[0]+t[1]+t[2]}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=a},741:function(e,t){"use strict";function a(e){var t=.1*Math.pow(e.lpf.frequency,3),a=5/(1+20*Math.pow(e.lpf.resonance,2))*(.01+t);return a>.8&&(a=.8),{p:0,dp:0,w:t,wd:1+1e-4*e.lpf.ramp,dmp:a,php:0,hp:.1*Math.pow(e.hpf.frequency,2),hpd:1+3e-4*e.hpf.ramp}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=a},742:function(e,t){"use strict";function a(e){for(var t=[],a=0;32>a;++a)t[a]=2*Math.random()-1;return{buffer:t}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=a},743:function(e,t){"use strict";function a(e){var t=1020*Math.pow(e.phaser.offset,2);e.phaser.offset<0&&(t=-t);var a=1*Math.pow(e.phaser.ramp,2);e.phaser.ramp<0&&(a=-a);for(var r=[],n=0;1024>n;n++)r[n]=0;return{phase:0,fphase:t,fdphase:a,iphase:Math.abs(Math.floor(t)),ipp:0,buffer:r}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=a},744:function(e,t){"use strict";function a(e){var t=Math.floor(2e4*Math.pow(1-e.repeat.speed,2)+32);return 0===e.repeat.speed&&(t=0),{limit:t}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=a},745:function(e,t){"use strict";function a(e){return{phase:0,speed:.01*Math.pow(e.vibrato.speed,2),amp:.5*e.vibrato.strength}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=a},746:function(e,t,a){"use strict";"create index";function r(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0}),t.Vibrato=t.Tone=t.Tonal=t.SquareDuty=t.Repeat=t.Phaser=t.LowPassFilter=t.HighPassFilter=t.Envelope=t.Effect=void 0;var n=a(747),u=r(n),o=a(748),f=r(o),l=a(756),d=r(l),i=a(755),p=r(i),s=a(754),c=r(s),v=a(753),h=r(v),y=a(752),m=r(y),_=a(751),M=r(_),b=a(749),w=r(b),P=a(750),O=r(P);t.Effect=u["default"],t.Envelope=f["default"],t.HighPassFilter=d["default"],t.LowPassFilter=p["default"],t.Phaser=c["default"],t.Repeat=h["default"],t.SquareDuty=m["default"],t.Tonal=M["default"],t.Tone=w["default"],t.Vibrato=O["default"]},747:function(e,t,a){"use strict";function r(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&(t[a]=e[a]);return t["default"]=e,t}function n(e){return e&&e.__esModule?e:{"default":e}}function u(){var e=arguments.length<=0||void 0===arguments[0]?.5:arguments[0],t=arguments.length<=1||void 0===arguments[1]?44100:arguments[1],a=arguments.length<=2||void 0===arguments[2]?8:arguments[2];return{waveType:q.SQUARE,envelope:(0,f["default"])(),tone:(0,d["default"])(),vibrato:(0,p["default"])(),tonal:(0,c["default"])(),duty:(0,h["default"])(),repeat:(0,m["default"])(),phaser:(0,M["default"])(),lpf:(0,w["default"])(),hpf:(0,O["default"])(),volume:e,sampleRate:t,bitDepth:a}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=u;var o=a(748),f=n(o),l=a(749),d=n(l),i=a(750),p=n(i),s=a(751),c=n(s),v=a(752),h=n(v),y=a(753),m=n(y),_=a(754),M=n(_),b=a(755),w=n(b),P=a(756),O=n(P),j=a(735),q=r(j)},748:function(e,t){"use strict";function a(){var e=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],t=e.attack,a=void 0===t?0:t,r=e.sustain,n=void 0===r?.3:r,u=e.punch,o=void 0===u?0:u,f=e.decay,l=void 0===f?.4:f;return{attack:a,sustain:n,punch:o,decay:l}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=a},749:function(e,t){"use strict";function a(){var e=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],t=e.frequency,a=void 0===t?.3:t,r=e.limit,n=void 0===r?0:r,u=e.ramp,o=void 0===u?0:u,f=e.deltaRamp,l=void 0===f?0:f;return{frequency:a,limit:n,ramp:o,deltaRamp:l}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=a},750:function(e,t){"use strict";function a(){var e=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],t=e.strength,a=void 0===t?0:t,r=e.speed,n=void 0===r?0:r;return{strength:a,speed:n}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=a},751:function(e,t){"use strict";function a(){var e=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],t=e.mod,a=void 0===t?0:t,r=e.speed,n=void 0===r?0:r;return{mod:a,speed:n}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=a},752:function(e,t){"use strict";function a(){var e=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],t=e.value,a=void 0===t?0:t,r=e.ramp,n=void 0===r?0:r;return{value:a,ramp:n}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=a},753:function(e,t){"use strict";function a(){var e=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],t=e.speed,a=void 0===t?0:t;return{speed:a}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=a},754:function(e,t){"use strict";function a(){var e=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],t=e.offset,a=void 0===t?0:t,r=e.ramp,n=void 0===r?0:r;return{offset:a,ramp:n}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=a},755:function(e,t){"use strict";function a(){var e=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],t=e.frequency,a=void 0===t?1:t,r=e.ramp,n=void 0===r?0:r,u=e.resonance,o=void 0===u?0:u;return{frequency:a,ramp:n,resonance:o}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=a},756:function(e,t){"use strict";function a(){var e=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],t=e.frequency,a=void 0===t?0:t,r=e.ramp,n=void 0===r?0:r;return{frequency:a,ramp:n}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=a},757:function(e,t,a){"use strict";"create index";function r(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0}),t.Random=t.PushSound=t.PowerUp=t.PickUpCoin=t.LaserShoot=t.HitHurt=t.Explosion=t.BlipSelect=void 0;var n=a(758),u=r(n),o=a(759),f=r(o),l=a(760),d=r(l),i=a(761),p=r(i),s=a(762),c=r(s),v=a(763),h=r(v),y=a(764),m=r(y),_=a(765),M=r(_);t.BlipSelect=u["default"],t.Explosion=f["default"],t.HitHurt=d["default"],t.LaserShoot=p["default"],t.PickUpCoin=c["default"],t.PowerUp=h["default"],t.PushSound=m["default"],t.Random=M["default"]},758:function(e,t,a){"use strict";function r(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&(t[a]=e[a]);return t["default"]=e,t}function n(e){return e&&e.__esModule?e:{"default":e}}function u(e,t){var a=(0,f["default"])();return a.waveType=(0,d["default"])(t),a.waveType===d.NOISE&&(a.waveType=e(1)),a.waveType===d.SQUARE&&(a.duty.value=t(.6)),a.tone.frequency=.2+t(.4),a.envelope.attack=0,a.envelope.sustain=.1+t(.1),a.envelope.decay=t(.2),a.hpf.frequency=.1,a}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=u;var o=a(747),f=n(o),l=a(735),d=r(l)},759:function(e,t,a){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function n(e,t){var a=(0,o["default"])();return e(1)?(a.tone.frequency=.1+t(.4),a.tone.ramp=-.1+t(.4)):(a.tone.frequency=.2+t(.7),a.tone.ramp=-.2-t(.2)),a.tone.frequency*=a.tone.frequency,0===e(4)&&(a.tone.ramp=0),0===e(2)&&(a.repeat.speed=.3+t(.5)),a.envelope.attack=0,a.envelope.sustain=.1+t(.3),a.envelope.decay=t(.5),0===e(1)&&(a.phaser.offset=-.3+t(.9),a.phaser.ramp=-t(.3)),a.envelope.punch=.2+t(.6),e(1)&&(a.vibrato.strength=t(.7),a.vibrato.speed=t(.6)),0===e(2)&&(a.tonal.speed=.6+t(.3),a.tonal.mod=.8-t(1.6)),a}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n;var u=a(747),o=r(u)},760:function(e,t,a){"use strict";function r(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&(t[a]=e[a]);return t["default"]=e,t}function n(e){return e&&e.__esModule?e:{"default":e}}function u(e,t){var a=(0,f["default"])();return a.waveType=(0,d["default"])(t),a.waveType===d.SQUARE&&(a.duty.value=t(.6)),a.tone.frequency=.2+t(.6),a.tone.ramp=-.3-t(.4),a.envelope.attack=0,a.envelope.sustain=t(.1),a.envelope.decay=.1+t(.2),e(1)&&(a.hpf.frequency=t(.3)),a}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=u;var o=a(747),f=n(o),l=a(735),d=r(l)},761:function(e,t,a){"use strict";function r(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&(t[a]=e[a]);return t["default"]=e,t}function n(e){return e&&e.__esModule?e:{"default":e}}function u(e,t){var a=(0,f["default"])();return a.waveType=(0,d["default"])(t),a.waveType===d.NOISE&&(a.waveType=d.SQUARE),a.tone.frequency=.5+t(.5),a.tone.limit=a.tone.frequency-.2-t(.6),a.tone.limit<.2&&(a.tone.limit=.2),a.tone.ramp=-.15-t(.2),0===e(2)&&(a.tone.frequency=.3+t(.6),a.tone.limit=t(.1),a.tone.ramp=-.35-t(.3)),e(1)?(a.duty.value=t(.5),a.duty.ramp=t(.2)):(a.duty.value=.4+t(.5),a.duty.ramp=-t(.7)),a.envelope.attack=0,a.envelope.sustain=.1+t(.2),a.envelope.decay=t(.4),e(1)&&(a.envelope.punch=t(.3)),0===e(2)&&(a.phaser.offset=t(.2),a.phaser.ramp=-t(.2)),e(1)&&(a.hpf.frequency=t(.3)),a}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=u;var o=a(747),f=n(o),l=a(735),d=r(l)},762:function(e,t,a){"use strict";function r(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&(t[a]=e[a]);return t["default"]=e,t}function n(e){return e&&e.__esModule?e:{"default":e}}function u(e,t){var a=(0,f["default"])();if(a.waveType=(0,d["default"])(t),a.waveType===d.NOISE&&(a.waveType=d.SQUARE),a.tone.frequency=.4+t(.5),a.envelope.attack=0,a.envelope.sustain=t(.1),a.envelope.decay=.1+t(.4),a.envelope.punch=.3+t(.3),e(1)){a.tonal.speed=.5+t(.2);var r=(1|t(7))+1,n=r+(1|t(7))+2;a.tonal.mod=r/n}return a}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=u;var o=a(747),f=n(o),l=a(735),d=r(l)},763:function(e,t,a){"use strict";function r(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&(t[a]=e[a]);return t["default"]=e,t}function n(e){return e&&e.__esModule?e:{"default":e}}function u(e,t){var a=(0,f["default"])();return e(1)?a.waveType=d.SAWTOOTH:a.duty.value=t(.6),a.waveType=(0,d["default"])(t),3===a.waveType&&(a.waveType=d.SQUARE),e(1)?(a.tone.frequency=.2+t(.3),a.tone.ramp=.1+t(.4),a.repeat.speed=.4+t(.4)):(a.tone.frequency=.2+t(.3),a.tone.ramp=.05+t(.2),e(1)&&(a.vibrato.strength=t(.7),a.vibrato.speed=t(.6))),a.envelope.attack=0,a.envelope.sustain=t(.4),a.envelope.decay=.1+t(.4),a}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=u;var o=a(747),f=n(o),l=a(735),d=r(l)},764:function(e,t,a){"use strict";function r(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&(t[a]=e[a]);return t["default"]=e,t}function n(e){return e&&e.__esModule?e:{"default":e}}function u(e,t){var a=(0,f["default"])();return a.waveType=(0,d["default"])(t),2===a.waveType&&a.waveType++,0===a.waveType&&(a.waveType=d.NOISE),a.tone.frequency=.1+t(.4),a.tone.ramp=.05+t(.2),a.envelope.attack=.01+t(.09),a.envelope.sustain=.01+t(.09),a.envelope.decay=.01+t(.09),a.repeat.speed=.3+t(.5),a.phaser.offset=-.3+t(.9),a.phaser.ramp=-t(.3),a.tonal.speed=.6+t(.3),a.tonal.mod=.8-t(1.6),a}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=u;var o=a(747),f=n(o),l=a(735),d=r(l)},765:function(e,t,a){"use strict";function r(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&(t[a]=e[a]);return t["default"]=e,t}function n(e){return e&&e.__esModule?e:{"default":e}}function u(e,t){var a=(0,f["default"])();return a.waveType=(0,d["default"])(t),a.tone.frequency=Math.pow(t(2)-1,2),e(1)&&(a.tone.frequency=Math.pow(t(2)-1,3)+.5),a.tone.limit=0,a.tone.ramp=Math.pow(t(2)-1,5),a.tone.frequency>.7&&a.tone.ramp>.2&&(a.tone.ramp=-a.tone.ramp),a.tone.frequency<.2&&a.tone.ramp<-.05&&(a.tone.ramp=-a.tone.ramp),a.tone.deltaRamp=Math.pow(t(2)-1,3),a.duty.value=t(2)-1,a.duty.ramp=Math.pow(t(2)-1,3),a.vibrato.strength=Math.pow(t(2)-1,3),a.vibrato.speed=t(2)-1,a.envelope.attack=Math.pow(t(2)-1,3),a.envelope.sustain=Math.pow(t(2)-1,2),a.envelope.decay=t(2)-1,a.envelope.punch=Math.pow(t(.8),2),a.envelope.attack+a.envelope.sustain+a.envelope.decay<.2&&(a.envelope.sustain+=.2+t(.3),a.envelope.decay+=.2+t(.3)),a.lpf.resonance=t(2)-1,a.lpf.frequency=1-Math.pow(t(1),3),a.lpf.ramp=Math.pow(t(2)-1,3),a.lpf.freq<.1&&a.lpf.ramp<-.05&&(a.lpf.ramp=-a.lpf.ramp),a.hpf.frequency=Math.pow(t(1),5),a.hpf.ramp=Math.pow(t(2)-1,5),a.phaser.offset=Math.pow(t(2)-1,3),a.phaser.ramp=Math.pow(t(2)-1,3),a.repeat.speed=t(2)-1,a.tonal.speed=t(2)-1,a.tonal.mod=t(2)-1,a}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=u;var o=a(747),f=n(o),l=a(735),d=r(l)},766:function(e,t,a){"use strict";"create index";function r(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0}),t.SoundEffect=t.Generate=void 0;var n=a(767),u=r(n),o=a(768),f=r(o);t.Generate=u["default"],t.SoundEffect=f["default"]},767:function(e,t,a){"use strict";function r(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&(t[a]=e[a]);return t["default"]=e,t}function n(e){return e&&e.__esModule?e:{"default":e}}function u(e){var t=arguments.length<=1||void 0===arguments[1]?1:arguments[1],a=(0,h["default"])((0,c["default"])(e),e);D=(0,M["default"])(e),L=(0,q["default"])(e),A=(0,m["default"])(e),k=(0,O["default"])(e),U=(0,w["default"])(e),N=(0,T["default"])(e),a.bufferLength=Math.ceil(A.totalLength/a.summands);var r=void 0;r=e.sampleRate<I?(0,x["default"])(4*a.bufferLength,I):(0,x["default"])(a.bufferLength,e.sampleRate);var n=r.getBuffer(),u=0;do{0!==N.limit&&++a.repeatTime>=N.limit&&(0,h["default"])(a,e),o(a,u),f(a,e),l(a,e),d(a,e),i(a,e);var s=p(a,e,k,U,D,A);if(a.sampleSum+=s,++a.numSummed>=a.summands){if(a.numSummed=0,s=a.sampleSum/a.summands,a.sampleSum=0,s=s/8*t,s*=a.gain,n[a.bufferIndex++]=s,e.sampleRate<I&&(n[a.bufferIndex++]=s,n[a.bufferIndex++]=s,n[a.bufferIndex++]=s),a.bufferComplete)do a.bufferIndex++,e.sampleRate<I&&(n[a.bufferIndex++]=0,n[a.bufferIndex++]=0,n[a.bufferIndex++]=0),n[a.bufferIndex]=0;while(a.bufferIndex<a.bufferLength);u++}}while(!a.bufferComplete);return r}function o(e,t){0!==e.arpLimit&&t>=e.arpLimit&&(e.arpLimit=0,e.fPeriod*=e.arpMod)}function f(e,t){e.fSlide+=e.fDeltaSlide,e.fPeriod*=e.fSlide,e.fPeriod>e.fMaxPeriod&&(e.fPeriod=e.fMaxPeriod,t.tone.limit>0&&(e.bufferComplete=!0))}function l(e,t){var a=e.fPeriod;L.amp>0&&(L.phase+=L.speed,a=e.fPeriod*(1+Math.sin(L.phase)*L.amp)),e.period=Math.floor(a),e.period<8&&(e.period=8),e.squareDuty+=e.squareSlide,e.squareDuty<0&&(e.squareDuty=0),e.squareDuty>.5&&(e.squareDuty=.5)}function d(e,t){A.time++,A.time>A.length[A.stage]&&(A.time=0,A.stage++,3===A.stage&&(e.bufferComplete=!0)),0===A.stage?A.vol=A.time/A.length[0]:1===A.stage?A.vol=1+2*Math.pow(1-A.time/A.length[1],1)*t.envelope.punch:A.vol=1-A.time/A.length[2]}function i(e,t){k.fphase+=k.fdphase,k.iphase=Math.abs(Math.floor(k.fphase)),k.iphase>1023&&(k.iphase=1023),0!==D.hpd&&(D.hp*=D.hpd,D.hp<1e-5&&(D.hp=1e-5),D.hp>.1&&(D.hp=.1))}function p(e,t){for(var a=0,r=0;8>r;r++){var n=0;if(k.phase++,k.phase>=e.period&&(k.phase%=e.period,t.waveType===E.NOISE))for(var u=0;32>u;u++)U.buffer[u]=2*Math.random()-1;var o=k.phase/e.period;if(t.waveType===E.SQUARE)n=o<e.squareDuty?.5:-.5;else if(t.waveType===E.SAWTOOTH)n=1-2*o;else if(t.waveType===E.SINE)n=Math.sin(2*o*Math.PI);else if(t.waveType===E.NOISE)n=U.buffer[Math.floor(32*k.phase/e.period)];else if(t.waveType===E.TRIANGLE)n=Math.abs(1-2*o)-1;else{if(t.waveType!==E.BREAKER)throw new Exception("sfxr - Bad waveType: "+t.waveType);n=Math.abs(1-o*o*2)-1}var f=D.p;D.w*=D.wd,D.w<0&&(D.w=0),D.w>.1&&(D.w=.1),1!==t.lpf.frequency?(D.dp+=(n-D.p)*D.w,D.dp-=D.dp*D.dmp):(D.p=n,D.dp=0),D.p+=D.dp,D.php+=D.p-f,D.php-=D.php*D.hp,n=D.php,k.buffer[1023&k.ipp]=n,n+=k.buffer[k.ipp-k.iphase+1024&1023],k.ipp=k.ipp+1&1023,a+=n*A.vol}return a}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=u;var s=a(737),c=n(s),v=a(738),h=n(v),y=a(740),m=n(y),_=a(741),M=n(_),b=a(742),w=n(b),P=a(743),O=n(P),j=a(745),q=n(j),S=a(744),T=n(S),g=a(768),x=n(g),R=a(735),E=r(R),I=44100,D=void 0,L=void 0,A=void 0,k=void 0,U=void 0,N=void 0},768:function(e,t){"use strict";function a(e,t){var a=new AudioContext,r=a.createBuffer(1,e,t);return{minSampleRate:44100,getBuffer:function(){return r.getChannelData(0)},play:function(){var e=a.createBufferSource(),t=a.createBiquadFilter(),n=a.createBiquadFilter(),u=a.createBiquadFilter();e.buffer=r,e.connect(t),t.frequency.value=1600,n.frequency.value=1600,u.frequency.value=1600,t.connect(n),n.connect(u),u.connect(a.destination);var o=a.currentTime;e.start?e.start(o):e.noteOn(o)}}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=a}})});
//# sourceMappingURL=data:application/json;base64,