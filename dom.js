!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("dom",[],t):"object"==typeof exports?exports.dom=t():(e.lazer=e.lazer||{},e.lazer.dom=t())}(this,function(){return function(e){function t(o){if(n[o])return n[o].exports;var i=n[o]={exports:{},id:o,loaded:!1};return e[o].call(i.exports,i,i.exports,t),i.loaded=!0,i.exports}var n={};return t.m=e,t.c=n,t.p="",t(0)}({0:function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0}),t.RequestAnimationFrame=t.RemoveFromDOM=t.RemoveEventListener=t.Boot=t.AddToDOM=t.AddEventListener=void 0;var i=n(151),r=o(i),u=n(152),a=o(u),s=n(153),d=o(s),c=n(154),f=o(c),l=n(155),m=o(l),v=n(156),h=o(v);t.AddEventListener=r["default"],t.AddToDOM=a["default"],t.Boot=d["default"],t.RemoveEventListener=f["default"],t.RemoveFromDOM=m["default"],t.RequestAnimationFrame=h["default"]},151:function(e,t){"use strict";function n(e,t,n){var o=arguments.length<=3||void 0===arguments[3]?!1:arguments[3];e.addEventListener(t,n,o)}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},152:function(e,t){"use strict";function n(e){var t=arguments.length<=1||void 0===arguments[1]?null:arguments[1],n=arguments.length<=2||void 0===arguments[2]?!0:arguments[2],i=void 0;return t&&("string"==typeof t?i=document.getElementById(t):"object"===("undefined"==typeof t?"undefined":o(t))&&1===t.nodeType&&(i=t)),i||(i=document.body),n&&i.style&&(i.style.overflow="hidden"),i.appendChild(e),e}Object.defineProperty(t,"__esModule",{value:!0});var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e};t["default"]=n},153:function(e,t){"use strict";function n(){return o?void 0:new Promise(function(e,t){"complete"===document.readyState||"interactive"===document.readyState?(o=!0,e()):!function(){var t=function n(){document.removeEventListener("deviceready",n,!0),document.removeEventListener("DOMContentLoaded",n,!0),window.removeEventListener("load",n,!0),e()};document.body?(document.addEventListener("DOMContentLoaded",t,!0),window.addEventListener("load",t,!0)):window.setTimeout(t,20)}()})}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n;var o=!1},154:function(e,t){"use strict";function n(e,t,n){e.removeEventListener(t,n)}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},155:function(e,t){"use strict";function n(e){e.parentNode&&e.parentNode.removeChild(e)}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},156:function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),u=n(157),a=o(u),s=function(){function e(t){var n=arguments.length<=1||void 0===arguments[1]?!1:arguments[1];i(this,e),this.root=t,this.forceSetTimeOut=n,n||(this.forceSetTimeOut=!this.normalizeRaf()),this._running=!1,this._timeOutID=null,this._callback=a["default"]}return r(e,[{key:"start",value:function(e){var t=this;this._running||(this._running=!0,this._callback=e,this.usingSetTimeout?this._timeOutID=this.root.setTimeout(function(e){return t.updateSetTimeout(Date.now())},0):this._timeOutID=this.root.requestAnimationFrame(function(e){return t.updateRAF(e)}))}},{key:"updateRAF",value:function(e){var t=this;this._callback(e),this._timeOutID=this.root.requestAnimationFrame(function(e){return t.updateRAF(e)})}},{key:"updateSetTimeout",value:function(e){var t=this;this._timeOutID=this.root.setTimeout(function(e){return t.updateSetTimeout(Date.now())},0)}},{key:"stop",value:function(){this._running&&(this.usingSetTimeout?this.root.clearTimeout(this._timeOutID):this.root.cancelAnimationFrame(this._timeOutID),this._running=!1)}},{key:"normalizeRaf",value:function(){if(this.root.requestAnimationFrame)return!0;for(var e=["ms","moz","webkit","o"],t=0;t<e.length;t++){var n=e[t];return this.root.requestAnimationFrame=this.root[n]+"RequestAnimationFrame",this.root.cancelAnimationFrame=this.root[n]+"CancelAnimationFrame",!0}return!1}},{key:"usingSetTimeout",get:function(){return this.forceSetTimeOut}},{key:"usingRAF",get:function(){return!this.forceSetTimeOut}},{key:"isRunning",get:function(){return this._running},set:function(e){e?this.start():this.stop()}}]),e}();t["default"]=s},157:function(e,t){"use strict";function n(){}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n}})});
//# sourceMappingURL=data:application/json;base64,