!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("geom",[],t):"object"==typeof exports?exports.geom=t():(e.lazer=e.lazer||{},e.lazer.geom=t())}(this,function(){return function(e){function t(u){if(n[u])return n[u].exports;var i=n[u]={exports:{},id:u,loaded:!1};return e[u].call(i.exports,i,i.exports,t),i.loaded=!0,i.exports}var n={};return t.m=e,t.c=n,t.p="",t(0)}([function(e,t,n){"use strict";"create index";function u(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t["default"]=e,t}Object.defineProperty(t,"__esModule",{value:!0}),t.rectangle=t.line=t.intersect=t.circle=void 0;var i=n(201),r=u(i),o=n(213),a=u(o),d=n(220),l=u(d),f=n(241),c=u(f);t.circle=r,t.intersect=a,t.line=l,t.rectangle=c},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t){"use strict";function n(e,t,n){var u=n-t;if(0>=u)return 0;var i=(e-t)%u;return 0>i&&(i+=u),i+t}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0}),t.Translate=t.Random=t.GetBounds=t.Equals=t.Copy=t.ContainsXY=t.Clone=t.CircumferencePoint=t.Circumference=t.Circle=t.Area=void 0;var i=n(202),r=u(i),o=n(203),a=u(o),d=n(204),l=u(d),f=n(205),c=u(f),s=n(206),h=u(s),y=n(207),x=u(y),_=n(208),v=u(_),M=n(209),g=u(M),b=n(210),j=u(b),p=n(211),O=u(p),P=n(212),m=u(P);t.Area=r["default"],t.Circle=a["default"],t.Circumference=l["default"],t.CircumferencePoint=c["default"],t.Clone=h["default"],t.ContainsXY=x["default"],t.Copy=v["default"],t.Equals=g["default"],t.GetBounds=j["default"],t.Random=O["default"],t.Translate=m["default"]},function(e,t){"use strict";function n(e){return e.radius>0?Math.PI*e.radius*e.radius:0}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},function(e,t){"use strict";function n(){var e=arguments.length<=0||void 0===arguments[0]?0:arguments[0],t=arguments.length<=1||void 0===arguments[1]?0:arguments[1],n=arguments.length<=2||void 0===arguments[2]?0:arguments[2],u=n,i=2*n;return{x:e,y:t,set:function(e){var t=arguments.length<=1||void 0===arguments[1]?e:arguments[1],n=arguments.length<=2||void 0===arguments[2]?u:arguments[2];this.x=e,this.y=t,this.radius=n},get radius(){return u},set radius(e){u=e,i=2*e},get diameter(){return i},set diameter(e){i=e,u=.5*e},get left(){return this.x-u},get right(){return this.x+u},get top(){return this.y-u},get bottom(){return this.y+u},toString:function(){return"[Circle (x="+this.x+", y="+this.y+", radius="+this.radius+")]"}}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},function(e,t){"use strict";function n(e){return 2*(Math.PI*e.radius)}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},function(e,t){"use strict";function n(e,t){var n=arguments.length<=2||void 0===arguments[2]?{x:0,y:0}:arguments[2];return n.x=e.x+e.radius*Math.cos(t),n.y=e.y+e.radius*Math.sin(t),n}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e){return(0,o["default"])(e.x,e.y,e.radius)}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=i;var r=n(203),o=u(r)},function(e,t){"use strict";function n(e,t,n){if(e.radius<=0||t<e.left||t>e.right||n<e.top||n>e.bottom)return!1;var u=(e.x-t)*(e.x-t),i=(e.y-n)*(e.y-n);return u+i<=e.diameter}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},function(e,t){"use strict";function n(e,t){return t.set(e.x,e.y,e.radius)}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},function(e,t){"use strict";function n(e,t){return e.x===t.x&&e.y===t.y&&e.radius===t.radius}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},function(e,t){"use strict";function n(e){var t=arguments.length<=1||void 0===arguments[1]?{x:0,y:0,width:0,height:0}:arguments[1];return t.x=e.x-e.radius,t.y=e.y-e.radius,t.width=e.diameter,t.height=e.diameter,t}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},function(e,t){"use strict";function n(e){var t=arguments.length<=1||void 0===arguments[1]?{x:0,y:0}:arguments[1],n=2*Math.PI*Math.random(),u=Math.random()+Math.random();u>1&&(u=2-u);var i=u*Math.cos(n),r=u*Math.sin(n);return t.x=e.x+i*e.radius,t.y=e.y+r*e.radius,t}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},function(e,t){"use strict";function n(e,t,n){return e.x+=t,e.y+=n,e}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},function(e,t,n){"use strict";"create index";function u(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0}),t.RectangleToRectangle=t.LineToLine=t.LineSegmentToLineSegment=t.CircleToRectangle=t.CircleToCircle=void 0;var i=n(214),r=u(i),o=n(216),a=u(o),d=n(217),l=u(d),f=n(218),c=u(f),s=n(219),h=u(s);t.CircleToCircle=r["default"],t.CircleToRectangle=a["default"],t.LineSegmentToLineSegment=l["default"],t.LineToLine=c["default"],t.RectangleToRectangle=h["default"]},function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e,t){return(0,o["default"])(e.x,e.y,t.x,t.y)<=e.radius+t.radius}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=i;var r=n(215),o=u(r)},function(e,t){"use strict";function n(e,t,n,u){var i=e-n,r=t-u;return Math.sqrt(i*i+r*r)}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},function(e,t){"use strict";function n(e,t){var n=t.width/2,u=t.height/2,i=Math.abs(e.x-t.x-n),r=n+e.radius;if(i>r)return!1;var o=Math.abs(e.y-t.y-u),a=u+e.radius;if(o>a)return!1;if(n>=i||u>=o)return!0;var d=(i-n)*(i-n),l=(o-u)*(o-u);return d+l<=e.diameter}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},function(e,t){"use strict";function n(e,t){var n=arguments.length<=2||void 0===arguments[2]?{x:0,y:0}:arguments[2],u=e.y2-e.y1,i=t.y2-t.y1,r=e.x1-e.x2,o=t.x1-t.x2,a=e.x2*e.y1-e.x1*e.y2,d=t.x2*t.y1-t.x1*t.y2,l=u*o-i*r;if(0===l)return null;n.x=(r*d-o*a)/l,n.y=(i*a-u*d)/l;var f=(t.y2-t.y1)*(e.x2-e.x1)-(t.x2-t.x1)*(e.y2-e.y1),c=((t.x2-t.x1)*(e.y1-t.y1)-(t.y2-t.y1)*(e.x1-t.x1))/f,s=((e.x2-e.x1)*(e.y1-t.y1)-(e.y2-e.y1)*(e.x1-t.x1))/f;return c>=0&&1>=c&&s>=0&&1>=s?n:null}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},function(e,t){"use strict";function n(e,t){var n=arguments.length<=2||void 0===arguments[2]?{x:0,y:0}:arguments[2],u=e.y2-e.y1,i=t.y2-t.y1,r=e.x1-e.x2,o=t.x1-t.x2,a=e.x2*e.y1-e.x1*e.y2,d=t.x2*t.y1-t.x1*t.y2,l=u*o-i*r;return 0===l?null:(n.x=(r*d-o*a)/l,n.y=(i*a-u*d)/l,n)}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},function(e,t){"use strict";function n(e,t){}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},function(e,t,n){"use strict";"create index";function u(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0}),t.Width=t.Slope=t.SetFromAngle=t.Reflect=t.Random=t.PointOnSegment=t.PointOnLine=t.PerpSlope=t.NormalY=t.NormalX=t.NormalAngle=t.Line=t.Length=t.Height=t.GetMidPoint=t.Copy=t.Clone=t.CenterOn=t.BresenhamLine=t.Angle=void 0;var i=n(221),r=u(i),o=n(222),a=u(o),d=n(223),l=u(d),f=n(224),c=u(f),s=n(226),h=u(s),y=n(227),x=u(y),_=n(228),v=u(_),M=n(229),g=u(M),b=n(225),j=u(b),p=n(230),O=u(p),P=n(231),m=u(P),C=n(232),w=u(C),S=n(233),R=u(S),L=n(234),A=u(L),T=n(235),z=u(T),F=n(236),G=u(F),I=n(237),N=u(I),X=n(238),Y=u(X),q=n(239),B=u(q),E=n(240),H=u(E);t.Angle=r["default"],t.BresenhamLine=a["default"],t.CenterOn=l["default"],t.Clone=c["default"],t.Copy=h["default"],t.GetMidPoint=x["default"],t.Height=v["default"],t.Length=g["default"],t.Line=j["default"],t.NormalAngle=O["default"],t.NormalX=m["default"],t.NormalY=w["default"],t.PerpSlope=R["default"],t.PointOnLine=A["default"],t.PointOnSegment=z["default"],t.Random=G["default"],t.Reflect=N["default"],t.SetFromAngle=Y["default"],t.Slope=B["default"],t.Width=H["default"]},function(e,t){"use strict";function n(e){return Math.atan2(e.y2-e.y1,e.x2-e.x1)}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},function(e,t){"use strict";function n(e){var t=arguments.length<=1||void 0===arguments[1]?1:arguments[1],n=arguments.length<=2||void 0===arguments[2]?[]:arguments[2],u=Math.round(e.x1),i=Math.round(e.y1),r=Math.round(e.x2),o=Math.round(e.y2),a=Math.abs(r-u),d=Math.abs(o-i),l=r>u?1:-1,f=o>i?1:-1,c=a-d;n.push([u,i]);for(var s=1;u!=r||i!=o;){var h=c<<1;h>-d&&(c-=d,u+=l),a>h&&(c+=a,i+=f),s%t===0&&n.push([u,i]),s++}return n}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},function(e,t){"use strict";function n(e){var t=arguments.length<=1||void 0===arguments[1]?0:arguments[1],n=arguments.length<=2||void 0===arguments[2]?0:arguments[2],u=t-(e.x1+e.x2)/2,i=n-(e.y1+e.y2)/2;return e.x1+=u,e.y1+=i,e.x2+=u,e.y2+=i,e}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e){return(0,o["default"])(e.x1,e.y1,e.x2,e.y2)}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=i;var r=n(225),o=u(r)},function(e,t){"use strict";function n(){var e=arguments.length<=0||void 0===arguments[0]?0:arguments[0],t=arguments.length<=1||void 0===arguments[1]?0:arguments[1],n=arguments.length<=2||void 0===arguments[2]?0:arguments[2],u=arguments.length<=3||void 0===arguments[3]?0:arguments[3];return{x1:e,y1:t,x2:n,y2:u,set:function(e,t,n,u){return this.x1=e,this.y1=t,this.x2=n,this.y2=u,this},get left(){return Math.min(this.x1,this.x2)},get right(){return Math.max(this.x1,this.x2)},get top(){return Math.min(this.y1,this.y2)},get bottom(){return Math.max(this.y1,this.y2)},toString:function(){return"[Line (x1="+this.x1+", y1="+this.y1+", x2="+this.x2+", y2="+this.y2+")]"}}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},function(e,t){"use strict";function n(e,t){return t.set(e.x1,e.y1,e.x2,e.y2)}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},function(e,t){"use strict";function n(e){var t=arguments.length<=1||void 0===arguments[1]?{x:0,y:0}:arguments[1];return t.x=(e.x1+e.x2)/2,t.y=(e.y1+e.y2)/2,t}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},function(e,t){"use strict";function n(e){return Math.abs(e.y1-e.y2)}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},function(e,t){"use strict";function n(e){return Math.sqrt((e.x2-e.x1)*(e.x2-e.x1)+(e.y2-e.y1)*(e.y2-e.y1))}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e){return(0,d["default"])((0,o["default"])(e)-1.5707963267948966,-Math.PI,Math.PI)}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=i;var r=n(221),o=u(r),a=n(106),d=u(a)},function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e){return Math.cos((0,o["default"])(e)-1.5707963267948966)}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=i;var r=n(221),o=u(r)},function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e){return Math.sin((0,o["default"])(e)-1.5707963267948966)}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=i;var r=n(221),o=u(r)},function(e,t){"use strict";function n(e){return-((e.x2-e.x1)/(e.y2-e.y1))}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},function(e,t){"use strict";function n(e,t,n){return(t-e.x1)*(e.y2-e.y1)===(e.x2-e.x1)*(n-e.y1)}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},function(e,t){"use strict";function n(e,t,n){var u=Math.min(e.x1,e.x2),i=Math.max(e.x1,e.x2),r=Math.min(e.y1,e.y2),o=Math.max(e.y1,e.y2);return(t-e.x1)*(e.y2-e.y1)===(e.x2-e.x1)*(n-e.y1)&&t>=u&&i>=t&&n>=r&&o>=n}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},function(e,t){"use strict";function n(e){var t=arguments.length<=1||void 0===arguments[1]?{x:0,y:0}:arguments[1],n=Math.random();return t.x=e.x1+n*(e.x2-e.x1),t.y=e.y1+n*(e.y2-e.y1),t}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e,t){return 2*(0,d["default"])(t)-3.141592653589793-(0,o["default"])(e)}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=i;var r=n(221),o=u(r),a=n(230),d=u(a)},function(e,t){"use strict";function n(e,t,n,u,i){return e.set(t,n,t+Math.cos(u)*i,n+Math.sin(u)*i)}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},function(e,t){"use strict";function n(e){return(e.y2-e.y1)/(e.x2-e.x1)}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},function(e,t){"use strict";function n(e){return Math.abs(e.x1-e.x2)}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},function(e,t,n){"use strict";"create index";function u(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0}),t.Union=t.Translate=t.Scale=t.Rectangle=t.Random=t.Perimeter=t.Overlaps=t.MergeXY=t.MergeRect=t.MergePoints=t.Inflate=t.GetSize=t.GetCenter=t.GetAspectRatio=t.FloorAll=t.Floor=t.FitOutside=t.FitInside=t.Copy=t.ContainsXY=t.ContainsRect=t.Clone=t.CenterOn=t.CeilAll=t.Ceil=t.Area=void 0;var i=n(242),r=u(i),o=n(243),a=u(o),d=n(244),l=u(d),f=n(245),c=u(f),s=n(246),h=u(s),y=n(248),x=u(y),_=n(249),v=u(_),M=n(250),g=u(M),b=n(251),j=u(b),p=n(253),O=u(p),P=n(254),m=u(P),C=n(255),w=u(C),S=n(252),R=u(S),L=n(256),A=u(L),T=n(257),z=u(T),F=n(258),G=u(F),I=n(259),N=u(I),X=n(260),Y=u(X),q=n(261),B=u(q),E=n(262),H=u(E),U=n(263),W=u(U),k=n(264),D=u(k),J=n(247),K=u(J),Q=n(265),V=u(Q),Z=n(266),$=u(Z),ee=n(267),te=u(ee);t.Area=r["default"],t.Ceil=a["default"],t.CeilAll=l["default"],t.CenterOn=c["default"],t.Clone=h["default"],t.ContainsRect=x["default"],t.ContainsXY=v["default"],t.Copy=g["default"],t.FitInside=j["default"],t.FitOutside=O["default"],t.Floor=m["default"],t.FloorAll=w["default"],t.GetAspectRatio=R["default"],t.GetCenter=A["default"],t.GetSize=z["default"],t.Inflate=G["default"],t.MergePoints=N["default"],t.MergeRect=Y["default"],t.MergeXY=B["default"],t.Overlaps=H["default"],t.Perimeter=W["default"],t.Random=D["default"],t.Rectangle=K["default"],t.Scale=V["default"],t.Translate=$["default"],t.Union=te["default"]},function(e,t){"use strict";function n(e){return e.width*e.height}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},function(e,t){"use strict";function n(e){return e.x=Math.ceil(e.x),e.y=Math.ceil(e.y),e}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},function(e,t){"use strict";function n(e){return e.x=Math.ceil(e.x),e.y=Math.ceil(e.y),e.width=Math.ceil(e.width),e.height=Math.ceil(e.height),e}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},function(e,t){"use strict";function n(e,t,n){return e.x=t-e.width/2,e.y=n-e.height/2,e}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e){return(0,o["default"])(e.x,e.y,e.width,e.height)}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=i;var r=n(247),o=u(r)},function(e,t){"use strict";function n(){var e=arguments.length<=0||void 0===arguments[0]?0:arguments[0],t=arguments.length<=1||void 0===arguments[1]?0:arguments[1],n=arguments.length<=2||void 0===arguments[2]?0:arguments[2],u=arguments.length<=3||void 0===arguments[3]?0:arguments[3];return{x:e,y:t,width:n,height:u,set:function(e,t,n,u){return this.x=e,this.y=t,this.width=n,this.height=u,this},setPosition:function(e){var t=arguments.length<=1||void 0===arguments[1]?e:arguments[1];return this.x=e,this.y=t,this},setSize:function(e){var t=arguments.length<=1||void 0===arguments[1]?e:arguments[1];return this.width=e,this.height=t,this},get left(){return this.x},get right(){return this.x+this.width},get top(){return this.y},get bottom(){return this.y+this.height},toString:function(){return"[Rectangle (x="+this.x+", y="+this.y+", width="+this.width+", height="+this.height+")]"}}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},function(e,t){"use strict";function n(e,t){return t.width*t.height>e.width*e.height?!1:void 0}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},function(e,t){"use strict";function n(e,t,n){return e.width<=0||e.height<=0?!1:e.x<=t&&e.x+e.width>=t&&e.y<=n&&e.y+e.height>=n}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},function(e,t){"use strict";function n(e,t){return t.set(e.x,e.y,e.width,e.height)}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e,t){var n=(0,o["default"])(e);return n<(0,o["default"])(t)?e.setSize(t.height*n,t.height):e.setSize(t.width,t.width*n),e.setPosition(t.right/2-e.width/2,t.bottom/2-e.height/2)}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=i;var r=n(252),o=u(r)},function(e,t){"use strict";function n(e){return 0===e.height?NaN:e.width/e.height}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e,t){var n=(0,o["default"])(e);return n>(0,o["default"])(t)?e.setSize(t.height*n,t.height):e.setSize(t.width,t.width*n),e.setPosition(t.right/2-e.width/2,t.bottom/2-e.height/2)}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=i;var r=n(252),o=u(r)},function(e,t){"use strict";function n(e){return e.x=Math.floor(e.x),e.y=Math.floor(e.y),e}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},function(e,t){"use strict";function n(e){return e.x=Math.floor(e.x),e.y=Math.floor(e.y),e.width=Math.floor(e.width),e.height=Math.floor(e.height),e}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},function(e,t){"use strict";function n(e){var t=arguments.length<=1||void 0===arguments[1]?{x:0,y:0}:arguments[1];return t.x=e.right/2,t.y=e.bottom/2,t}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},function(e,t){"use strict";function n(e){var t=arguments.length<=1||void 0===arguments[1]?{x:0,y:0}:arguments[1];return t.x=e.width,t.y=e.height,t}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},function(e,t){"use strict";function n(e,t,n){e.x+e.width/2,e.y+e.height/2;return e.width=2*t,e.height=2*n,e.x=t-e.width/2,e.y=n-e.height/2,e}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},function(e,t){"use strict";function n(e,t){for(var n=e.x,u=e.right,i=e.y,r=e.bottom,o=0;o<t.length;o++)n=Math.min(n,t[o].x),u=Math.max(u,t[o].x),i=Math.min(i,t[o].y),r=Math.max(r,t[o].y);return e.x=n,e.y=i,e.width=u-n,e.height=r-i,e}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},function(e,t){"use strict";function n(e,t){var n=Math.min(e.x,t.x),u=Math.max(e.right,t.right);e.x=n,e.width=u-n;var i=Math.min(e.y,t.y),r=Math.max(e.bottom,t.bottom);return e.y=i,e.height=r-i,e}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},function(e,t){"use strict";function n(e,t,n){var u=Math.min(e.x,t),i=Math.max(e.right,t);e.x=u,e.width=i-u;var r=Math.min(e.y,n),o=Math.max(e.bottom,n);return e.y=r,e.height=o-r,e}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},function(e,t){"use strict";function n(e,t){return e.x<t.right&&e.right>t.x&&e.y<t.bottom&&e.bottom>t.y}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},function(e,t){"use strict";function n(e){return 2*(e.width+e.height)}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},function(e,t){"use strict";function n(e){var t=arguments.length<=1||void 0===arguments[1]?{x:0,y:0}:arguments[1];return t.x=e.x+Math.random()*e.width,t.y=e.y+Math.random()*e.height,t}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},function(e,t){"use strict";function n(e,t){var n=arguments.length<=2||void 0===arguments[2]?t:arguments[2];return e.width*=t,e.height*=n,e}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},function(e,t){"use strict";function n(e,t,n){return e.x+=t,e.y+=n,e}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},function(e,t,n){"use strict";function u(e){return e&&e.__esModule?e:{"default":e}}function i(e,t){var n=arguments.length<=2||void 0===arguments[2]?(0,o["default"])():arguments[2],u=Math.min(e.x,t.x),i=Math.min(e.y,t.y);return n.set(u,i,Math.max(e.right,t.right)-u,Math.max(e.bottom,t.bottom)-i)}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=i;var r=n(247),o=u(r)}])});
//# sourceMappingURL=data:application/json;base64,