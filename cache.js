!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("cache",[],t):"object"==typeof exports?exports.cache=t():(e.lazer=e.lazer||{},e.lazer.cache=t())}(this,function(){return function(e){function t(r){if(n[r])return n[r].exports;var o=n[r]={exports:{},id:r,loaded:!1};return e[r].call(o.exports,o,o.exports,t),o.loaded=!0,o.exports}var n={};return t.m=e,t.c=n,t.p="",t(0)}([function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t["default"]=e,t}Object.defineProperty(t,"__esModule",{value:!0}),t.types=t.ImageCache=t.CacheEntry=t.Cache=t.BaseCache=void 0;var u=n(1),i=o(u),a=n(4),c=r(a),f=n(5),l=r(f),s=n(6),p=r(s),d=n(7),y=r(d);t.BaseCache=c["default"],t.Cache=l["default"],t.CacheEntry=p["default"],t.ImageCache=y["default"],t.types=i},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0}),t.ImageFile=t.CacheFile=void 0;var o=n(2),u=r(o),i=n(3),a=r(i);t.CacheFile=u["default"],t.ImageFile=a["default"]},function(e,t){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var r=function o(e,t,r){n(this,o),this.key=e,this.url=t,this.data=r};t["default"]=r},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var a=n(2),c=r(a),f=function(e){function t(e,n,r){o(this,t);var i=u(this,Object.getPrototypeOf(t).call(this,e,n,r));return i.baseTexture="",i}return i(t,e),t}(c["default"]);t["default"]=f},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(2),a=(r(i),function(){function e(){o(this,e),this.files=new Map}return u(e,[{key:"add",value:function(e,t){this.files.set(e,t)}},{key:"has",value:function(e){return this.files.has(e)}},{key:"get",value:function(e){return this.files.get(e)}},{key:"remove",value:function(e){this.files["delete"](e)}},{key:"destroy",value:function(){this.files.clear()}}]),e}());t["default"]=a},function(e,t){"use strict";function n(){var e=new Map;return{add:function(t,n){e.set(t,n)},has:function(t){return e.has(t)},get:function(t){return e.get(t)},remove:function(t){e["delete"](t)},total:function(){return e.size},flush:function(){e.clear()}}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},function(e,t){"use strict";function n(e,t,n){return{key:e,url:t,data:n}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),c=function y(e,t,n){null===e&&(e=Function.prototype);var r=Object.getOwnPropertyDescriptor(e,t);if(void 0===r){var o=Object.getPrototypeOf(e);return null===o?void 0:y(o,t,n)}if("value"in r)return r.value;var u=r.get;if(void 0!==u)return u.call(n)},f=n(4),l=r(f),s=n(3),p=r(s),d=function(e){function t(){return o(this,t),u(this,Object.getPrototypeOf(t).call(this))}return i(t,e),a(t,[{key:"add",value:function(e,n,r){var o=new p["default"](e,n,r);c(Object.getPrototypeOf(t.prototype),"add",this).call(this,e,o)}}]),t}(l["default"]);t["default"]=d}])});
//# sourceMappingURL=data:application/json;base64,