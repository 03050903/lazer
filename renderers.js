!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("renderers",[],e):"object"==typeof exports?exports.renderers=e():(t.lazer=t.lazer||{},t.lazer.renderers=e())}(this,function(){return function(t){function e(n){if(r[n])return r[n].exports;var i=r[n]={exports:{},id:n,loaded:!1};return t[n].call(i.exports,i,i.exports,e),i.loaded=!0,i.exports}var r={};return e.m=t,e.c=r,e.p="",e(0)}({0:function(t,e,r){"use strict";function n(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e["default"]=t,e}Object.defineProperty(e,"__esModule",{value:!0}),e.point=e.nano=e.minimal=e.batchTexture=e.batchPoint=void 0;var i=r(710),o=n(i),a=r(719),u=n(a),l=r(722),s=n(l),f=r(726),h=n(f),c=r(728),d=n(c);e.batchPoint=o,e.batchTexture=u,e.minimal=s,e.nano=h,e.point=d},12:function(t,e){"use strict";function r(t,e){return t.getContext("2d",e)||null}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=r},148:function(t,e,r){"use strict";function n(t){return t&&t.__esModule?t:{"default":t}}function i(){try{var t=document.createElement("canvas");if(null===(0,a["default"])(t))return!1}catch(e){return!1}return!0}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=i;var o=r(149),a=n(o)},149:function(t,e){"use strict";function r(t,e){return t.getContext("webgl",e)||t.getContext("experimental-webgl",e)||null}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=r},161:function(t,e){"use strict";function r(t){var e=arguments.length<=1||void 0===arguments[1]?1:arguments[1],r=arguments.length<=2||void 0===arguments[2]?1:arguments[2],n=Math.floor(6*t),i=6*t-n,o=Math.floor(r*(1-e)*255),a=Math.floor(r*(1-i*e)*255),u=Math.floor(r*(1-(1-i)*e)*255);r=Math.floor(r*=255);var l=n%6;return 0===l?{r:r,g:u,b:o}:1===l?{r:a,g:r,b:o}:2===l?{r:o,g:r,b:u}:3===l?{r:o,g:a,b:r}:4===l?{r:u,g:o,b:r}:5===l?{r:r,g:o,b:a}:void 0}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=r},269:function(t,e,r){"use strict";function n(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e["default"]=t,e}function i(t){return t&&t.__esModule?t:{"default":t}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var a=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),u=r(270),l=i(u),s=r(271),f=i(s),h=r(272),c=i(h),d=r(161),v=i(d),g=r(274),b=i(g),y=r(276),p=i(y),_=r(277),m=i(_),w=r(278),x=n(w),P=function(){function t(){var e=arguments.length<=0||void 0===arguments[0]?0:arguments[0],r=arguments.length<=1||void 0===arguments[1]?0:arguments[1],n=arguments.length<=2||void 0===arguments[2]?0:arguments[2],i=arguments.length<=3||void 0===arguments[3]?255:arguments[3];o(this,t),this.r=e,this.g=r,this.b=n,this.a=i,this.gl=new Float32Array([0,0,0,1]),this.color=0,this.color32=0,this.rgba="",this.dirty=!0,this.update()}return a(t,[{key:"setRGB",value:function(t,e,r){var n=arguments.length<=3||void 0===arguments[3]?255:arguments[3];return this.r=t,this.g=e,this.b=r,this.a=n,this.dirty=!0,this.update()}},{key:"fromRGB",value:function(t,e,r){var n=arguments.length<=3||void 0===arguments[3]?255:arguments[3];return this.red=t,this.green=e,this.blue=r,this.alpha=n,this.update()}},{key:"fromColor",value:function(t){var e=(0,m["default"])(t),r=e.r,n=e.g,i=e.b,o=e.a;return this.setRGB(r,n,i,o)}},{key:"fromRandom",value:function(){var t=arguments.length<=0||void 0===arguments[0]?0:arguments[0],e=arguments.length<=1||void 0===arguments[1]?255:arguments[1],r=(0,p["default"])(t,e),n=r.r,i=r.g,o=r.b;return this.setRGB(n,i,o)}},{key:"fromHSV",value:function(t){var e=arguments.length<=1||void 0===arguments[1]?1:arguments[1],r=arguments.length<=2||void 0===arguments[2]?1:arguments[2],n=(0,v["default"])(t,e,r),i=n.r,o=n.g,a=n.b;return this.fromRGB(i,o,a)}},{key:"fromHSVColorWheel",value:function(){var t=arguments.length<=0||void 0===arguments[0]?0:arguments[0],e=arguments.length<=1||void 0===arguments[1]?1:arguments[1],r=arguments.length<=2||void 0===arguments[2]?1:arguments[2];t=Math.min(Math.abs(t),359)/359;var n=(0,v["default"])(t,e,r),i=n.r,o=n.g,a=n.b;return this.fromRGB(i,o,a)}},{key:"fromHSL",value:function(t,e,r){var n=(0,b["default"])(t,e,r),i=n.r,o=n.g,a=n.b;return this.fromRGB(i,o,a)}},{key:"fromHSLColorWheel",value:function(){var t=arguments.length<=0||void 0===arguments[0]?0:arguments[0],e=arguments.length<=1||void 0===arguments[1]?1:arguments[1],r=arguments.length<=2||void 0===arguments[2]?.5:arguments[2];t=Math.min(Math.abs(t),359)/359;var n=(0,b["default"])(t,e,r),i=n.r,o=n.g,a=n.b;return this.fromRGB(i,o,a)}},{key:"fromInterpolation",value:function(t,e,r,n){var i=x.colorWithColor(t,e,r,n),o=i.r,a=i.g,u=i.b;return this.fromRGB(o,a,u)}},{key:"interpolateWith",value:function(t,e,r){var n=x.colorWithColor(this,t,e,r),i=n.r,o=n.g,a=n.b;return this.fromRGB(i,o,a)}},{key:"clone",value:function(){return new t(this.r,this.g,this.b,this.a)}},{key:"copyFrom",value:function(t){return this.setRGB(t.r,t.g,t.b,t.a)}},{key:"copyTo",value:function(t){return t.setRGB(this.r,this.g,this.b,this.a)}},{key:"equals",value:function(t){return this.r===t.r&&this.g===t.g&&this.b===t.b&&this.a===t.a}},{key:"update",value:function(){return this.dirty?(this.color=(0,l["default"])(this.r,this.g,this.b),this.color32=(0,f["default"])(this.r,this.g,this.b,this.a),this.rgba="rgba("+this.r+", "+this.g+", "+this.b+", "+255/this.a+")",this.gl[0]=this.r/255,this.gl[1]=this.g/255,this.gl[2]=this.b/255,this.gl[3]=this.a/255,this.dirty=!1,this):this}},{key:"toGL",value:function(){return this.gl}},{key:"toString",value:function(){var t=arguments.length<=0||void 0===arguments[0]?"#":arguments[0];return(0,c["default"])(this.r,this.g,this.b,this.a,t)}},{key:"r1",get:function(){return this.gl[0]}},{key:"g1",get:function(){return this.gl[1]}},{key:"b1",get:function(){return this.gl[2]}},{key:"a1",get:function(){return this.gl[3]}},{key:"red",get:function(){return this.r},set:function(t){t!==this.r&&(t=Math.floor(Math.abs(t)),this.r=Math.min(t,255),this.gl[0]=this.r/255,this.dirty=!0)}},{key:"green",get:function(){return this.g},set:function(t){t!==this.g&&(t=Math.floor(Math.abs(t)),this.g=Math.min(t,255),this.gl[1]=this.g/255,this.dirty=!0)}},{key:"blue",get:function(){return this.b},set:function(t){t!==this.b&&(t=Math.floor(Math.abs(t)),this.b=Math.min(t,255),this.gl[2]=this.b/255,this.dirty=!0)}},{key:"alpha",get:function(){return this.a},set:function(t){t!==this.a&&(t=Math.floor(Math.abs(t)),this.a=Math.min(t,255),this.gl[3]=this.a/255,this.dirty=!0)}}],[{key:"create",value:function(e){return(new t).fromColor(e)}},{key:"createRandom",value:function(e,r){return(new t).fromRandom(e,r)}}]),t}();e["default"]=P},270:function(t,e){"use strict";function r(t,e,r){return t<<16|e<<8|r}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=r},271:function(t,e){"use strict";function r(t,e,r,n){return n<<24|t<<16|e<<8|r}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=r},272:function(t,e,r){"use strict";function n(t){return t&&t.__esModule?t:{"default":t}}function i(t,e,r){var n=arguments.length<=3||void 0===arguments[3]?255:arguments[3],i=arguments.length<=4||void 0===arguments[4]?"#":arguments[4];return"#"===i?"#"+((1<<24)+(t<<16)+(e<<8)+r).toString(16).slice(1):"0x"+(0,a["default"])(n)+(0,a["default"])(t)+(0,a["default"])(e)+(0,a["default"])(r)}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=i;var o=r(273),a=n(o)},273:function(t,e){"use strict";function r(t){var e=t.toString(16);return 1===e.length?"0"+e:e}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=r},274:function(t,e,r){"use strict";function n(t){return t&&t.__esModule?t:{"default":t}}function i(t,e,r){var n=r,i=r,o=r;if(0!==e){var u=.5>r?r*(1+e):r+e-r*e,l=2*r-u;n=(0,a["default"])(l,u,t+1/3),i=(0,a["default"])(l,u,t),o=(0,a["default"])(l,u,t-1/3)}return{r:255*n,g:255*i,b:255*o}}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=i;var o=r(275),a=n(o)},275:function(t,e){"use strict";function r(t,e,r){return 0>r&&(r+=1),r>1&&(r-=1),1/6>r?t+6*(e-t)*r:.5>r?e:2/3>r?t+(e-t)*(2/3-r)*6:t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=r},276:function(t,e){"use strict";function r(){var t=arguments.length<=0||void 0===arguments[0]?0:arguments[0],e=arguments.length<=1||void 0===arguments[1]?255:arguments[1],r=t+Math.round(Math.random()*(e-t)),n=t+Math.round(Math.random()*(e-t)),i=t+Math.round(Math.random()*(e-t));return{r:r,g:n,b:i}}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=r},277:function(t,e){"use strict";function r(t){if(t>16777215);else;var e=t>>16&255,r=t>>8&255,n=255&t;return{r:e,g:r,b:n,a:a}}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=r},278:function(t,e,r){"use strict";function n(t){return t&&t.__esModule?t:{"default":t}}function i(t,e){var r=arguments.length<=2||void 0===arguments[2]?100:arguments[2],n=arguments.length<=3||void 0===arguments[3]?0:arguments[3];return this.RGBwithRGB(t.r,t.g,t.b,e.r,e.g,e.b,r,n)}function o(t,e,r,n){var i=arguments.length<=4||void 0===arguments[4]?100:arguments[4],o=arguments.length<=5||void 0===arguments[5]?0:arguments[5];return this.RGBwithRGB(t.r,t.g,t.b,e,r,n,i,o)}function a(t,e,r,n,i,o){var a=arguments.length<=6||void 0===arguments[6]?100:arguments[6],u=arguments.length<=7||void 0===arguments[7]?0:arguments[7],s=u/a,f=(0,l["default"])(t,n,s),h=(0,l["default"])(e,i,s),c=(0,l["default"])(r,o,s);return{r:f,g:h,b:c}}Object.defineProperty(e,"__esModule",{value:!0}),e.colorWithColor=i,e.colorWithRGB=o,e.RGBwithRGB=a;var u=r(279),l=n(u)},279:function(t,e){"use strict";function r(t,e,r){return(e-t)*r+t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=r},709:function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r={AUTO:0,CANVAS:1,WEBGL:2,HEADLESS:3};e["default"]=r},710:function(t,e,r){"use strict";function n(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(e,"__esModule",{value:!0}),e.WebGLBatchedPoint=void 0;var i=r(711),o=n(i);e.WebGLBatchedPoint=o["default"]},711:function(t,e,r){"use strict";function n(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e["default"]=t,e}function i(t){return t&&t.__esModule?t:{"default":t}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var a=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),u=r(712),l=i(u),s=r(713),f=i(s),h=r(149),c=i(h),d=r(714),v=i(d),g=r(715),b=i(g),y=r(717),p=i(y),_=r(718),m=i(_),w=r(716),x=n(w),P=function(){function t(e){o(this,t),this.width=0,this.height=0,this.contextOptions=(0,f["default"])(),this.contextHandler=new l["default"],this.vertexBuffer=new p["default"],this.gl=null,this.program=null,e&&this.init(e)}return a(t,[{key:"init",value:function(t){if(this.width=t.width,this.height=t.height,this.contextHandler.add(t),this.gl=(0,c["default"])(t),!this.gl)throw new Error("Browser does not support WebGL");this.gl.disable(this.gl.DEPTH_TEST),this.gl.disable(this.gl.CULL_FACE),this.gl.enable(this.gl.BLEND),this.gl.blendFunc(this.gl.SRC_ALPHA,this.gl.DST_ALPHA);var e=["attribute vec4 pointPosition;","varying vec4 vColor;","void main() {","   gl_Position = pointPosition;","   gl_PointSize = 6.0;","   float uvx = 0.5 + pointPosition.x;","   float uvy = 0.5 + pointPosition.y;","   vColor = vec4(uvx, uvy, 1.0, 1.0);","}"],r=["precision mediump float;","varying vec4 vColor;","void main() {","   gl_FragColor = vColor;","}"],n=(0,v["default"])(this.gl,e,this.gl.VERTEX_SHADER),i=(0,v["default"])(this.gl,r,this.gl.FRAGMENT_SHADER);this.program=new b["default"](this.gl),this.program.attach(n,i).link().use(),this.vertexBuffer.create(this.gl,2,1e3),this.pos=x.createFloat(this.gl,this.program.program,"pointPosition")}},{key:"getLocalX",value:function(t){var e=this.width/2;return(t-e)/e}},{key:"getLocalY",value:function(t){var e=this.height/2;return(e-t)/e}},{key:"reset",value:function(){this.vertexBuffer.reset()}},{key:"addPoint",value:function(t,e){(0,m["default"])(this.vertexBuffer,this.getLocalX(t),this.getLocalY(e))}},{key:"addTri",value:function(t,e,r){var n=r/2;this.addPoint(t,e-n),this.addPoint(t-n,e+n),this.addPoint(t+n,e+n)}},{key:"bufferStatic",value:function(){this.vertexBuffer.bufferData(this.gl,this.gl.STATIC_DRAW)}},{key:"bufferDynamic",value:function(){this.vertexBuffer.bufferData(this.gl,this.gl.DYNAMIC_DRAW)}},{key:"render",value:function(){var t=arguments.length<=0||void 0===arguments[0]?this.gl.POINT:arguments[0];this.gl.clearColor(0,0,0,1),this.gl.clear(this.gl.COLOR_BUFFER_BIT),this.gl.drawArrays(t,0,this.vertexBuffer.total)}},{key:"renderLines",value:function(){this.render(this.gl.LINES)}},{key:"renderLineStrip",value:function(){this.render(this.gl.LINE_STRIP)}},{key:"renderLineLoop",value:function(){this.render(this.gl.LINE_LOOP)}},{key:"renderTriangles",value:function(){this.render(this.gl.TRIANGLES)}},{key:"renderTriangleStrip",value:function(){this.render(this.gl.TRIANGLE_STRIP)}},{key:"renderTriangleFan",value:function(){this.render(this.gl.TRIANGLE_FAN)}}]),t}();e["default"]=P},712:function(t,e){"use strict";function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),i=function(){function t(e){r(this,t),this.canvas=null,this.contextLost=!1,e&&this.add(e)}return n(t,[{key:"add",value:function(t){this.canvas&&this.remove(),this.canvas=t,this.canvas.addEventListener("webglcontextlost",this.lost,!1),this.canvas.addEventListener("webglcontextrestored",this.restored,!1)}},{key:"lost",value:function(t){console.log("WebGL Context Lost"),t.preventDefault(),this.contextLost=!0}},{key:"restored",value:function(){console.log("WebGL Context restored"),this.contextLost=!1}},{key:"remove",value:function(){this.canvas.removeEventListener("webglcontextlost",this.lost),this.canvas.removeEventListener("webglcontextrestored",this.restored),this.canvas=null}}]),t}();e["default"]=i},713:function(t,e){"use strict";function r(){var t=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],e=t.alpha,r=void 0===e?!1:e,n=t.antialias,i=void 0===n?!0:n,o=t.premultipliedAlpha,a=void 0===o?!1:o,u=t.stencil,l=void 0===u?!1:u,s=t.preserveDrawingBuffer,f=void 0===s?!1:s;return{alpha:r,antialias:i,premultipliedAlpha:a,stencil:l,preserveDrawingBuffer:f}}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=r},714:function(t,e){"use strict";function r(t,e,r){Array.isArray(e)&&(e=e.join("\n"));var n=t.createShader(r);return t.shaderSource(n,e),t.compileShader(n),t.getShaderParameter(n,t.COMPILE_STATUS)?n:(console.warn("Failed to compile shader: "+t.getShaderInfoLog(n)),t.deleteShader(n),null)}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=r},715:function(t,e,r){"use strict";function n(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e["default"]=t,e}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),a=r(716),u=n(a),l=function(){function t(e){return i(this,t),this.gl=e,this.program=e.createProgram(),this.program?void 0:(console.warn("WebGLProgram - unable to createProgram on gl context"),null)}return o(t,[{key:"getAttrib",value:function(t){return u.get(this.gl,this.program,t)}},{key:"attach",value:function(){for(var t=arguments.length,e=Array(t),r=0;t>r;r++)e[r]=arguments[r];var n=!0,i=!1,o=void 0;try{for(var a,u=e[Symbol.iterator]();!(n=(a=u.next()).done);n=!0){var l=a.value;this.gl.attachShader(this.program,l)}}catch(s){i=!0,o=s}finally{try{!n&&u["return"]&&u["return"]()}finally{if(i)throw o}}return this}},{key:"attachAndDelete",value:function(){for(var t=arguments.length,e=Array(t),r=0;t>r;r++)e[r]=arguments[r];var n=!0,i=!1,o=void 0;try{for(var a,u=e[Symbol.iterator]();!(n=(a=u.next()).done);n=!0){var l=a.value;this.gl.attachShader(this.program,l),this.gl.deleteShader(l)}}catch(s){i=!0,o=s}finally{try{!n&&u["return"]&&u["return"]()}finally{if(i)throw o}}return this}},{key:"link",value:function(){this.gl.linkProgram(this.program);var t=this.gl.getProgramParameter(this.program,this.gl.LINK_STATUS);if(!t){var e=this.gl.getProgramInfoLog(this.program);console.warn("Failed to link WebGL program: "+e),this["delete"]()}return this}},{key:"use",value:function(){return this.gl.useProgram(this.program),this}},{key:"detatch",value:function(){for(var t=arguments.length,e=Array(t),r=0;t>r;r++)e[r]=arguments[r];var n=!0,i=!1,o=void 0;try{for(var a,u=e[Symbol.iterator]();!(n=(a=u.next()).done);n=!0){var l=a.value;this.gl.detatchShader(l)}}catch(s){i=!0,o=s}finally{try{!n&&u["return"]&&u["return"]()}finally{if(i)throw o}}return this}},{key:"delete",value:function(){return this.gl.deleteProgram(this.program),this}},{key:"destroy",value:function(){this["delete"](),this.gl=null,this.program=null}}]),t}();e["default"]=l},716:function(t,e){"use strict";function r(t,e,r,n,o,a,u,l){var s=i(t,e,r);return null!==s&&(t.vertexAttribPointer(s,n,o,a,u,l),t.enableVertexAttribArray(s)),s}function n(t,e){t.disableVertexAttribArray(e)}function i(t,e,r){var n=t.getAttribLocation(e,r);return 0>n?(console.warn("WebGLProgram - failed to get attribute location: "+r),null):n}function o(t,e,n){var i=arguments.length<=3||void 0===arguments[3]?!1:arguments[3],o=arguments.length<=4||void 0===arguments[4]?0:arguments[4],a=arguments.length<=5||void 0===arguments[5]?0:arguments[5];return r(t,e,n,2,t.UNSIGNED_BYTE,i,o,a)}function a(t,e,n){var i=arguments.length<=3||void 0===arguments[3]?!1:arguments[3],o=arguments.length<=4||void 0===arguments[4]?0:arguments[4],a=arguments.length<=5||void 0===arguments[5]?0:arguments[5];return r(t,e,n,2,t.SHORT,i,o,a)}function u(t,e,n){var i=arguments.length<=3||void 0===arguments[3]?!1:arguments[3],o=arguments.length<=4||void 0===arguments[4]?0:arguments[4],a=arguments.length<=5||void 0===arguments[5]?0:arguments[5];return r(t,e,n,2,t.UNSIGNED_SHORT,i,o,a)}function l(t,e,n){var i=arguments.length<=3||void 0===arguments[3]?!1:arguments[3],o=arguments.length<=4||void 0===arguments[4]?0:arguments[4],a=arguments.length<=5||void 0===arguments[5]?0:arguments[5];return r(t,e,n,2,t.INT,i,o,a)}function s(t,e,n){var i=arguments.length<=3||void 0===arguments[3]?!1:arguments[3],o=arguments.length<=4||void 0===arguments[4]?0:arguments[4],a=arguments.length<=5||void 0===arguments[5]?0:arguments[5];return r(t,e,n,2,t.UNSIGNED_INT,i,o,a)}function f(t,e,n){var i=arguments.length<=3||void 0===arguments[3]?!1:arguments[3],o=arguments.length<=4||void 0===arguments[4]?0:arguments[4],a=arguments.length<=5||void 0===arguments[5]?0:arguments[5];return r(t,e,n,2,t.FLOAT,i,o,a)}Object.defineProperty(e,"__esModule",{value:!0}),e.disable=n,e.getLocation=i,e.createByte=o,e.createShort=a,e.createUnsignedShort=u,e.createInt=l,e.createUnsignedInt=s,e.createFloat=f},717:function(t,e){"use strict";function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),i=function(){function t(){r(this,t),this.vertSize=0,this.batchSize=0,this.vertices=null,this.buffer=null,this.index=0,this.total=0,this.size=0}return n(t,[{key:"create",value:function(t){var e=arguments.length<=1||void 0===arguments[1]?2:arguments[1],r=arguments.length<=2||void 0===arguments[2]?2e3:arguments[2];return this.vertSize=e,this.batchSize=r,this.vertices=new Float32Array(this.batchSize*this.vertSize),this.index=0,this.total=0,this.size=0,this.buffer=t.createBuffer(),this.buffer?void this.bindBuffer(t):-1}},{key:"bindBuffer",value:function(t){t.bindBuffer(t.ARRAY_BUFFER,this.buffer)}},{key:"bufferData",value:function(t,e){t.bufferData(t.ARRAY_BUFFER,this.vertices,e)}},{key:"bufferDynamicData",value:function(t){t.bufferData(t.ARRAY_BUFFER,this.vertices,t.DYNAMIC_DRAW)}},{key:"bufferStaticData",value:function(t){t.bufferData(t.ARRAY_BUFFER,this.vertices,t.STATIC_DRAW)}},{key:"bufferStreamData",value:function(t){t.bufferData(t.ARRAY_BUFFER,this.vertices,t.STREAM_DRAW)}},{key:"reset",value:function(){this.index=0,this.size=0,this.total=0}}]),t}();e["default"]=i},718:function(t,e){"use strict";function r(t,e,r){return t.vertices[t.index++]=e,t.vertices[t.index++]=r,t.total++,t.index-2}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=r},719:function(t,e,r){"use strict";function n(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(e,"__esModule",{value:!0}),e.WebGLRenderer=void 0;var i=r(720),o=n(i);e.WebGLRenderer=o["default"]},720:function(t,e,r){"use strict";function n(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e["default"]=t,e}function i(t){return t&&t.__esModule?t:{"default":t}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var a=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),u=r(712),l=i(u),s=r(713),f=i(s),h=r(149),c=i(h),d=r(714),v=i(d),g=r(715),b=i(g),y=r(717),p=i(y),_=r(721),m=i(_),w=r(716),x=n(w),P=function(){function t(e){o(this,t),this.projection={x:0,y:0},this.contextOptions=(0,f["default"])(),this.contextHandler=new l["default"],this.vertexBuffer=new p["default"],this.indexBuffer=new m["default"],this.gl=null,this.program=null,e&&this.init(e)}return a(t,[{key:"init",value:function(t){this.contextHandler.add(t);var e=(0,c["default"])(t);if(!e)throw new Error("Browser does not support WebGL");this.gl=e,e.disable(e.DEPTH_TEST),e.disable(e.CULL_FACE),e.enable(e.BLEND),e.viewport(0,0,e.drawingBufferWidth,e.drawingBufferHeight);var r=["attribute vec2 aVertexPosition;","attribute vec2 aTextureCoord;","attribute vec4 aColor;","uniform vec2 projectionVector;","varying vec2 vTextureCoord;","varying vec4 vColor;","const vec2 center = vec2(-1.0, 1.0);","void main(void) {","   gl_Position = vec4((aVertexPosition / projectionVector) + center, 0.0, 1.0);","   vTextureCoord = aTextureCoord;","   vec3 color = mod(vec3(aColor.y / 65536.0, aColor.y / 256.0, aColor.y), 256.0) / 256.0;","   vColor = vec4(color * aColor.x, aColor.x);","}"],n=["precision mediump float;","varying vec2 vTextureCoord;","varying vec4 vColor;","uniform sampler2D uSampler;","void main(void) {","   gl_FragColor = texture2D(uSampler, vTextureCoord) * vColor;","}"],i=(0,v["default"])(e,r,e.VERTEX_SHADER),o=(0,v["default"])(e,n,e.FRAGMENT_SHADER);this.program=new b["default"](e),this.program.attach(i,o).link().use(),this._aVertexPosition=x.getLocation(e,this.program.program,"aVertexPosition"),this._aTextureCoord=x.getLocation(e,this.program.program,"aTextureCoord"),this._colorAttribute=x.getLocation(e,this.program.program,"aColor"),e.enableVertexAttribArray(0),e.enableVertexAttribArray(1),e.enableVertexAttribArray(2),this.projectionVector=e.getUniformLocation(this.program.program,"projectionVector"),this.vertexBuffer.create(e,6,2e3),this.vertexBuffer.bindBuffer(),this.vertexBuffer.bufferDynamicData(),this.indexBuffer.create(e,6,2e3),this.indexBuffer.bindBuffer(),this.indexBuffer.bufferData()}},{key:"resize",value:function(){var t=this.gl.canvas.clientWidth,e=this.gl.canvas.clientHeight;t!==this.gl.canvas.width&&(this.gl.canvas.width=t),e!==this.gl.canvas.height&&(this.gl.canvas.height=e),this.projection.x=t/2,this.projection.y=-e/2}},{key:"render",value:function(t){if(!this.contextHandler.contextLost){this.resize();var e=this.gl;e.clearColor(0,0,0,1),e.clear(e.COLOR_BUFFER_BIT),this.vertexBuffer.reset();var r=!0,n=!1,i=void 0;try{for(var o,a=t[Symbol.iterator]();!(r=(o=a.next()).done);r=!0){o.value}}catch(u){n=!0,i=u}finally{try{!r&&a["return"]&&a["return"]()}finally{if(n)throw i}}}}},{key:"flush",value:function(){}}]),t}();e["default"]=P},721:function(t,e){"use strict";function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),i=function(){function t(){r(this,t),this.vertSize=0,this.batchSize=0,this.indices=null,this.buffer=null}return n(t,[{key:"create",value:function(t){var e=arguments.length<=1||void 0===arguments[1]?6:arguments[1],r=arguments.length<=2||void 0===arguments[2]?2e3:arguments[2];return e*r>65535?(console.warn("VertexIndexBuffer: Cannot create buffer > 65535 bytes"),-1):(this.vertSize=e,this.batchSize=r,this.indices=new Uint16Array(r*e),this.buffer=t.createBuffer(),this.buffer?void this.reset():-1)}},{key:"reset",value:function(){for(var t=0,e=0;t<this.batchSize*this.vertSize;t+=this.vertSize,e+=4)this.indices[t+0]=e+0,this.indices[t+1]=e+1,this.indices[t+2]=e+2,this.indices[t+3]=e+0,this.indices[t+4]=e+2,this.indices[t+5]=e+3}},{key:"bindBuffer",value:function(t){t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this.buffer)}},{key:"bufferData",value:function(t){t.bufferData(t.ELEMENT_ARRAY_BUFFER,this.indices,t.STATIC_DRAW)}}]),t}();e["default"]=i},722:function(t,e,r){"use strict";"create index";function n(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(e,"__esModule",{value:!0}),e.WebGLRenderer=e.MinimalRenderer=e.CanvasRenderer=void 0;var i=r(723),o=n(i),a=r(724),u=n(a),l=r(725),s=n(l);e.CanvasRenderer=o["default"],e.MinimalRenderer=u["default"],e.WebGLRenderer=s["default"]},723:function(t,e,r){"use strict";function n(t){return t&&t.__esModule?t:{"default":t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),a=r(12),u=n(a),l=function(){function t(e){i(this,t),this.canvas=null,this.context=null,e&&this.init(e)}return o(t,[{key:"init",value:function(t){this.canvas=t,this.context=(0,u["default"])(t)}},{key:"render",value:function(t){this.context.clearRect(0,0,this.canvas.width,this.canvas.height),this.context.fillStyle=t.rgba,this.context.fillRect(0,0,this.canvas.width,this.canvas.height)}}]),t}();e["default"]=l},724:function(t,e,r){"use strict";function n(t){return t&&t.__esModule?t:{"default":t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),a=r(709),u=n(a),l=r(269),s=n(l),f=r(148),h=n(f),c=r(723),d=n(c),v=r(725),g=n(v),b=function(){function t(e){var r=arguments.length<=1||void 0===arguments[1]?u["default"].AUTO:arguments[1];i(this,t),this.canvas=e,this.renderer=null,this.color=new s["default"],this.init(r)}return o(t,[{key:"init",value:function(t){t!==u["default"].AUTO&&t!==u["default"].WEBGL||!(0,h["default"])()?(this.renderer=new d["default"](this.canvas),this.type=u["default"].CANVAS):(this.renderer=new g["default"](this.canvas),this.type=u["default"].WEBGL)}},{key:"render",value:function(){var t=arguments.length<=0||void 0===arguments[0]?0:arguments[0],e=arguments.length<=1||void 0===arguments[1]?0:arguments[1],r=arguments.length<=2||void 0===arguments[2]?0:arguments[2],n=arguments.length<=3||void 0===arguments[3]?255:arguments[3];this.color.fromRGB(t,e,r,n),this.renderer.render(this.color)}}]),t}();e["default"]=b},725:function(t,e,r){"use strict";function n(t){return t&&t.__esModule?t:{"default":t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),a=r(713),u=n(a),l=r(712),s=n(l),f=r(149),h=n(f),c=function(){function t(e){i(this,t),this.contextOptions=(0,u["default"])(),this.contextHandler=new s["default"],this.gl=null,e&&this.init(e)}return o(t,[{key:"init",value:function(t){if(this.contextHandler.add(t),this.gl=(0,h["default"])(t),!this.gl)throw new Error("Browser does not support WebGL")}},{key:"render",value:function(t){this.gl.clearColor(t.r1,t.g1,t.b1,t.a1),this.gl.clear(this.gl.COLOR_BUFFER_BIT)}}]),t}();e["default"]=c},726:function(t,e,r){"use strict";"create index";function n(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(e,"__esModule",{value:!0}),e.WebGLNano=void 0;var i=r(727),o=n(i);e.WebGLNano=o["default"]},727:function(t,e,r){"use strict";function n(t){return t&&t.__esModule?t:{"default":t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),a=r(712),u=n(a),l=r(713),s=n(l),f=r(149),h=n(f),c=function(){function t(){var e=arguments.length<=0||void 0===arguments[0]?800:arguments[0],r=arguments.length<=1||void 0===arguments[1]?600:arguments[1],n=arguments.length<=2||void 0===arguments[2]?null:arguments[2];i(this,t),this.width=e,this.height=r,this.projection={x:0,y:0},this.contextOptions=new s["default"],this.contextHandler=new u["default"],this.gl=null,n&&this.init(e,r,n)}return o(t,[{key:"init",value:function(t,e,r){if(this.contextHandler.add(r),this.gl=(0,h["default"])(r),!this.gl)throw new Error("Browser does not support WebGL");this.gl.id=0,this.gl.disable(gl.DEPTH_TEST),this.gl.disable(gl.CULL_FACE),this.gl.enable(gl.BLEND),this.gl.viewport(0,0,this.width,this.height),this.projection.x=this.width/2,this.projection.y=-this.height/2}}]),t}();e["default"]=c},728:function(t,e,r){"use strict";"create index";function n(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(e,"__esModule",{value:!0}),e.WebGLRenderer=e.PointRenderer=e.CanvasRenderer=void 0;var i=r(729),o=n(i),a=r(730),u=n(a),l=r(731),s=n(l);
e.CanvasRenderer=o["default"],e.PointRenderer=u["default"],e.WebGLRenderer=s["default"]},729:function(t,e,r){"use strict";function n(t){return t&&t.__esModule?t:{"default":t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),a=r(12),u=n(a),l=function(){function t(e){i(this,t),this.canvas=null,this.context=null,this.x=0,this.y=0,this.size=32,e&&this.init(e)}return o(t,[{key:"init",value:function(t){this.canvas=t,this.context=(0,u["default"])(t)}},{key:"update",value:function(t,e){this.x=t,this.y=e}},{key:"render",value:function(){this.context.clearRect(0,0,this.canvas.width,this.canvas.height),this.context.fillStyle="#000000",this.context.fillRect(0,0,this.canvas.width,this.canvas.height),this.context.fillStyle="#ffff00",this.context.fillRect(this.x-this.size/2,this.y-this.size/2,this.size,this.size)}}]),t}();e["default"]=l},730:function(t,e,r){"use strict";function n(t){return t&&t.__esModule?t:{"default":t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),a=r(709),u=n(a),l=r(148),s=n(l),f=r(729),h=n(f),c=r(731),d=n(c),v=function(){function t(e){var r=arguments.length<=1||void 0===arguments[1]?u["default"].AUTO:arguments[1];i(this,t),this.canvas=e,this.renderer=null,this.init(r)}return o(t,[{key:"init",value:function(t){t!==u["default"].AUTO&&t!==u["default"].WEBGL||!(0,s["default"])()?(this.renderer=new h["default"](this.canvas),this.type=u["default"].CANVAS):(this.renderer=new d["default"](this.canvas),this.type=u["default"].WEBGL)}},{key:"update",value:function(t,e){this.renderer.update(t,e)}},{key:"render",value:function(){this.renderer.render()}}]),t}();e["default"]=v},731:function(t,e,r){"use strict";function n(t){return t&&t.__esModule?t:{"default":t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),a=r(713),u=n(a),l=r(712),s=n(l),f=r(149),h=n(f),c=r(714),d=n(c),v=r(715),g=n(v),b=function(){function t(e){i(this,t),this.width=0,this.height=0,this.contextOptions=(0,u["default"])(),this.contextHandler=new s["default"],this.gl=null,this.program=null,e&&this.init(e)}return o(t,[{key:"init",value:function(t){if(this.width=t.width,this.height=t.height,this.contextHandler.add(t),this.gl=(0,h["default"])(t),!this.gl)throw new Error("Browser does not support WebGL");var e=["attribute vec4 pointPosition;","attribute float pointSize;","void main() {","   gl_Position = pointPosition;","   gl_PointSize = pointSize;","}"],r=["void main() {","   gl_FragColor = vec4(1.0, 1.0, 0.0, 1.0);","}"],n=(0,d["default"])(this.gl,e,this.gl.VERTEX_SHADER),i=(0,d["default"])(this.gl,r,this.gl.FRAGMENT_SHADER);this.program=new g["default"](this.gl),this.program.attach(n,i).link().use(),this.pos=this.program.getAttrib("pointPosition"),this.size=this.program.getAttrib("pointSize"),this.gl.vertexAttrib3f(this.pos,0,0,0),this.gl.vertexAttrib1f(this.size,32)}},{key:"update",value:function(t,e){var r=this.width/2,n=this.height/2,i=(t-r)/r,o=(n-e)/n;this.gl.vertexAttrib3f(this.pos,i,o,0)}},{key:"render",value:function(){this.gl.clearColor(0,0,0,1),this.gl.clear(this.gl.COLOR_BUFFER_BIT),this.gl.drawArrays(this.gl.POINTS,0,1)}}]),t}();e["default"]=b}})});
//# sourceMappingURL=data:application/json;base64,