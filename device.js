!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("device",[],t):"object"==typeof exports?exports.device=t():(e.lazer=e.lazer||{},e.lazer.device=t())}(this,function(){return function(e){function t(i){if(n[i])return n[i].exports;var o=n[i]={exports:{},id:i,loaded:!1};return e[i].call(o.exports,o,o.exports,t),o.loaded=!0,o.exports}var n={};return t.m=e,t.c=n,t.p="",t(0)}({0:function(e,t,n){"use strict";function i(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0}),t.WebGL=t.OS=t.Input=t.Features=t.Endian=t.Device=t.Browser=void 0;var o=n(140),r=i(o),s=n(143),a=i(s),u=n(145),c=i(u),d=n(146),l=i(d),f=n(147),h=i(f),w=n(144),v=i(w),p=n(148),b=i(p);t.Browser=r["default"],t.Device=a["default"],t.Endian=c["default"],t.Features=l["default"],t.Input=h["default"],t.OS=v["default"],t.WebGL=b["default"]},140:function(e,t,n){(function(e){"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e},r=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),s=function(){function t(e){i(this,t),this.device=e,this.cocoonJS=!1,this.cocoonJSApp=!1,this.cordova=!1,this.node=!1,this.nodeWebkit=!1,this.electron=!1,this.ejecta=!1,this.crosswalk=!1}return r(t,[{key:"init",value:function(){var t=arguments.length<=0||void 0===arguments[0]?navigator.userAgent:arguments[0];if(/Arora/.test(t)?this.arora=!0:/Chrome\/(\d+)/.test(t)&&!this.device.os.windowsPhone?(this.chrome=!0,this.chromeVersion=parseInt(RegExp.$1,10)):/Epiphany/.test(t)?this.epiphany=!0:/Firefox\D+(\d+)/.test(t)?(this.firefox=!0,this.firefoxVersion=parseInt(RegExp.$1,10)):/AppleWebKit/.test(t)&&this.device.os.iOS?this.mobileSafari=!0:/MSIE (\d+\.\d+);/.test(t)?(this.ie=!0,this.ieVersion=parseInt(RegExp.$1,10)):/Midori/.test(t)?this.midori=!0:/Opera/.test(t)?this.opera=!0:/Safari/.test(t)&&!this.device.os.windowsPhone?this.safari=!0:/Trident\/(\d+\.\d+)(.*)rv:(\d+\.\d+)/.test(t)&&(this.ie=!0,this.trident=!0,this.tridentVersion=parseInt(RegExp.$1,10),this.ieVersion=parseInt(RegExp.$3,10)),/Silk/.test(t)&&(this.silk=!0),navigator.standalone&&(this.webApp=!0),void 0!==window.cordova&&(this.cordova=!0),void 0!==e&&void 0!==n(142)&&(this.node=!0),this.node&&"object"===o(e.versions)&&(this.nodeWebkit=!!e.versions["node-webkit"],this.electron=!!e.versions.electron),navigator.isCocoonJS){this.cocoonJS=!0;try{this.cocoonJSApp="undefined"!=typeof CocoonJS}catch(i){this.cocoonJSApp=!1}}void 0!==window.ejecta&&(this.ejecta=!0),/Crosswalk/.test(t)&&(this.crosswalk=!0)}}]),t}();t["default"]=s}).call(t,n(141))},141:function(e,t){function n(){c&&s&&(c=!1,s.length?u=s.concat(u):d=-1,u.length&&i())}function i(){if(!c){var e=setTimeout(n);c=!0;for(var t=u.length;t;){for(s=u,u=[];++d<t;)s&&s[d].run();d=-1,t=u.length}s=null,c=!1,clearTimeout(e)}}function o(e,t){this.fun=e,this.array=t}function r(){}var s,a=e.exports={},u=[],c=!1,d=-1;a.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];u.push(new o(e,t)),1!==u.length||c||setTimeout(i,0)},o.prototype.run=function(){this.fun.apply(null,this.array)},a.title="browser",a.browser=!0,a.env={},a.argv=[],a.version="",a.versions={},a.on=r,a.addListener=r,a.once=r,a.off=r,a.removeListener=r,a.removeAllListeners=r,a.emit=r,a.binding=function(e){throw new Error("process.binding is not supported")},a.cwd=function(){return"/"},a.chdir=function(e){throw new Error("process.chdir is not supported")},a.umask=function(){return 0}},142:function(e,t,n){function i(e){return n(o(e))}function o(e){return r[e]||function(){throw new Error("Cannot find module '"+e+"'.")}()}var r={"./Browser":140,"./Browser.js":140,"./Device":143,"./Device.js":143,"./Endian":145,"./Endian.js":145,"./Features":146,"./Features.js":146,"./Input":147,"./Input.js":147,"./OS":144,"./OS.js":144,"./features/WebGL":148,"./features/WebGL.js":148,"./features/index":150,"./features/index.js":150};i.keys=function(){return Object.keys(r)},i.resolve=o,e.exports=i,i.id=142},143:function(e,t,n){"use strict";function i(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var r=n(144),s=i(r),a=n(145),u=i(a),c=function d(){o(this,d),this.os=new s["default"],this.LITTLE_ENDIAN=(0,u["default"])()};t["default"]=c},144:function(e,t){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),o=function(){function e(){n(this,e),this.desktop=!1,this.iOS=!1,this.iOSVersion=0,this.android=!1,this.chromeOS=!1,this.linux=!1,this.macOS=!1,this.windows=!1,this.windowsPhone=!1}return i(e,[{key:"init",value:function(){var e=arguments.length<=0||void 0===arguments[0]?navigator.userAgent:arguments[0];/Playstation Vita/.test(e)?this.vita=!0:/Kindle/.test(e)||/\bKF[A-Z][A-Z]+/.test(e)||/Silk.*Mobile Safari/.test(e)?this.kindle=!0:/Android/.test(e)?this.android=!0:/CrOS/.test(e)?this.chromeOS=!0:/iP[ao]d|iPhone/i.test(e)?(this.iOS=!0,navigator.appVersion.match(/OS (\d+)/),this.iOSVersion=parseInt(RegExp.$1,10)):/Linux/.test(e)?this.linux=!0:/Mac OS/.test(e)?this.macOS=!0:/Windows/.test(e)&&(this.windows=!0),(/Windows Phone/i.test(e)||/IEMobile/i.test(e))&&(this.android=!1,this.iOS=!1,this.macOS=!1,this.windows=!0,this.windowsPhone=!0);var t=/Silk/.test(e);(this.windows||this.macOS||this.linux&&!t||this.chromeOS)&&(this.desktop=!0),(this.windowsPhone||/Windows NT/i.test(e)&&/Touch/i.test(e))&&(this.desktop=!1)}}]),e}();t["default"]=o},145:function(e,t){"use strict";function n(){var e=new ArrayBuffer(4),t=new Uint8Array(e),n=new Uint32Array(e);return t[0]=161,t[1]=178,t[2]=195,t[3]=212,3569595041===n[0]?!0:2712847316===n[0]?!1:null}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},146:function(e,t){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),o=function(){function e(t){n(this,e),this.device=t,this.canvas=!1,this.webGL=!1,this.localStorage=!1,this.file=!1,this.fileSystem=!1,this.worker=!1,this.pointerLock=!1,this.quirksMode=!1,this.getUserMedia=!1}return i(e,[{key:"init",value:function(){this.canvas=!!window.CanvasRenderingContext2D||this.device.os.cocoonJS;try{this.localStorage=!!localStorage.getItem}catch(e){this.localStorage=!1}this.file=!!(window.File&&window.FileReader&&window.FileList&&window.Blob),this.fileSystem=!!window.requestFileSystem;var t=function(){try{var e=document.createElement("canvas");return e.screencanvas=!1,!!window.WebGLRenderingContext&&(e.getContext("webgl")||e.getContext("experimental-webgl"))}catch(t){return!1}};this.webGL=!!t(),this.worker=!!window.Worker,this.pointerLock="pointerLockElement"in document||"mozPointerLockElement"in document||"webkitPointerLockElement"in document,this.quirksMode="CSS1Compat"!==document.compatMode,navigator.getUserMedia=navigator.getUserMedia||navigator.webkitGetUserMedia||navigator.mozGetUserMedia||navigator.msGetUserMedia||navigator.oGetUserMedia,window.URL=window.URL||window.webkitURL||window.mozURL||window.msURL,this.getUserMedia=!!navigator.getUserMedia&&!!window.URL}}]),e}();t["default"]=o},147:function(e,t){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),o=function(){function e(t){n(this,e),this.device=t,this.touch=!1,this.mspointer=!1,this.wheelEvent=""}return i(e,[{key:"init",value:function(){("ontouchstart"in document.documentElement||window.navigator.maxTouchPoints&&window.navigator.maxTouchPoints>=1)&&(this.touch=!0),(window.navigator.msPointerEnabled||window.navigator.pointerEnabled)&&(this.mspointer=!0),this.device.os.cocoonJS||("onwheel"in window||this.device.browser.ie&&"WheelEvent"in window?this.wheelEvent="wheel":"onmousewheel"in window?this.wheelEvent="mousewheel":device.firefox&&"MouseScrollEvent"in window&&(this.wheelEvent="DOMMouseScroll"))}}]),e}();t["default"]=o},148:function(e,t,n){"use strict";function i(e){return e&&e.__esModule?e:{"default":e}}function o(){try{var e=document.createElement("canvas");if(null===(0,s["default"])(e))return!1}catch(t){return!1}return!0}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=o;var r=n(149),s=i(r)},149:function(e,t){"use strict";function n(e,t){return e.getContext("webgl",t)||e.getContext("experimental-webgl",t)||null}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},150:function(e,t,n){"use strict";function i(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0}),t.WebGL=void 0;var o=n(148),r=i(o);t.WebGL=r["default"]}})});
//# sourceMappingURL=data:application/json;base64,