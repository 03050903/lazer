!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("webgl",[],t):"object"==typeof exports?exports.webgl=t():(e.lazer=e.lazer||{},e.lazer.webgl=t())}(this,function(){return function(e){function t(n){if(r[n])return r[n].exports;var i=r[n]={exports:{},id:n,loaded:!1};return e[n].call(i.exports,i,i.exports,t),i.loaded=!0,i.exports}var r={};return t.m=e,t.c=r,t.p="",t(0)}({0:function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function i(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t["default"]=e,t}Object.defineProperty(t,"__esModule",{value:!0}),t.VertexBuffer=t.vbo=t.WebGLShader=t.RenderList=t.WebGLProgram=t.GetContext=t.GLTexture=t.WebGLContextOptions=t.WebGLContextHandler=t.CompileShader=t.Attribute=void 0;var a=r(716),u=i(a),o=r(714),l=n(o),s=r(712),f=n(s),c=r(713),h=n(c),d=r(850),v=n(d),g=r(149),b=n(g),y=r(715),E=n(y),p=r(851),_=n(p),T=r(852),R=n(T),A=r(853),x=n(A),m=r(854),S=i(m);t.Attribute=u,t.CompileShader=l["default"],t.WebGLContextHandler=f["default"],t.WebGLContextOptions=h["default"],t.GLTexture=v["default"],t.GetContext=b["default"],t.WebGLProgram=E["default"],t.RenderList=_["default"],t.WebGLShader=R["default"],t.vbo=S,t.VertexBuffer=x["default"]},149:function(e,t){"use strict";function r(e,t){return e.getContext("webgl",t)||e.getContext("experimental-webgl",t)||null}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r},712:function(e,t){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),i=function(){function e(t){r(this,e),this.canvas=null,this.contextLost=!1,t&&this.add(t)}return n(e,[{key:"add",value:function(e){this.canvas&&this.remove(),this.canvas=e,this.canvas.addEventListener("webglcontextlost",this.lost,!1),this.canvas.addEventListener("webglcontextrestored",this.restored,!1)}},{key:"lost",value:function(e){console.log("WebGL Context Lost"),e.preventDefault(),this.contextLost=!0}},{key:"restored",value:function(){console.log("WebGL Context restored"),this.contextLost=!1}},{key:"remove",value:function(){this.canvas.removeEventListener("webglcontextlost",this.lost),this.canvas.removeEventListener("webglcontextrestored",this.restored),this.canvas=null}}]),e}();t["default"]=i},713:function(e,t){"use strict";function r(){var e=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],t=e.alpha,r=void 0===t?!1:t,n=e.antialias,i=void 0===n?!0:n,a=e.premultipliedAlpha,u=void 0===a?!1:a,o=e.stencil,l=void 0===o?!1:o,s=e.preserveDrawingBuffer,f=void 0===s?!1:s;return{alpha:r,antialias:i,premultipliedAlpha:u,stencil:l,preserveDrawingBuffer:f}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r},714:function(e,t){"use strict";function r(e,t,r){Array.isArray(t)&&(t=t.join("\n"));var n=e.createShader(r);return e.shaderSource(n,t),e.compileShader(n),e.getShaderParameter(n,e.COMPILE_STATUS)?n:(console.warn("Failed to compile shader: "+e.getShaderInfoLog(n)),e.deleteShader(n),null)}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r},715:function(e,t,r){"use strict";function n(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t["default"]=e,t}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),u=r(716),o=n(u),l=function(){function e(t){return i(this,e),this.gl=t,this.program=t.createProgram(),this.program?void 0:(console.warn("WebGLProgram - unable to createProgram on gl context"),null)}return a(e,[{key:"getAttrib",value:function(e){return o.get(this.gl,this.program,e)}},{key:"attach",value:function(){for(var e=arguments.length,t=Array(e),r=0;e>r;r++)t[r]=arguments[r];var n=!0,i=!1,a=void 0;try{for(var u,o=t[Symbol.iterator]();!(n=(u=o.next()).done);n=!0){var l=u.value;this.gl.attachShader(this.program,l)}}catch(s){i=!0,a=s}finally{try{!n&&o["return"]&&o["return"]()}finally{if(i)throw a}}return this}},{key:"attachAndDelete",value:function(){for(var e=arguments.length,t=Array(e),r=0;e>r;r++)t[r]=arguments[r];var n=!0,i=!1,a=void 0;try{for(var u,o=t[Symbol.iterator]();!(n=(u=o.next()).done);n=!0){var l=u.value;this.gl.attachShader(this.program,l),this.gl.deleteShader(l)}}catch(s){i=!0,a=s}finally{try{!n&&o["return"]&&o["return"]()}finally{if(i)throw a}}return this}},{key:"link",value:function(){this.gl.linkProgram(this.program);var e=this.gl.getProgramParameter(this.program,this.gl.LINK_STATUS);if(!e){var t=this.gl.getProgramInfoLog(this.program);console.warn("Failed to link WebGL program: "+t),this["delete"]()}return this}},{key:"use",value:function(){return this.gl.useProgram(this.program),this}},{key:"detatch",value:function(){for(var e=arguments.length,t=Array(e),r=0;e>r;r++)t[r]=arguments[r];var n=!0,i=!1,a=void 0;try{for(var u,o=t[Symbol.iterator]();!(n=(u=o.next()).done);n=!0){var l=u.value;this.gl.detatchShader(l)}}catch(s){i=!0,a=s}finally{try{!n&&o["return"]&&o["return"]()}finally{if(i)throw a}}return this}},{key:"delete",value:function(){return this.gl.deleteProgram(this.program),this}},{key:"destroy",value:function(){this["delete"](),this.gl=null,this.program=null}}]),e}();t["default"]=l},716:function(e,t){"use strict";function r(e,t,r,n,a,u,o,l){var s=i(e,t,r);return null!==s&&(e.vertexAttribPointer(s,n,a,u,o,l),e.enableVertexAttribArray(s)),s}function n(e,t){e.disableVertexAttribArray(t)}function i(e,t,r){var n=e.getAttribLocation(t,r);return 0>n?(console.warn("WebGLProgram - failed to get attribute location: "+r),null):n}function a(e,t,n){var i=arguments.length<=3||void 0===arguments[3]?!1:arguments[3],a=arguments.length<=4||void 0===arguments[4]?0:arguments[4],u=arguments.length<=5||void 0===arguments[5]?0:arguments[5];return r(e,t,n,2,e.UNSIGNED_BYTE,i,a,u)}function u(e,t,n){var i=arguments.length<=3||void 0===arguments[3]?!1:arguments[3],a=arguments.length<=4||void 0===arguments[4]?0:arguments[4],u=arguments.length<=5||void 0===arguments[5]?0:arguments[5];return r(e,t,n,2,e.SHORT,i,a,u)}function o(e,t,n){var i=arguments.length<=3||void 0===arguments[3]?!1:arguments[3],a=arguments.length<=4||void 0===arguments[4]?0:arguments[4],u=arguments.length<=5||void 0===arguments[5]?0:arguments[5];return r(e,t,n,2,e.UNSIGNED_SHORT,i,a,u)}function l(e,t,n){var i=arguments.length<=3||void 0===arguments[3]?!1:arguments[3],a=arguments.length<=4||void 0===arguments[4]?0:arguments[4],u=arguments.length<=5||void 0===arguments[5]?0:arguments[5];return r(e,t,n,2,e.INT,i,a,u)}function s(e,t,n){var i=arguments.length<=3||void 0===arguments[3]?!1:arguments[3],a=arguments.length<=4||void 0===arguments[4]?0:arguments[4],u=arguments.length<=5||void 0===arguments[5]?0:arguments[5];return r(e,t,n,2,e.UNSIGNED_INT,i,a,u)}function f(e,t,n){var i=arguments.length<=3||void 0===arguments[3]?!1:arguments[3],a=arguments.length<=4||void 0===arguments[4]?0:arguments[4],u=arguments.length<=5||void 0===arguments[5]?0:arguments[5];return r(e,t,n,2,e.FLOAT,i,a,u)}Object.defineProperty(t,"__esModule",{value:!0}),t.disable=n,t.getLocation=i,t.createByte=a,t.createShort=u,t.createUnsignedShort=o,t.createInt=l,t.createUnsignedInt=s,t.createFloat=f},717:function(e,t){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),i=function(){function e(){r(this,e),this.vertSize=0,this.batchSize=0,this.vertices=null,this.buffer=null,this.index=0,this.total=0,this.size=0}return n(e,[{key:"create",value:function(e){var t=arguments.length<=1||void 0===arguments[1]?2:arguments[1],r=arguments.length<=2||void 0===arguments[2]?2e3:arguments[2];return this.vertSize=t,this.batchSize=r,this.vertices=new Float32Array(this.batchSize*this.vertSize),this.index=0,this.total=0,this.size=0,this.buffer=e.createBuffer(),this.buffer?void this.bindBuffer(e):-1}},{key:"bindBuffer",value:function(e){e.bindBuffer(e.ARRAY_BUFFER,this.buffer)}},{key:"bufferData",value:function(e,t){e.bufferData(e.ARRAY_BUFFER,this.vertices,t)}},{key:"bufferDynamicData",value:function(e){e.bufferData(e.ARRAY_BUFFER,this.vertices,e.DYNAMIC_DRAW)}},{key:"bufferStaticData",value:function(e){e.bufferData(e.ARRAY_BUFFER,this.vertices,e.STATIC_DRAW)}},{key:"bufferStreamData",value:function(e){e.bufferData(e.ARRAY_BUFFER,this.vertices,e.STREAM_DRAW)}},{key:"reset",value:function(){this.index=0,this.size=0,this.total=0}}]),e}();t["default"]=i},718:function(e,t){"use strict";function r(e,t,r){return e.vertices[e.index++]=t,e.vertices[e.index++]=r,e.total++,e.index-2}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r},721:function(e,t){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),i=function(){function e(){r(this,e),this.vertSize=0,this.batchSize=0,this.indices=null,this.buffer=null}return n(e,[{key:"create",value:function(e){var t=arguments.length<=1||void 0===arguments[1]?6:arguments[1],r=arguments.length<=2||void 0===arguments[2]?2e3:arguments[2];return t*r>65535?(console.warn("VertexIndexBuffer: Cannot create buffer > 65535 bytes"),-1):(this.vertSize=t,this.batchSize=r,this.indices=new Uint16Array(r*t),this.buffer=e.createBuffer(),this.buffer?void this.reset():-1)}},{key:"reset",value:function(){for(var e=0,t=0;e<this.batchSize*this.vertSize;e+=this.vertSize,t+=4)this.indices[e+0]=t+0,this.indices[e+1]=t+1,this.indices[e+2]=t+2,this.indices[e+3]=t+0,this.indices[e+4]=t+2,this.indices[e+5]=t+3}},{key:"bindBuffer",value:function(e){e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,this.buffer)}},{key:"bufferData",value:function(e){e.bufferData(e.ELEMENT_ARRAY_BUFFER,this.indices,e.STATIC_DRAW)}}]),e}();t["default"]=i},850:function(e,t){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),i=function(){function e(t){r(this,e),this.gl=t,this.texture=null}return n(e,[{key:"create",value:function(){return this.texture=this.gl.createTexture(),this}},{key:"bind",value:function(){return this.gl.bindTexture(this.gl.TEXTURE_2D,this.texture),this}},{key:"bindCubeMap",value:function(){return this.gl.bindTexture(this.gl.TEXTURE_CUBE_MAP,this.texture),this}},{key:"delete",value:function(){return this.gl.deleteTexture(this.texture),this}},{key:"loadImage",value:function(e){var t=this.gl;return t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,e),this}},{key:"setPackState",value:function(){var e=arguments.length<=0||void 0===arguments[0]?!1:arguments[0],t=arguments.length<=1||void 0===arguments[1]?!1:arguments[1],r=arguments.length<=2||void 0===arguments[2]?!1:arguments[2],n=this.gl;return n.pixelStorei(n.UNPACK_PREMULTIPLY_ALPHA_WEBGL,e),n.pixelStorei(n.UNPACK_FLIP_Y_WEBGL,t),n.pixelStorei(n.UNPACK_COLORSPACE_CONVERSION_WEBGL,r),this}},{key:"minFilter",value:function(){var e=arguments.length<=0||void 0===arguments[0]?!0:arguments[0];return e?gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.LINEAR):gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST),this}},{key:"magFilter",value:function(){var e=arguments.length<=0||void 0===arguments[0]?!0:arguments[0];e?gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.LINEAR):gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST)}},{key:"enableLinearScaling",value:function(){var e=this.gl;return e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.LINEAR),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.LINEAR),this}},{key:"enableNearestScaling",value:function(){var e=this.gl;return e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.NEAREST),this}},{key:"wrap",value:function(e){return this.wrapS(e),this.wrapT(e),this}},{key:"wrapS",value:function(e){return this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,e),this}},{key:"wrapT",value:function(e){return this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,e),this}},{key:"wrapRepeat",value:function(){return this.wrap(this.gl.REPEAT)}},{key:"wrapMirroredRepeat",value:function(){return this.wrap(this.gl.MIRRORED_REPEAT)}},{key:"wrapClamp",value:function(){return this.wrap(this.gl.CLAMP_TO_EDGE)}},{key:"destroy",value:function(){this["delete"](),this.gl=null}}]),e}();t["default"]=i},851:function(e,t){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),i=function(){function e(){r(this,e),this.list=new Set}return n(e,[{key:"clear",value:function(){this.list.clear()}},{key:"add",value:function(e){this.list.add(e)}},{key:"length",get:function(){return this.list.size}}]),e}();t["default"]=i},852:function(e,t){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var n=function i(e){r(this,i),this.gl=e};t["default"]=n},853:function(e,t){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),i=function(){function e(){var t=arguments.length<=0||void 0===arguments[0]?6:arguments[0],n=arguments.length<=1||void 0===arguments[1]?2e3:arguments[1];r(this,e),this.vertSize=t,this.batchSize=n,this.stride=4*t,this.vertices=new Float32Array(4*this.batchSize*this.vertSize),this.indices=new Uint16Array(6*this.batchSize),this.vertexBuffer=null,this.indexBuffer=null}return n(e,[{key:"resetIndices",value:function(){for(var e=0,t=0;e<6*this.batchSize;e+=6,t+=4)this.indices[e+0]=t+0,this.indices[e+1]=t+1,this.indices[e+2]=t+2,this.indices[e+3]=t+0,this.indices[e+4]=t+2,this.indices[e+5]=t+3}},{key:"create",value:function(e){return this.vertexBuffer=e.createBuffer(),vertexBuffer?(this.indexBuffer=e.createBuffer(),vertexBuffer?(e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,this.indexBuffer),e.bufferData(e.ELEMENT_ARRAY_BUFFER,this.indices,e.STATIC_DRAW),e.bindBuffer(e.ARRAY_BUFFER,this.vertexBuffer),void e.bufferData(e.ARRAY_BUFFER,this.vertices,e.DYNAMIC_DRAW)):-1):-1}}]),e}();t["default"]=i},854:function(e,t,r){"use strict";"create index";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0}),t.VertexIndexBuffer=t.VertexArrayBuffer=t.AddVert=t.AddQuadAlphaColor=void 0;var i=r(855),a=n(i),u=r(718),o=n(u),l=r(717),s=n(l),f=r(721),c=n(f);t.AddQuadAlphaColor=a["default"],t.AddVert=o["default"],t.VertexArrayBuffer=s["default"],t.VertexIndexBuffer=c["default"]},855:function(e,t){"use strict";function r(e,t,r,n,i,a,u,o){var l=arguments.length<=8||void 0===arguments[8]?1:arguments[8],s=arguments.length<=9||void 0===arguments[9]?16777215:arguments[9],f=arguments.length<=10||void 0===arguments[10]?16777215:arguments[10],c=arguments.length<=11||void 0===arguments[11]?16777215:arguments[11],h=arguments.length<=12||void 0===arguments[12]?16777215:arguments[12],d=e.vertices,v=4*e.size*e.vertSize;d[v++]=r*w1+i*h1+u,d[v++]=a*h1+n*w1+o,d[v++]=t.x0,d[v++]=t.y0,d[v++]=l,d[v++]=s,d[v++]=r*w0+i*h1+u,d[v++]=a*h1+n*w0+o,d[v++]=t.x1,d[v++]=t.y1,d[v++]=l,d[v++]=f,d[v++]=r*w0+i*h0+u,d[v++]=a*h0+n*w0+o,d[v++]=t.x2,d[v++]=t.y2,d[v++]=l,d[v++]=c,d[v++]=r*w1+i*h0+u,d[v++]=a*h0+n*w1+o,d[v++]=t.x3,d[v++]=t.y3,d[v++]=l,d[v++]=h,e.size++}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r}})});
//# sourceMappingURL=data:application/json;base64,