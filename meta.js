!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("meta",[],t):"object"==typeof exports?exports.meta=t():(e.lazer=e.lazer||{},e.lazer.meta=t())}(this,function(){return function(e){function t(o){if(r[o])return r[o].exports;var n=r[o]={exports:{},id:o,loaded:!1};return e[o].call(n.exports,n,n.exports,t),n.loaded=!0,n.exports}var r={};return t.m=e,t.c=r,t.p="",t(0)}({0:function(e,t,r){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0}),t.Version=t.Lazer=void 0;var n=r(709),u=o(n),a=r(172),i=o(a);t.Lazer=u["default"],t.Version=i["default"]},172:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r={major:1,minor:2,point:3,build:1,date:"12th January 2016"};t["default"]=r},709:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r={AUTO:0,CANVAS:1,WEBGL:2,HEADLESS:3};t["default"]=r}})});
//# sourceMappingURL=data:application/json;base64,