!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("input",[],t):"object"==typeof exports?exports.input=t():(e.lazer=e.lazer||{},e.lazer.input=t())}(this,function(){return function(e){function t(n){if(u[n])return u[n].exports;var r=u[n]={exports:{},id:n,loaded:!1};return e[n].call(r.exports,r,r.exports,t),r.loaded=!0,r.exports}var u={};return t.m=e,t.c=u,t.p="",t(0)}([function(e,t,u){"use strict";function n(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var u in e)Object.prototype.hasOwnProperty.call(e,u)&&(t[u]=e[u]);return t["default"]=e,t}Object.defineProperty(t,"__esModule",{value:!0}),t.keyboard=void 0;var r=u(283),f=n(r);t.keyboard=f},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t){"use strict";function u(e,t,u){var n=arguments.length<=3||void 0===arguments[3]?!1:arguments[3];e.addEventListener(t,u,n)}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=u},,,function(e,t){"use strict";function u(e,t,u){e.removeEventListener(t,u)}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=u},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,u){"use strict";function n(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var u in e)Object.prototype.hasOwnProperty.call(e,u)&&(t[u]=e[u]);return t["default"]=e,t}function r(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0}),t.state=t.keys=t.events=t.combo=t.Key=void 0;var f=u(284),l=r(f),o=u(285),a=n(o),d=u(289),i=n(d),c=u(300),s=n(c),_=u(402),v=n(_);t.Key=l["default"],t.combo=a,t.events=i,t.keys=s,t.state=v},function(e,t){"use strict";function u(e){var t=arguments.length<=1||void 0===arguments[1]?"":arguments[1];return"string"==typeof e&&(e=e.toUpperCase().charCodeAt(0)),""===t&&(t=String.fromCharCode(e)),{keyCode:e,name:t,preventDefault:!1,enabled:!0,isDown:!1,isUp:!0,altKey:!1,ctrlKey:!1,shiftKey:!1,timeDown:0,duration:0,timeUp:0,repeats:0,_justDown:!1,_justUp:!1}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=u},function(e,t,u){"use strict";"create index";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0}),t.ProcessKeyCombo=t.KeyCombo=t.AdvanceKeyCombo=void 0;var r=u(286),f=n(r),l=u(287),o=n(l),a=u(288),d=n(a);t.AdvanceKeyCombo=f["default"],t.KeyCombo=o["default"],t.ProcessKeyCombo=d["default"]},function(e,t){"use strict";function u(e,t){return t.timeLastMatched=e.timeStamp,t.index++,t.index===t.size?!0:(t.current=t.keyCodes[t.index],!1)}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=u},function(e,t){"use strict";function u(e){var t=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],u=t.resetOnWrongKey,n=void 0===u?!0:u,r=t.maxKeyDelay,f=void 0===r?0:r,l=t.resetOnMatch,o=void 0===l?!1:l;if(e.length<2)return!1;for(var a=[],d=0;d<e.length;d++){var i=e[d];"string"==typeof i?a.push(i.toUpperCase().charCodeAt(0)):"number"==typeof i?a.push(i):i.hasOwnProperty("keyCode")&&a.push(i.keyCode)}return{keyCodes:a,current:a[0],index:0,size:a.length,timeLastMatched:0,matched:!1,timeMatched:0,resetOnWrongKey:n,maxKeyDelay:f,resetOnMatch:o}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=u},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){var u=!1,n=!1;if(t.matched)return!0;if(e.keyCode===t.current)if(t.index>0&&t.maxKeyDelay>0){var r=t.timeLastMatched+t.maxKeyDelay;e.timeStamp<=r&&(n=!0,u=(0,l["default"])(e,t))}else n=!0,u=(0,l["default"])(e,t);return!n&&t.resetOnWrongKey&&(t.index=0,t.current=t.keyCodes[0]),u&&(t.timeLastMatched=e.timeStamp,t.matched=!0,t.timeMatched=e.timeStamp),u}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(286),l=n(f)},function(e,t,u){"use strict";"create index";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0}),t.RemoveKeyUp=t.RemoveKeyPress=t.RemoveKeyDown=t.ProcessKeyUp=t.ProcessKeyDown=t.AddKeyUp=t.AddKeyPress=t.AddKeyDown=void 0;var r=u(290),f=n(r),l=u(291),o=n(l),a=u(292),d=n(a),i=u(293),c=n(i),s=u(296),_=n(s),v=u(297),M=n(v),y=u(298),p=n(y),P=u(299),O=n(P);t.AddKeyDown=f["default"],t.AddKeyPress=o["default"],t.AddKeyUp=d["default"],t.ProcessKeyDown=c["default"],t.ProcessKeyUp=_["default"],t.RemoveKeyDown=M["default"],t.RemoveKeyPress=p["default"],t.RemoveKeyUp=O["default"]},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){var u=arguments.length<=2||void 0===arguments[2]?!1:arguments[2];(0,l["default"])(e,"keydown",t,u)}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(151),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){var u=arguments.length<=2||void 0===arguments[2]?!1:arguments[2];(0,l["default"])(e,"keypress",t,u)}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(151),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){var u=arguments.length<=2||void 0===arguments[2]?!1:arguments[2];(0,l["default"])(e,"keyup",t,u)}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(151),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(e){var t=arguments.length<=1||void 0===arguments[1]?null:arguments[1],u=arguments.length<=2||void 0===arguments[2]?!1:arguments[2];if(t){var n=!0,r=!1,f=void 0;try{for(var l,a=t[Symbol.iterator]();!(n=(l=a.next()).done);n=!0){var d=l.value;d.keyCode===e.keyCode&&d.enabled&&(d.preventDefault&&(u=!0),d.altKey=e.altKey,d.ctrlKey=e.ctrlKey,d.shiftKey=e.shiftKey,d.isDown?d.repeats++:(d.isDown=!0,d.isUp=!1,d.timeDown=e.timeStamp,d.duration=0,d.repeats=0,d._justDown=!0,d._justUp=!1),console.log("down",d.name))}}catch(i){r=!0,f=i}finally{try{!n&&a["return"]&&a["return"]()}finally{if(r)throw f}}}u&&e.preventDefault(),o.hasListeners&&o.dispatch(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.onDown=void 0,t["default"]=r;var f=u(294),l=n(f),o=t.onDown=new l["default"]},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var f=function(){function e(e,t){for(var u=0;u<t.length;u++){var n=t[u];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,u,n){return u&&e(t.prototype,u),n&&e(t,n),t}}(),l=u(295),o=n(l),a=function(){function e(){r(this,e),this.callbacks=new Map,this.prevParams=[],this.memorize=!1,this.active=!0,this.propagate=!0}return f(e,[{key:"validate",value:function(e,t){if("function"!=typeof e)return console.warn("Signal.add: listener argument is required and should be a Function."),!1;var u=!0,n=!1,r=void 0;try{for(var f,l=this.callbacks.keys()[Symbol.iterator]();!(u=(f=l.next()).done);u=!0){var o=f.value;if(o.listener===e){if(o.isOnce)return console.warn("Signal.add: You already have the given listener bound 'isOnce' to this Signal."),!1;if(t)return console.warn("Signal.addOnce: You cannot addOnce a listener that is already bound to this Signal."),!1}}}catch(a){n=!0,r=a}finally{try{!u&&l["return"]&&l["return"]()}finally{if(n)throw r}}return!0}},{key:"add",value:function(e){for(var t=arguments.length,u=Array(t>1?t-1:0),n=1;t>n;n++)u[n-1]=arguments[n];return this.register(e,!1,u)}},{key:"addOnce",value:function(e){for(var t=arguments.length,u=Array(t>1?t-1:0),n=1;t>n;n++)u[n-1]=arguments[n];return this.register(e,!0,u)}},{key:"register",value:function(e,t,u){if(!this.validate(e,!1))return null;var n=new o["default"](this,e,!1,u);return this.callbacks.set(n,e),this.memorize&&this.prevParams.length>0&&n.execute(this.prevParams),n}},{key:"dispatch",value:function(){for(var e=arguments.length,t=Array(e),u=0;e>u;u++)t[u]=arguments[u];this.memorize&&(this.prevParams=t);var n=!0,r=!1,f=void 0;try{for(var l,o=this.callbacks.keys()[Symbol.iterator]();!(n=(l=o.next()).done);n=!0){var a=l.value,d=!0;if(a.active&&(d=a.execute(t)),!this.propagate||!d)return}}catch(i){r=!0,f=i}finally{try{!n&&o["return"]&&o["return"]()}finally{if(r)throw f}}}},{key:"remove",value:function(e){e.destroy(),this.callbacks["delete"](e)}},{key:"removeAll",value:function(){var e=!0,t=!1,u=void 0;try{for(var n,r=this.callbacks.keys()[Symbol.iterator]();!(e=(n=r.next()).done);e=!0){var f=n.value;f.destroy()}}catch(l){t=!0,u=l}finally{try{!e&&r["return"]&&r["return"]()}finally{if(t)throw u}}this.callbacks.clear()}},{key:"halt",value:function(){this.propagate=!1}},{key:"has",value:function(e){var t=!0,u=!1,n=void 0;try{for(var r,f=this.callbacks.keys()[Symbol.iterator]();!(t=(r=f.next()).done);t=!0){var l=r.value;if(l.listener===e)return!0}}catch(o){u=!0,n=o}finally{try{!t&&f["return"]&&f["return"]()}finally{if(u)throw n}}return!1}},{key:"forget",value:function(){this.prevParams=[]}},{key:"getNumListeners",value:function(){return this.callbacks.size}},{key:"destroy",value:function(){this.removeAll(),this.forget(),this.callbacks=null}},{key:"hasListeners",get:function(){return this.callbacks.size>0}}]),e}();t["default"]=a},function(e,t){"use strict";function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var u=0;u<t.length;u++){var n=t[u];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,u,n){return u&&e(t.prototype,u),n&&e(t,n),t}}(),r=function(){function e(t,n){var r=arguments.length<=2||void 0===arguments[2]?!1:arguments[2],f=arguments.length<=3||void 0===arguments[3]?[]:arguments[3];u(this,e),this.signal=t,this.listener=n,this.isOnce=r,this.args=f,this.active=!0}return n(e,[{key:"execute",value:function(e){var t=this.listener.apply(null,e.concat(this.args));return this.isOnce&&this.signal.remove(this),t}},{key:"destroy",value:function(){this.signal=null,this.listener=null,this.args=null,this.active=!1}}]),e}();t["default"]=r},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(e){var t=arguments.length<=1||void 0===arguments[1]?null:arguments[1],u=arguments.length<=2||void 0===arguments[2]?!1:arguments[2];if(t){var n=!0,r=!1,f=void 0;try{for(var l,a=t[Symbol.iterator]();!(n=(l=a.next()).done);n=!0){var d=l.value;d.keyCode===e.keyCode&&d.enabled&&(d.preventDefault&&(u=!0),d.isDown=!1,d.isUp=!0,d.timeUp=e.timeStamp,d.duration=d.timeUp-d.timeDown,d._justDown=!1,d._justUp=!0,console.log("up",d.name))}}catch(i){r=!0,f=i}finally{try{!n&&a["return"]&&a["return"]()}finally{if(r)throw f}}}u&&e.preventDefault(),o.hasListeners&&o.dispatch(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.onUp=void 0,t["default"]=r;var f=u(294),l=n(f),o=t.onUp=new l["default"]},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){(0,l["default"])(e,"keydown",t)}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(154),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){(0,l["default"])(e,"keypress",t)}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(154),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){(0,l["default"])(e,"keyup",t)}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(154),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0}),t.ZERO=t.Z=t.Y=t.X=t.W=t.V=t.UP=t.UNDERSCORE=t.U=t.TWO=t.TILDE=t.THREE=t.TAB=t.T=t.SPACEBAR=t.SIX=t.SHIFT=t.SEVEN=t.S=t.RIGHT=t.R=t.QUOTES=t.QUESTION_MARK=t.Q=t.PLUS=t.PERIOD=t.PAGE_UP=t.PAGE_DOWN=t.P=t.OPEN_BRACKET=t.ONE=t.O=t.NUMPAD_SUBTRACT=t.NUMPAD_MULTIPLY=t.NUMPAD_ENTER=t.NUMPAD_DIVIDE=t.NUMPAD_DECIMAL=t.NUMPAD_ADD=t.NUMPAD_9=t.NUMPAD_8=t.NUMPAD_7=t.NUMPAD_6=t.NUMPAD_5=t.NUMPAD_4=t.NUMPAD_3=t.NUMPAD_2=t.NUMPAD_1=t.NUMPAD_0=t.NUM_LOCK=t.NINE=t.N=t.MINUS=t.M=t.LEFT=t.L=t.K=t.J=t.INSERT=t.I=t.HOME=t.HELP=t.H=t.G=t.FOUR=t.FIVE=t.F9=t.F8=t.F7=t.F6=t.F5=t.F4=t.F3=t.F2=t.F15=t.F14=t.F13=t.F12=t.F11=t.F10=t.F1=t.F=t.ESC=t.EQUALS=t.ENTER=t.END=t.EIGHT=t.E=t.DOWN=t.DELETE=t.D=t.CONTROL=t.COMMA=t.COLON=t.CLOSED_BRACKET=t.CLEAR=t.CAPS_LOCK=t.C=t.BACKWARD_SLASH=t.BACKSPACE=t.B=t.ALT=t.A=void 0;var r=u(301),f=n(r),l=u(302),o=n(l),a=u(303),d=n(a),i=u(304),c=n(i),s=u(305),_=n(s),v=u(306),M=n(v),y=u(307),p=n(y),P=u(308),O=n(P),b=u(309),j=n(b),D=u(310),A=n(D),h=u(311),E=n(h),U=u(312),N=n(U),m=u(313),C=n(m),S=u(314),K=n(S),T=u(315),L=n(T),R=u(316),F=n(R),g=u(317),w=n(g),k=u(318),I=n(k),x=u(319),B=n(x),H=u(320),W=n(H),G=u(321),Q=n(G),z=u(322),V=n(z),Y=u(323),J=n(Y),X=u(324),Z=n(X),q=u(325),$=n(q),ee=u(326),te=n(ee),ue=u(327),ne=n(ue),re=u(328),fe=n(re),le=u(329),oe=n(le),ae=u(330),de=n(ae),ie=u(331),ce=n(ie),se=u(332),_e=n(se),ve=u(333),Me=n(ve),ye=u(334),pe=n(ye),Pe=u(335),Oe=n(Pe),be=u(336),je=n(be),De=u(337),Ae=n(De),he=u(338),Ee=n(he),Ue=u(339),Ne=n(Ue),me=u(340),Ce=n(me),Se=u(341),Ke=n(Se),Te=u(342),Le=n(Te),Re=u(343),Fe=n(Re),ge=u(344),we=n(ge),ke=u(345),Ie=n(ke),xe=u(346),Be=n(xe),He=u(347),We=n(He),Ge=u(348),Qe=n(Ge),ze=u(349),Ve=n(ze),Ye=u(350),Je=n(Ye),Xe=u(351),Ze=n(Xe),qe=u(352),$e=n(qe),et=u(353),tt=n(et),ut=u(354),nt=n(ut),rt=u(355),ft=n(rt),lt=u(356),ot=n(lt),at=u(357),dt=n(at),it=u(358),ct=n(it),st=u(359),_t=n(st),vt=u(360),Mt=n(vt),yt=u(361),pt=n(yt),Pt=u(362),Ot=n(Pt),bt=u(363),jt=n(bt),Dt=u(364),At=n(Dt),ht=u(365),Et=n(ht),Ut=u(366),Nt=n(Ut),mt=u(367),Ct=n(mt),St=u(368),Kt=n(St),Tt=u(369),Lt=n(Tt),Rt=u(370),Ft=n(Rt),gt=u(371),wt=n(gt),kt=u(372),It=n(kt),xt=u(373),Bt=n(xt),Ht=u(374),Wt=n(Ht),Gt=u(375),Qt=n(Gt),zt=u(376),Vt=n(zt),Yt=u(377),Jt=n(Yt),Xt=u(378),Zt=n(Xt),qt=u(379),$t=n(qt),eu=u(380),tu=n(eu),uu=u(381),nu=n(uu),ru=u(382),fu=n(ru),lu=u(383),ou=n(lu),au=u(384),du=n(au),iu=u(385),cu=n(iu),su=u(386),_u=n(su),vu=u(387),Mu=n(vu),yu=u(388),pu=n(yu),Pu=u(389),Ou=n(Pu),bu=u(390),ju=n(bu),Du=u(391),Au=n(Du),hu=u(392),Eu=n(hu),Uu=u(393),Nu=n(Uu),mu=u(394),Cu=n(mu),Su=u(395),Ku=n(Su),Tu=u(396),Lu=n(Tu),Ru=u(397),Fu=n(Ru),gu=u(398),wu=n(gu),ku=u(399),Iu=n(ku),xu=u(400),Bu=n(xu),Hu=u(401),Wu=n(Hu);t.A=f["default"],t.ALT=o["default"],t.B=d["default"],t.BACKSPACE=c["default"],t.BACKWARD_SLASH=_["default"],t.C=M["default"],t.CAPS_LOCK=p["default"],t.CLEAR=O["default"],t.CLOSED_BRACKET=j["default"],t.COLON=A["default"],t.COMMA=E["default"],t.CONTROL=N["default"],t.D=C["default"],t.DELETE=K["default"],t.DOWN=L["default"],t.E=F["default"],t.EIGHT=w["default"],t.END=I["default"],t.ENTER=B["default"],t.EQUALS=W["default"],t.ESC=Q["default"],t.F=V["default"],t.F1=J["default"],t.F10=Z["default"],t.F11=$["default"],t.F12=te["default"],t.F13=ne["default"],t.F14=fe["default"],t.F15=oe["default"],t.F2=de["default"],t.F3=ce["default"],t.F4=_e["default"],t.F5=Me["default"],t.F6=pe["default"],t.F7=Oe["default"],t.F8=je["default"],t.F9=Ae["default"],t.FIVE=Ee["default"],t.FOUR=Ne["default"],t.G=Ce["default"],t.H=Ke["default"],t.HELP=Le["default"],t.HOME=Fe["default"],t.I=we["default"],t.INSERT=Ie["default"],t.J=Be["default"],t.K=We["default"],t.L=Qe["default"],t.LEFT=Ve["default"],t.M=Je["default"],t.MINUS=Ze["default"],t.N=$e["default"],t.NINE=tt["default"],t.NUM_LOCK=nt["default"],t.NUMPAD_0=ft["default"],t.NUMPAD_1=ot["default"],t.NUMPAD_2=dt["default"],t.NUMPAD_3=ct["default"],t.NUMPAD_4=_t["default"],t.NUMPAD_5=Mt["default"],t.NUMPAD_6=pt["default"],t.NUMPAD_7=Ot["default"],t.NUMPAD_8=jt["default"],t.NUMPAD_9=jt["default"],t.NUMPAD_ADD=At["default"],t.NUMPAD_DECIMAL=Et["default"],t.NUMPAD_DIVIDE=Nt["default"],t.NUMPAD_ENTER=Ct["default"],t.NUMPAD_MULTIPLY=Kt["default"],t.NUMPAD_SUBTRACT=Lt["default"],t.O=Ft["default"],t.ONE=wt["default"],t.OPEN_BRACKET=It["default"],t.P=Bt["default"],t.PAGE_DOWN=Wt["default"],t.PAGE_UP=Qt["default"],t.PERIOD=Vt["default"],t.PLUS=Jt["default"],t.Q=Zt["default"],t.QUESTION_MARK=$t["default"],t.QUOTES=tu["default"],t.R=nu["default"],t.RIGHT=fu["default"],t.S=ou["default"],t.SEVEN=du["default"],t.SHIFT=cu["default"],t.SIX=_u["default"],t.SPACEBAR=Mu["default"],t.T=pu["default"],t.TAB=Ou["default"],t.THREE=ju["default"],t.TILDE=Au["default"],t.TWO=Eu["default"],t.U=Nu["default"],t.UNDERSCORE=Cu["default"],t.UP=Ku["default"],t.V=Lu["default"],t.W=Fu["default"],t.X=wu["default"],t.Y=Iu["default"],t.Z=Bu["default"],t.ZERO=Wu["default"]},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])("A")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(18,"ALT")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])("B")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(8,"BACKSPACE")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(220,"BACKWARD_SLASH")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])("C")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(20,"CAPS_LOCK")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(12,"CLEAR")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(221,"CLOSED_BRACKET")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(186,"COLON")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(188,"COMMA")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(17,"CONTROL")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])("D")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(46,"DELETE")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(40,"DOWN")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])("E")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])("8")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(35,"END")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(13,"ENTER")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(187,"EQUALS")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(27,"ESC")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])("F")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(112,"F1")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(121,"F10")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(122,"F11")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(123,"F12")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(124,"F13")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(125,"F14")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(126,"F15")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(113,"F2")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(114,"F3")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(115,"F4")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(116,"F5")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(117,"F6")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(118,"F7")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(119,"F8")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(120,"F9")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])("5")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])("4")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])("G")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])("H")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(47,"HELP")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(36,"HOME")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])("I")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(45,"INSERT")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])("J")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])("K")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])("L")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(37,"LEFT")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])("M")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(44,"MINUS")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])("N")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])("9")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(144,"NUM_LOCK")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(96,"NUMPAD_0")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(97,"NUMPAD_1")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(98,"NUMPAD_2")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(99,"NUMPAD_3")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(100,"NUMPAD_4")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(101,"NUMPAD_5")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(102,"NUMPAD_6")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(103,"NUMPAD_7")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(104,"NUMPAD_8")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(107,"NUMPAD_ADD")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(110,"NUMPAD_DECIMAL")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(111,"NUMPAD_DIVIDE")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(108,"NUMPAD_ENTER")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(106,"NUMPAD_MULTIPLY")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(109,"NUMPAD_SUBTRACT")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])("O")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])("1")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){
return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(219,"OPEN_BRACKET")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])("P")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(34,"PAGE_DOWN")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(33,"PAGE_UP")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(190,"PERIOD")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(43,"PLUS")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])("Q")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(191,"QUESTION_MARK")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(222,"QUOTES")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])("R")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(39,"RIGHT")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])("S")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])("7")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(16,"SHIFT")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])("6")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(32,"SPACEBAR")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])("T")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(9,"TAB")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])("3")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(192,"TILDE")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])("2")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])("U")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(189,"UNDERSCORE")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])(38,"UP")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])("V")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])("W")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])("X")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])("Y")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])("Z")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){return(0,l["default"])("0")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var f=u(284),l=n(f)},function(e,t,u){"use strict";"create index";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0}),t.UpDuration=t.ResetKey=t.JustUp=t.JustDown=t.DownDuration=void 0;var r=u(403),f=n(r),l=u(404),o=n(l),a=u(405),d=n(a),i=u(406),c=n(i),s=u(407),_=n(s);t.DownDuration=f["default"],t.JustDown=o["default"],t.JustUp=d["default"],t.ResetKey=c["default"],t.UpDuration=_["default"]},function(e,t){"use strict";function u(e){var t=arguments.length<=1||void 0===arguments[1]?50:arguments[1];return e.isDown&&e.duration<t}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=u},function(e,t){"use strict";function u(e){var t=!1;return e.isDown&&(t=e._justDown,e._justDown=!1),t}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=u},function(e,t){"use strict";function u(e){var t=!1;return e.isDown&&(t=e._justUp,e._justUp=!1),t}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=u},function(e,t){"use strict";function u(e){var t=arguments.length<=1||void 0===arguments[1]?!1:arguments[1];return e.preventDefault=!1,e.enabled=!0,e.isDown=!1,e.isUp=!0,e.altKey=!1,e.ctrlKey=!1,e.shiftKey=!1,e.timeDown=0,e.duration=0,e.timeUp=0,e.repeats=0,e._justDown=!1,e._justUp=fals,t&&(e.keyCode=0,e["char"]=""),e}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=u},function(e,t){"use strict";function u(e){var t=arguments.length<=1||void 0===arguments[1]?50:arguments[1];return e.isUp&&e.duration<t}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=u}])});
//# sourceMappingURL=data:application/json;base64,