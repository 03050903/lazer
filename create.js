!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("create",[],t):"object"==typeof exports?exports.create=t():(e.lazer=e.lazer||{},e.lazer.create=t())}(this,function(){return function(e){function t(a){if(r[a])return r[a].exports;var d=r[a]={exports:{},id:a,loaded:!1};return e[a].call(d.exports,d,d.exports,t),d.loaded=!0,d.exports}var r={};return t.m=e,t.c=r,t.p="",t(0)}({0:function(e,t,r){"use strict";function a(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t["default"]=e,t}function d(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0}),t.palettes=t.RenderToCanvas=t.Grid=void 0;var o=r(132),i=d(o),n=r(133),l=d(n),u=r(135),f=a(u);t.Grid=i["default"],t.RenderToCanvas=l["default"],t.palettes=f},9:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=function(){var e=arguments.length<=0||void 0===arguments[0]?256:arguments[0],t=arguments.length<=1||void 0===arguments[1]?256:arguments[1],r=arguments.length<=2||void 0===arguments[2]?"":arguments[2],a=document.createElement("canvas");return""!==r&&(a.id=r),a.width=e,a.height=t,a.style.display="block",a}},12:function(e,t){"use strict";function r(e,t){return e.getContext("2d",t)||null}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r},15:function(e,t){"use strict";function r(e,t){var r=arguments.length<=2||void 0===arguments[2]?t:arguments[2];return t=Math.abs(t),r=Math.abs(r),e.width!==t&&(e.width=t),e.height!==r&&(e.height=r),e}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r},132:function(e,t,r){"use strict";function a(e){return e&&e.__esModule?e:{"default":e}}function d(){var e=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],t=e.canvas,r=void 0===t?void 0:t,a=e.width,d=void 0===a?256:a,o=e.height,n=void 0===o?d:o,u=e.cellWidth,f=void 0===u?32:u,c=e.cellHeight,v=void 0===c?f:c,s=e.color1,b=void 0===s?"#fff":s,_=e.color2,p=void 0===_?"#000":_,h=e.drawLines,y=void 0===h?!1:h,E=e.lineColor,P=void 0===E?"#ff0000":E,M=e.alternate,T=void 0===M?!0:M,A=e.resizeCanvas,g=void 0===A?!0:A,j=e.clear,R=void 0===j?!0:j,x=e.preRender,O=void 0===x?void 0:x,C=e.postRender,L=void 0===C?void 0:C;r?g||(d=r.width,n=r.height):(r=(0,i["default"])(d,n),g=!1,R=!1);var w=(0,l["default"])(r);g&&Resize(r,d,n),R&&w.clearRect(0,0,d,n),y&&(w.lineWidth=1,w.strokeStyle=P),O&&O(r,w);for(var m=Math.ceil(d/f),F=Math.ceil(n/v),B=0,S=b,z=0;F>z;z++){for(var D=0;m>D;D++)if(0===B?(S=b,B=1):(S=p,B=0),S&&(w.fillStyle=S,w.fillRect(D*f,z*v,f,v)),y){var G=.5,k=.5;D===m-1&&(G=-.5),z===F-1&&(k=-.5),w.strokeRect(D*f+G,z*v+k,f,v)}T&&(B=0===B?1:0)}return L&&L(r,w),r}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=d;var o=r(9),i=a(o),n=r(12),l=a(n)},133:function(e,t,r){"use strict";function a(e){return e&&e.__esModule?e:{"default":e}}function d(e){var t=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],r=t.canvas,a=void 0===r?void 0:r,d=t.palette,i=void 0===d?o.PALETTE_ARNE:d,l=t.pixelWidth,f=void 0===l?8:l,v=t.pixelHeight,s=void 0===v?f:v,b=t.resizeCanvas,_=void 0===b?!0:b,p=t.clear,h=void 0===p?!0:p,y=t.preRender,E=void 0===y?void 0:y,P=t.postRender,M=void 0===P?void 0:P,T=e[0].length*f,A=e.length*s;a||(a=(0,n["default"])(T,A),_=!1,h=!1);var g=(0,u["default"])(a);_&&(0,c["default"])(a,T,A),h&&g.clearRect(0,0,T,A),E&&E(a,g);var j=0,R=0,x=!0,O=!1,C=void 0;try{for(var L,w=e[Symbol.iterator]();!(x=(L=w.next()).done);x=!0){var m=L.value;j=0;var F=!0,B=!1,S=void 0;try{for(var z,D=m[Symbol.iterator]();!(F=(z=D.next()).done);F=!0){var G=z.value,k=parseInt(G,16);i[k]&&(g.fillStyle=i[k],g.fillRect(j,R,f,s)),j+=f}}catch(N){B=!0,S=N}finally{try{!F&&D["return"]&&D["return"]()}finally{if(B)throw S}}R+=s}}catch(N){O=!0,C=N}finally{try{!x&&w["return"]&&w["return"]()}finally{if(O)throw C}}return M&&M(a,g),a}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=d;var o=r(134),i=r(9),n=a(i),l=r(12),u=a(l),f=r(15),c=a(f)},134:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=["#000","#9D9D9D","#FFF","#BE2633","#E06F8B","#493C2B","#A46422","#EB8931","#F7E26B","#2F484E","#44891A","#A3CE27","#1B2632","#005784","#31A2F2","#B2DCEF"];t["default"]=r},135:function(e,t,r){"use strict";function a(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0}),t.PALETTE_MSX=t.PALETTE_JMP=t.PALETTE_CGA=t.PALETTE_C64=t.PALETTE_ARNE=void 0;var d=r(134),o=a(d),i=r(136),n=a(i),l=r(137),u=a(l),f=r(138),c=a(f),v=r(139),s=a(v);t.PALETTE_ARNE=o["default"],t.PALETTE_C64=n["default"],t.PALETTE_CGA=u["default"],t.PALETTE_JMP=c["default"],t.PALETTE_MSX=s["default"]},136:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=["#000","#fff","#8b4131","#7bbdc5","#8b41ac","#6aac41","#3931a4","#d5de73","#945a20","#5a4100","#bd736a","#525252","#838383","#acee8b","#7b73de","#acacac"];t["default"]=r},137:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=["#000","#2234d1","#0c7e45","#44aacc","#8a3622","#5c2e78","#aa5c3d","#b5b5b5","#5e606e","#4c81fb","#6cd947","#7be2f9","#eb8a60","#e23d69","#ffd93f","#fff"];t["default"]=r},138:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=["#000","#191028","#46af45","#a1d685","#453e78","#7664fe","#833129","#9ec2e8","#dc534b","#e18d79","#d6b97b","#e9d8a1","#216c4b","#d365c8","#afaab9","#f5f4eb"];t["default"]=r},139:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=["#000","#191028","#46af45","#a1d685","#453e78","#7664fe","#833129","#9ec2e8","#dc534b","#e18d79","#d6b97b","#e9d8a1","#216c4b","#d365c8","#afaab9","#fff"];t["default"]=r}})});
//# sourceMappingURL=data:application/json;base64,