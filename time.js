!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("time",[],e):"object"==typeof exports?exports.time=e():(t.lazer=t.lazer||{},t.lazer.time=e())}(this,function(){return function(t){function e(n){if(i[n])return i[n].exports;var r=i[n]={exports:{},id:n,loaded:!1};return t[n].call(r.exports,r,r.exports,e),r.loaded=!0,r.exports}var i={};return e.m=t,e.c=i,e.p="",e(0)}({0:function(t,e,i){"use strict";"create index";function n(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(e,"__esModule",{value:!0}),e.MasterClock=e.Clock=void 0;var r=i(825),o=n(r),u=i(826),a=n(u);e.Clock=o["default"],e.MasterClock=a["default"]},156:function(t,e,i){"use strict";function n(t){return t&&t.__esModule?t:{"default":t}}function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,i,n){return i&&t(e.prototype,i),n&&t(e,n),e}}(),u=i(157),a=n(u),s=function(){function t(e){var i=arguments.length<=1||void 0===arguments[1]?!1:arguments[1];r(this,t),this.root=e,this.forceSetTimeOut=i,i||(this.forceSetTimeOut=!this.normalizeRaf()),this._running=!1,this._timeOutID=null,this._callback=a["default"]}return o(t,[{key:"start",value:function(t){var e=this;this._running||(this._running=!0,this._callback=t,this.usingSetTimeout?this._timeOutID=this.root.setTimeout(function(t){return e.updateSetTimeout(Date.now())},0):this._timeOutID=this.root.requestAnimationFrame(function(t){return e.updateRAF(t)}))}},{key:"updateRAF",value:function(t){var e=this;this._callback(t),this._timeOutID=this.root.requestAnimationFrame(function(t){return e.updateRAF(t)})}},{key:"updateSetTimeout",value:function(t){var e=this;this._timeOutID=this.root.setTimeout(function(t){return e.updateSetTimeout(Date.now())},0)}},{key:"stop",value:function(){this._running&&(this.usingSetTimeout?this.root.clearTimeout(this._timeOutID):this.root.cancelAnimationFrame(this._timeOutID),this._running=!1)}},{key:"normalizeRaf",value:function(){if(this.root.requestAnimationFrame)return!0;for(var t=["ms","moz","webkit","o"],e=0;e<t.length;e++){var i=t[e];return this.root.requestAnimationFrame=this.root[i]+"RequestAnimationFrame",this.root.cancelAnimationFrame=this.root[i]+"CancelAnimationFrame",!0}return!1}},{key:"usingSetTimeout",get:function(){return this.forceSetTimeOut}},{key:"usingRAF",get:function(){return!this.forceSetTimeOut}},{key:"isRunning",get:function(){return this._running},set:function(t){t?this.start():this.stop()}}]),t}();e["default"]=s},157:function(t,e){"use strict";function i(){}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=i},825:function(t,e){"use strict";function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,i,n){return i&&t(e.prototype,i),n&&t(e,n),e}}(),r=function(){function t(e){var n=arguments.length<=1||void 0===arguments[1]?0:arguments[1];i(this,t),this.master=e,this.tickSize=n,this.total=0,this.time=0,this.scale=1,this.callback=null,this.events=new Set}return n(t,[{key:"step",value:function(t){if(this.total+=t,this.total>=this.tickSize*this.scale){var e=this.total%(this.tickSize*this.scale);this.time++,this.total=e}}}]),t}();e["default"]=r},826:function(t,e,i){"use strict";function n(t){return t&&t.__esModule?t:{"default":t}}function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,i,n){return i&&t(e.prototype,i),n&&t(e,n),e}}(),u=i(156),a=n(u),s=i(825),c=n(s),l=function(){function t(){r(this,t),this.raf=new a["default"](window,!1),this.getTime=Date.now,window.performance&&(window.performance.now?this.getTime=function(){return window.performance.now()}:window.performance.webkitNow&&(this.getTime=function(){return window.performance.webkitNow()})),this.time=0,this.prevTime=0,this.elapsed=0,this._startTime=0,this.callback=null,this.clocks=new Set}return o(t,[{key:"init",value:function(t){var e=this;this.time=this.getTime(),this._startTime=this.time,this.callback=t,this.raf.start(function(t){return e.step(t)})}},{key:"step",value:function(t){this.prevTime=this.time,this.time=t,this.elapsed=this.time-this.prevTime;var e=!0,i=!1,n=void 0;try{for(var r,o=this.clocks[Symbol.iterator]();!(e=(r=o.next()).done);e=!0){var u=r.value;u.step(this.elapsed)}}catch(a){i=!0,n=a}finally{try{!e&&o["return"]&&o["return"]()}finally{if(i)throw n}}return this.callback(),16}},{key:"add",value:function(){var t=arguments.length<=0||void 0===arguments[0]?0:arguments[0],e=new c["default"](this,t);return this.clocks.add(e),e}},{key:"remove",value:function(t){this.clocks["delete"](t)}},{key:"destroy",value:function(){}},{key:"totalElapsed",get:function(){return this.time-this._startTime}}]),t}();e["default"]=l}})});
//# sourceMappingURL=data:application/json;base64,