!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("utils",[],t):"object"==typeof exports?exports.utils=t():(e.lazer=e.lazer||{},e.lazer.utils=t())}(this,function(){return function(e){function t(n){if(r[n])return r[n].exports;var u=r[n]={exports:{},id:n,loaded:!1};return e[n].call(u.exports,u,u.exports,t),u.loaded=!0,u.exports}var r={};return t.m=e,t.c=r,t.p="",t(0)}({0:function(e,t,r){"use strict";function n(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t["default"]=e,t}function u(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0}),t.string=t.array=t.Compose=t.Banner=void 0;var o=r(171),a=u(o),f=r(827),l=u(f),i=r(828),d=n(i),c=r(849),s=n(c);t.Banner=a["default"],t.Compose=l["default"],t.array=d,t.string=s},171:function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function u(e,t){var r="%c %c %c %c %c  ";e&&(r=r.concat(e+" powered by ")),r=r.concat("Lazer v"+a["default"].major+"."+a["default"].minor),void 0===t?r=r.concat(" - https://lazerjs.io"):""!==t&&(r=r.concat(" - "+t)),r=r.concat("  "),console.log.apply(console,[r,"background: #ff0000","background: #ffff00","background: #00ff00","background: #00ffff","color: #ffffff; background: #000;"])}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=u;var o=r(172),a=n(o)},172:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r={major:1,minor:2,point:3,build:1,date:"12th January 2016"};t["default"]=r},430:function(e,t){"use strict";function r(e){return e>0?Math.ceil(e):Math.floor(e)}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r},827:function(e,t){"use strict";function r(e){var t=Object.create(e);t.components=new Map;var r=!0,n=!1,u=void 0;try{for(var o,a=e.components[Symbol.iterator]();!(r=(o=a.next()).done);r=!0){var f=o.value,l=void 0;l=f.prototype&&f.prototype.constructor?new f:Object.create(f),l.host=t,t.components.set(f,l)}}catch(i){n=!0,u=i}finally{try{!r&&a["return"]&&a["return"]()}finally{if(n)throw u}}return t}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r},828:function(e,t,r){"use strict";function n(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t["default"]=e,t}function u(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0}),t.matrix=t.SpliceOne=t.Shuffle=t.RotateRight=t.RotateLeft=t.RemoveRandomElement=t.NumberArrayStep=t.NumberArray=t.GetRandomElement=t.FindClosestInSorted=void 0;var o=r(829),a=u(o),f=r(830),l=u(f),i=r(831),d=u(i),c=r(832),s=u(c),v=r(833),_=u(v),p=r(835),h=u(p),y=r(836),M=u(y),g=r(837),b=u(g),m=r(834),j=u(m),O=r(838),P=n(O);t.FindClosestInSorted=a["default"],t.GetRandomElement=l["default"],t.NumberArray=d["default"],t.NumberArrayStep=s["default"],t.RemoveRandomElement=_["default"],t.RotateLeft=h["default"],t.RotateRight=M["default"],t.Shuffle=b["default"],t.SpliceOne=j["default"],t.matrix=P},829:function(e,t){"use strict";function r(e,t){if(!t.length)return NaN;if(1===t.length||e<t[0])return t[0];for(var r=1;t[r]<e;)r++;var n=t[r-1],u=r<t.length?t[r]:Number.POSITIVE_INFINITY;return e-n>=u-e?u:n}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r},830:function(e,t){"use strict";function r(e){var t=arguments.length<=1||void 0===arguments[1]?0:arguments[1],r=arguments.length<=2||void 0===arguments[2]?e.length:arguments[2],n=t+Math.floor(Math.random()*r);return void 0===e[n]?null:e[n]}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r},831:function(e,t){"use strict";function r(e,t){if(!(e>t)){for(var r=[],n=e;t>=n;n++)r.push(n);return r}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r},832:function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function u(){var e=arguments.length<=0||void 0===arguments[0]?0:arguments[0],t=arguments.length<=1||void 0===arguments[1]?null:arguments[1],r=arguments.length<=2||void 0===arguments[2]?1:arguments[2];null===t&&(t=e,e=0);for(var n=[],u=Math.max((0,a["default"])((t-e)/(r||1)),0),o=0;u>o;o++)n.push(e),e+=r;return n}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=u;var o=r(430),a=n(o)},833:function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function u(e){var t=arguments.length<=1||void 0===arguments[1]?0:arguments[1],r=arguments.length<=2||void 0===arguments[2]?e.length:arguments[2],n=t+Math.floor(Math.random()*r);return(0,a["default"])(e,n)}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=u;var o=r(834),a=n(o)},834:function(e,t){"use strict";function r(e,t){if(!(t>=e.length)){for(var r=e.length-1,n=e[t],u=t;r>u;u++)e[u]=e[u+1];return e.length=r,n}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r},835:function(e,t){"use strict";function r(e){for(var t=arguments.length<=1||void 0===arguments[1]?1:arguments[1],r=null,n=0;t>n;n++)r=e.shift(),e.push(r);return r}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r},836:function(e,t){"use strict";function r(e){for(var t=arguments.length<=1||void 0===arguments[1]?1:arguments[1],r=null,n=0;t>n;n++)r=e.pop(),e.unshift(r);return r}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r},837:function(e,t){"use strict";function r(e){for(var t=e.length-1;t>0;t--){var r=Math.floor(Math.random()*(t+1)),n=e[t];e[t]=e[r],e[r]=n}return e}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r},838:function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0}),t.TransposeMatrix=t.RotateRight=t.RotateMatrix=t.RotateLeft=t.Rotate180=t.ReverseRows=t.ReverseColumns=t.MatrixToString=t.CheckMatrix=void 0;var u=r(839),o=n(u),a=r(840),f=n(a),l=r(842),i=n(l),d=r(843),c=n(d),s=r(844),v=n(s),_=r(847),p=n(_),h=r(845),y=n(h),M=r(848),g=n(M),b=r(846),m=n(b);t.CheckMatrix=o["default"],t.MatrixToString=f["default"],t.ReverseColumns=i["default"],t.ReverseRows=c["default"],t.Rotate180=v["default"],t.RotateLeft=p["default"],t.RotateMatrix=y["default"],t.RotateRight=g["default"],t.TransposeMatrix=m["default"]},839:function(e,t){"use strict";function r(e){if(!Array.isArray(e)||e.length<2||!Array.isArray(e[0]))return!1;var t=e[0].length,r=!0,n=!1,u=void 0;try{for(var o,a=e[Symbol.iterator]();!(r=(o=a.next()).done);r=!0){var f=o.value;if(f.length!==t)return!1}}catch(l){n=!0,u=l}finally{try{!r&&a["return"]&&a["return"]()}finally{if(n)throw u}}return!0}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r},840:function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function u(e){var t="";if(!(0,l["default"])(e))return t;for(var r=0;r<e.length;r++){for(var n=0;n<e[r].length;n++){var u=e[r][n].toString();t+="undefined"!==u?(0,a["default"])(u,2):"?",n<e[r].length-1&&(t+=" |")}if(r<e.length-1){t+="\n";for(var o=0;o<e[r].length;o++)t+="---",o<e[r].length-1&&(t+="+");t+="\n"}}return t}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=u;var o=r(841),a=n(o),f=r(839),l=n(f)},841:function(e,t){"use strict";function r(e,t){for(var r=arguments.length<=2||void 0===arguments[2]?" ":arguments[2],n=e,u=Math.abs(t);n.length<u;)0>t?n+=r:n=r+n;return n}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r},842:function(e,t){"use strict";function r(e){for(var t=0;t<e.length;t++)e[t].reverse();return e}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r},843:function(e,t){"use strict";function r(e){return e.reverse()}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r},844:function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function u(e){return(0,a["default"])(e,180)}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=u;var o=r(845),a=n(o)},845:function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function u(e){var t=arguments.length<=1||void 0===arguments[1]?90:arguments[1];if(!(0,a["default"])(e))return null;if("string"!=typeof t&&(t=(t%360+360)%360),90===t||-270===t||"rotateLeft"===t)e=(0,l["default"])(e),e=e.reverse();else if(-90===t||270===t||"rotateRight"===t)e=e.reverse(),e=(0,l["default"])(e);else if(180===Math.abs(t)||"rotate180"===t){for(var r=0;r<e.length;r++)e[r].reverse();e=e.reverse()}return e}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=u;var o=r(839),a=n(o),f=r(846),l=n(f)},846:function(e,t){"use strict";function r(e){for(var t=e.length,r=e[0].length,n=new Array(r),u=0;r>u;u++){n[u]=new Array(t);for(var o=t-1;o>-1;o--)n[u][o]=e[o][u]}return n}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r},847:function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function u(e){return(0,a["default"])(e,-90)}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=u;var o=r(845),a=n(o)},848:function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function u(e){return(0,a["default"])(e,90)}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=u;var o=r(845),a=n(o)},849:function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0}),t.Pad=void 0;var u=r(841),o=n(u);t.Pad=o["default"]}})});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uPzVjYTYqKioqKioqKioqKioqKioqKioqKiIsIndlYnBhY2s6Ly8vdXRpbHMuanMiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svYm9vdHN0cmFwIDFiNmY1OGExNzc0NTA4MGYwMDFhPzc3OWUqKioqKioqKioqKioqKioqKioqKiIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL0Jhbm5lci5qcz9mNmY1Iiwid2VicGFjazovLy8uL3NyYy9WZXJzaW9uLmpzPzMzMTQqIiwid2VicGFjazovLy8uL3NyYy9tYXRoL1JvdW5kQXdheUZyb21aZXJvLmpzPzM3ZDUiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL0NvbXBvc2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL2FycmF5L2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy91dGlscy9hcnJheS9GaW5kQ2xvc2VzdEluU29ydGVkLmpzIiwid2VicGFjazovLy8uL3NyYy91dGlscy9hcnJheS9HZXRSYW5kb21FbGVtZW50LmpzIiwid2VicGFjazovLy8uL3NyYy91dGlscy9hcnJheS9OdW1iZXJBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvYXJyYXkvTnVtYmVyQXJyYXlTdGVwLmpzIiwid2VicGFjazovLy8uL3NyYy91dGlscy9hcnJheS9SZW1vdmVSYW5kb21FbGVtZW50LmpzIiwid2VicGFjazovLy8uL3NyYy91dGlscy9hcnJheS9TcGxpY2VPbmUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL2FycmF5L1JvdGF0ZUxlZnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL2FycmF5L1JvdGF0ZVJpZ2h0LmpzIiwid2VicGFjazovLy8uL3NyYy91dGlscy9hcnJheS9TaHVmZmxlLmpzIiwid2VicGFjazovLy8uL3NyYy91dGlscy9hcnJheS9tYXRyaXgvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL2FycmF5L21hdHJpeC9DaGVja01hdHJpeC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvYXJyYXkvbWF0cml4L01hdHJpeFRvU3RyaW5nLmpzIiwid2VicGFjazovLy8uL3NyYy91dGlscy9zdHJpbmcvUGFkLmpzIiwid2VicGFjazovLy8uL3NyYy91dGlscy9hcnJheS9tYXRyaXgvUmV2ZXJzZUNvbHVtbnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL2FycmF5L21hdHJpeC9SZXZlcnNlUm93cy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvYXJyYXkvbWF0cml4L1JvdGF0ZTE4MC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvYXJyYXkvbWF0cml4L1JvdGF0ZU1hdHJpeC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvYXJyYXkvbWF0cml4L1RyYW5zcG9zZU1hdHJpeC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvYXJyYXkvbWF0cml4L1JvdGF0ZUxlZnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL2FycmF5L21hdHJpeC9Sb3RhdGVSaWdodC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvc3RyaW5nL2luZGV4LmpzIl0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsInRoaXMiLCJtb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiaW5zdGFsbGVkTW9kdWxlcyIsImlkIiwibG9hZGVkIiwiY2FsbCIsIm0iLCJjIiwicCIsIjAiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJuZXdPYmoiLCJrZXkiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJkZWZhdWx0IiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsInN0cmluZyIsImFycmF5IiwiQ29tcG9zZSIsIkJhbm5lciIsInVuZGVmaW5lZCIsIl9CYW5uZXIiLCJfQmFubmVyMiIsIl9Db21wb3NlIiwiX0NvbXBvc2UyIiwiX2FycmF5IiwiX3N0cmluZyIsIjE3MSIsInRpdGxlIiwidXJsIiwibXNnIiwiY29uY2F0IiwiX1ZlcnNpb24yIiwibWFqb3IiLCJtaW5vciIsImNvbnNvbGUiLCJsb2ciLCJhcHBseSIsIl9WZXJzaW9uIiwiMTcyIiwiVmVyc2lvbiIsInBvaW50IiwiYnVpbGQiLCJkYXRlIiwiNDMwIiwiUm91bmRBd2F5RnJvbVplcm8iLCJNYXRoIiwiY2VpbCIsImZsb29yIiwiODI3IiwicHJlZmFiIiwiaG9zdCIsImNyZWF0ZSIsImNvbXBvbmVudHMiLCJNYXAiLCJfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uIiwiX2RpZEl0ZXJhdG9yRXJyb3IiLCJfaXRlcmF0b3JFcnJvciIsIl9zdGVwIiwiX2l0ZXJhdG9yIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJuZXh0IiwiZG9uZSIsImNvbXBvbmVudCIsImluc3RhbmNlIiwiY29uc3RydWN0b3IiLCJzZXQiLCJlcnIiLCI4MjgiLCJtYXRyaXgiLCJTcGxpY2VPbmUiLCJTaHVmZmxlIiwiUm90YXRlUmlnaHQiLCJSb3RhdGVMZWZ0IiwiUmVtb3ZlUmFuZG9tRWxlbWVudCIsIk51bWJlckFycmF5U3RlcCIsIk51bWJlckFycmF5IiwiR2V0UmFuZG9tRWxlbWVudCIsIkZpbmRDbG9zZXN0SW5Tb3J0ZWQiLCJfRmluZENsb3Nlc3RJblNvcnRlZCIsIl9GaW5kQ2xvc2VzdEluU29ydGVkMiIsIl9HZXRSYW5kb21FbGVtZW50IiwiX0dldFJhbmRvbUVsZW1lbnQyIiwiX051bWJlckFycmF5IiwiX051bWJlckFycmF5MiIsIl9OdW1iZXJBcnJheVN0ZXAiLCJfTnVtYmVyQXJyYXlTdGVwMiIsIl9SZW1vdmVSYW5kb21FbGVtZW50IiwiX1JlbW92ZVJhbmRvbUVsZW1lbnQyIiwiX1JvdGF0ZUxlZnQiLCJfUm90YXRlTGVmdDIiLCJfUm90YXRlUmlnaHQiLCJfUm90YXRlUmlnaHQyIiwiX1NodWZmbGUiLCJfU2h1ZmZsZTIiLCJfU3BsaWNlT25lIiwiX1NwbGljZU9uZTIiLCJfbWF0cml4IiwiODI5IiwibGVuZ3RoIiwiTmFOIiwiaSIsImxvdyIsImhpZ2giLCJOdW1iZXIiLCJQT1NJVElWRV9JTkZJTklUWSIsIjgzMCIsInN0YXJ0IiwiYXJndW1lbnRzIiwicmFuZG9tSW5kZXgiLCJyYW5kb20iLCI4MzEiLCJlbmQiLCJyZXN1bHQiLCJwdXNoIiwiODMyIiwic3RlcCIsInRvdGFsIiwibWF4IiwiX1JvdW5kQXdheUZyb21aZXJvMiIsIl9Sb3VuZEF3YXlGcm9tWmVybyIsIjgzMyIsIjgzNCIsImluZGV4IiwibGVuIiwiaXRlbSIsIjgzNSIsImVsZW1lbnQiLCJzaGlmdCIsIjgzNiIsInBvcCIsInVuc2hpZnQiLCI4MzciLCJqIiwidGVtcCIsIjgzOCIsIlRyYW5zcG9zZU1hdHJpeCIsIlJvdGF0ZU1hdHJpeCIsIlJvdGF0ZTE4MCIsIlJldmVyc2VSb3dzIiwiUmV2ZXJzZUNvbHVtbnMiLCJNYXRyaXhUb1N0cmluZyIsIkNoZWNrTWF0cml4IiwiX0NoZWNrTWF0cml4IiwiX0NoZWNrTWF0cml4MiIsIl9NYXRyaXhUb1N0cmluZyIsIl9NYXRyaXhUb1N0cmluZzIiLCJfUmV2ZXJzZUNvbHVtbnMiLCJfUmV2ZXJzZUNvbHVtbnMyIiwiX1JldmVyc2VSb3dzIiwiX1JldmVyc2VSb3dzMiIsIl9Sb3RhdGUiLCJfUm90YXRlMiIsIl9Sb3RhdGVNYXRyaXgiLCJfUm90YXRlTWF0cml4MiIsIl9UcmFuc3Bvc2VNYXRyaXgiLCJfVHJhbnNwb3NlTWF0cml4MiIsIjgzOSIsIkFycmF5IiwiaXNBcnJheSIsInNpemUiLCJyb3ciLCI4NDAiLCJzdHIiLCJyIiwiY2VsbCIsInRvU3RyaW5nIiwiX1BhZDIiLCJfUGFkIiwiODQxIiwiUGFkIiwidmFsIiwiYW10IiwiY2giLCJhYnMiLCI4NDIiLCJyZXZlcnNlIiwiODQzIiwiODQ0IiwiODQ1IiwiZGlyZWN0aW9uIiwiODQ2Iiwic291cmNlUm93Q291bnQiLCJzb3VyY2VDb2xDb3VudCIsIjg0NyIsIjg0OCIsIjg0OSJdLCJtYXBwaW5ncyI6IkNBQUEsU0FBQUEsRUFBQUMsR0FDQSxnQkFBQUMsVUFBQSxnQkFBQUMsUUFDQUEsT0FBQUQsUUFBQUQsSUFDQSxrQkFBQUcsZ0JBQUFDLElBQ0FELE9BQUEsV0FBQUgsR0FDQSxnQkFBQUMsU0FDQUEsUUFBQSxNQUFBRCxLQUVBRCxFQUFBLE1BQUFBLEVBQUEsVUFBcUNBLEVBQUEsWUFBQUMsTUFDcENLLEtBQUEsV0FDRCxNQ0FnQixVQUFVQyxHQ04xQixRQUFBQyxHQUFBQyxHQUdBLEdBQUFDLEVBQUFELEdBQ0EsTUFBQUMsR0FBQUQsR0FBQVAsT0FHQSxJQUFBQyxHQUFBTyxFQUFBRCxJQUNBUCxXQUNBUyxHQUFBRixFQUNBRyxRQUFBLEVBVUEsT0FOQUwsR0FBQUUsR0FBQUksS0FBQVYsRUFBQUQsUUFBQUMsSUFBQUQsUUFBQU0sR0FHQUwsRUFBQVMsUUFBQSxFQUdBVCxFQUFBRCxRQXZCQSxHQUFBUSxLQXFDQSxPQVRBRixHQUFBTSxFQUFBUCxFQUdBQyxFQUFBTyxFQUFBTCxFQUdBRixFQUFBUSxFQUFBLEdBR0FSLEVBQUEsS0RnQk1TLEVBQ0EsU0FBU2QsRUFBUUQsRUFBU00sR0FFL0IsWUF1QkEsU0FBU1UsR0FBd0JDLEdBQU8sR0FBSUEsR0FBT0EsRUFBSUMsV0FBYyxNQUFPRCxFQUFjLElBQUlFLEtBQWEsSUFBVyxNQUFQRixFQUFlLElBQUssR0FBSUcsS0FBT0gsR0FBV0ksT0FBT0MsVUFBVUMsZUFBZVosS0FBS00sRUFBS0csS0FBTUQsRUFBT0MsR0FBT0gsRUFBSUcsR0FBZ0MsT0FBdEJELGNBQWlCRixFQUFZRSxFQUVsUSxRQUFTSyxHQUF1QlAsR0FBTyxNQUFPQSxJQUFPQSxFQUFJQyxXQUFhRCxHQUFRUSxVQUFTUixHQXZCdkZJLE9BQU9LLGVBQWUxQixFQUFTLGNBQzNCMkIsT0FBTyxJQUVYM0IsRUFBUTRCLE9BQVM1QixF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U0FBU2tCLEdBQXVCUCxHQUFPLE1BQU9BLElBQU9BLEVBQUlDLFdBQWFELEdBQVFRLFVBQVNSLEdBVHZGSSxPQUFPSyxlQUFlMUIsRUFBUyxjQUMzQjJCLE9BQU8sSUFFWDNCLEVBQVF1TCxJQUFNdkosTTRCMWpDZixJQUFBcUosR0FBQS9LLEVBQUEsSzVCOGpDSzhLLEVBQVE1SixFQUF1QjZKLEVBSW5DckwsRzRCL2pDR3VMLEk1QitqQ1dIIiwiZmlsZSI6InV0aWxzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoXCJ1dGlsc1wiLCBbXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJ1dGlsc1wiXSA9IGZhY3RvcnkoKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJsYXplclwiXSA9IHJvb3RbXCJsYXplclwiXSB8fCB7fSwgcm9vdFtcImxhemVyXCJdW1widXRpbHNcIl0gPSBmYWN0b3J5KCk7XG59KSh0aGlzLCBmdW5jdGlvbigpIHtcbnJldHVybiBcblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiB3ZWJwYWNrL3VuaXZlcnNhbE1vZHVsZURlZmluaXRpb25cbiAqKi8iLCIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShcInV0aWxzXCIsIFtdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcInV0aWxzXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcImxhemVyXCJdID0gcm9vdFtcImxhemVyXCJdIHx8IHt9LCByb290W1wibGF6ZXJcIl1bXCJ1dGlsc1wiXSA9IGZhY3RvcnkoKTtcbn0pKHRoaXMsIGZ1bmN0aW9uKCkge1xucmV0dXJuIC8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSlcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9LFxuLyoqKioqKi8gXHRcdFx0aWQ6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bG9hZGVkOiBmYWxzZVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqL1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLyoqKioqKi8gfSlcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAoe1xuXG4vKioqLyAwOlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0ZXhwb3J0cy5zdHJpbmcgPSBleHBvcnRzLmFycmF5ID0gZXhwb3J0cy5Db21wb3NlID0gZXhwb3J0cy5CYW5uZXIgPSB1bmRlZmluZWQ7XG5cdFxuXHR2YXIgX0Jhbm5lciA9IF9fd2VicGFja19yZXF1aXJlX18oMTcxKTtcblx0XG5cdHZhciBfQmFubmVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0Jhbm5lcik7XG5cdFxuXHR2YXIgX0NvbXBvc2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgyNyk7XG5cdFxuXHR2YXIgX0NvbXBvc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQ29tcG9zZSk7XG5cdFxuXHR2YXIgX2FycmF5ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4MjgpO1xuXHRcblx0dmFyIGFycmF5ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX2FycmF5KTtcblx0XG5cdHZhciBfc3RyaW5nID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NDkpO1xuXHRcblx0dmFyIHN0cmluZyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9zdHJpbmcpO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHRleHBvcnRzLkJhbm5lciA9IF9CYW5uZXIyLmRlZmF1bHQ7XG5cdGV4cG9ydHMuQ29tcG9zZSA9IF9Db21wb3NlMi5kZWZhdWx0O1xuXHRleHBvcnRzLmFycmF5ID0gYXJyYXk7XG5cdGV4cG9ydHMuc3RyaW5nID0gc3RyaW5nO1xuXG4vKioqLyB9LFxuXG4vKioqLyAxNzE6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRleHBvcnRzLmRlZmF1bHQgPSBCYW5uZXI7XG5cdFxuXHR2YXIgX1ZlcnNpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE3Mik7XG5cdFxuXHR2YXIgX1ZlcnNpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfVmVyc2lvbik7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0ZnVuY3Rpb24gQmFubmVyKHRpdGxlLCB1cmwpIHtcblx0XG5cdCAgICB2YXIgbXNnID0gJyVjICVjICVjICVjICVjICAnO1xuXHRcblx0ICAgIGlmICh0aXRsZSkge1xuXHQgICAgICAgIG1zZyA9IG1zZy5jb25jYXQodGl0bGUgKyAnIHBvd2VyZWQgYnkgJyk7XG5cdCAgICB9XG5cdFxuXHQgICAgbXNnID0gbXNnLmNvbmNhdCgnTGF6ZXIgdicgKyBfVmVyc2lvbjIuZGVmYXVsdC5tYWpvciArICcuJyArIF9WZXJzaW9uMi5kZWZhdWx0Lm1pbm9yKTtcblx0XG5cdCAgICBpZiAodXJsID09PSB1bmRlZmluZWQpIHtcblx0ICAgICAgICBtc2cgPSBtc2cuY29uY2F0KCcgLSBodHRwczovL2xhemVyanMuaW8nKTtcblx0ICAgIH0gZWxzZSBpZiAodXJsICE9PSAnJykge1xuXHQgICAgICAgIG1zZyA9IG1zZy5jb25jYXQoJyAtICcgKyB1cmwpO1xuXHQgICAgfVxuXHRcblx0ICAgIG1zZyA9IG1zZy5jb25jYXQoJyAgJyk7XG5cdFxuXHQgICAgY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgW21zZywgJ2JhY2tncm91bmQ6ICNmZjAwMDAnLCAnYmFja2dyb3VuZDogI2ZmZmYwMCcsICdiYWNrZ3JvdW5kOiAjMDBmZjAwJywgJ2JhY2tncm91bmQ6ICMwMGZmZmYnLCAnY29sb3I6ICNmZmZmZmY7IGJhY2tncm91bmQ6ICMwMDA7J10pO1xuXHR9XG5cbi8qKiovIH0sXG5cbi8qKiovIDE3Mjpcbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgICAgdmFsdWU6IHRydWVcblx0fSk7XG5cdHZhciBWZXJzaW9uID0ge1xuXHQgICAgbWFqb3I6IDEsXG5cdCAgICBtaW5vcjogMixcblx0ICAgIHBvaW50OiAzLFxuXHQgICAgYnVpbGQ6IDEsXG5cdCAgICBkYXRlOiAnMTJ0aCBKYW51YXJ5IDIwMTYnXG5cdH07XG5cdFxuXHRleHBvcnRzLmRlZmF1bHQgPSBWZXJzaW9uO1xuXG4vKioqLyB9LFxuXG4vKioqLyA0MzA6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgICAgdmFsdWU6IHRydWVcblx0fSk7XG5cdGV4cG9ydHMuZGVmYXVsdCA9IFJvdW5kQXdheUZyb21aZXJvO1xuXHRmdW5jdGlvbiBSb3VuZEF3YXlGcm9tWmVybyh2YWx1ZSkge1xuXHRcblx0ICAgIC8vIFwiT3Bwb3NpdGVcIiBvZiB0cnVuY2F0ZS5cblx0ICAgIHJldHVybiB2YWx1ZSA+IDAgPyBNYXRoLmNlaWwodmFsdWUpIDogTWF0aC5mbG9vcih2YWx1ZSk7XG5cdH1cblxuLyoqKi8gfSxcblxuLyoqKi8gODI3OlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRleHBvcnRzLmRlZmF1bHQgPSBDb21wb3NlO1xuXHQvLyAgQ29tcG9uZW50IGZhYnJpY2F0aW9uLlxuXHQvLyAgQmFzZWQgb24gdGhlIFVuaXR5IHN0eWxlIG9mIG9iamVjdCBjcmVhdGlvbi5cblx0Ly8gIEJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9kYXZlZHgvZmFicmljYW50IGJ5IERhdmUgQ2xheXRvblxuXHRcblx0ZnVuY3Rpb24gQ29tcG9zZShwcmVmYWIpIHtcblx0XG5cdCAgICB2YXIgaG9zdCA9IE9iamVjdC5jcmVhdGUocHJlZmFiKTtcblx0XG5cdCAgICBob3N0LmNvbXBvbmVudHMgPSBuZXcgTWFwKCk7XG5cdFxuXHQgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlO1xuXHQgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2U7XG5cdCAgICB2YXIgX2l0ZXJhdG9yRXJyb3IgPSB1bmRlZmluZWQ7XG5cdFxuXHQgICAgdHJ5IHtcblx0ICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3IgPSBwcmVmYWIuY29tcG9uZW50c1tTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSAoX3N0ZXAgPSBfaXRlcmF0b3IubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUpIHtcblx0ICAgICAgICAgICAgdmFyIGNvbXBvbmVudCA9IF9zdGVwLnZhbHVlO1xuXHRcblx0ICAgICAgICAgICAgdmFyIGluc3RhbmNlID0gdm9pZCAwO1xuXHRcblx0ICAgICAgICAgICAgaWYgKGNvbXBvbmVudC5wcm90b3R5cGUgJiYgY29tcG9uZW50LnByb3RvdHlwZS5jb25zdHJ1Y3Rvcikge1xuXHQgICAgICAgICAgICAgICAgaW5zdGFuY2UgPSBuZXcgY29tcG9uZW50KCk7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICBpbnN0YW5jZSA9IE9iamVjdC5jcmVhdGUoY29tcG9uZW50KTtcblx0ICAgICAgICAgICAgfVxuXHRcblx0ICAgICAgICAgICAgaW5zdGFuY2UuaG9zdCA9IGhvc3Q7XG5cdFxuXHQgICAgICAgICAgICBob3N0LmNvbXBvbmVudHMuc2V0KGNvbXBvbmVudCwgaW5zdGFuY2UpO1xuXHQgICAgICAgIH1cblx0ICAgIH0gY2F0Y2ggKGVycikge1xuXHQgICAgICAgIF9kaWRJdGVyYXRvckVycm9yID0gdHJ1ZTtcblx0ICAgICAgICBfaXRlcmF0b3JFcnJvciA9IGVycjtcblx0ICAgIH0gZmluYWxseSB7XG5cdCAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uICYmIF9pdGVyYXRvci5yZXR1cm4pIHtcblx0ICAgICAgICAgICAgICAgIF9pdGVyYXRvci5yZXR1cm4oKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0gZmluYWxseSB7XG5cdCAgICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcikge1xuXHQgICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9XG5cdFxuXHQgICAgcmV0dXJuIGhvc3Q7XG5cdH1cblxuLyoqKi8gfSxcblxuLyoqKi8gODI4OlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0ZXhwb3J0cy5tYXRyaXggPSBleHBvcnRzLlNwbGljZU9uZSA9IGV4cG9ydHMuU2h1ZmZsZSA9IGV4cG9ydHMuUm90YXRlUmlnaHQgPSBleHBvcnRzLlJvdGF0ZUxlZnQgPSBleHBvcnRzLlJlbW92ZVJhbmRvbUVsZW1lbnQgPSBleHBvcnRzLk51bWJlckFycmF5U3RlcCA9IGV4cG9ydHMuTnVtYmVyQXJyYXkgPSBleHBvcnRzLkdldFJhbmRvbUVsZW1lbnQgPSBleHBvcnRzLkZpbmRDbG9zZXN0SW5Tb3J0ZWQgPSB1bmRlZmluZWQ7XG5cdFxuXHR2YXIgX0ZpbmRDbG9zZXN0SW5Tb3J0ZWQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgyOSk7XG5cdFxuXHR2YXIgX0ZpbmRDbG9zZXN0SW5Tb3J0ZWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRmluZENsb3Nlc3RJblNvcnRlZCk7XG5cdFxuXHR2YXIgX0dldFJhbmRvbUVsZW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgzMCk7XG5cdFxuXHR2YXIgX0dldFJhbmRvbUVsZW1lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfR2V0UmFuZG9tRWxlbWVudCk7XG5cdFxuXHR2YXIgX051bWJlckFycmF5ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4MzEpO1xuXHRcblx0dmFyIF9OdW1iZXJBcnJheTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9OdW1iZXJBcnJheSk7XG5cdFxuXHR2YXIgX051bWJlckFycmF5U3RlcCA9IF9fd2VicGFja19yZXF1aXJlX18oODMyKTtcblx0XG5cdHZhciBfTnVtYmVyQXJyYXlTdGVwMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX051bWJlckFycmF5U3RlcCk7XG5cdFxuXHR2YXIgX1JlbW92ZVJhbmRvbUVsZW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgzMyk7XG5cdFxuXHR2YXIgX1JlbW92ZVJhbmRvbUVsZW1lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUmVtb3ZlUmFuZG9tRWxlbWVudCk7XG5cdFxuXHR2YXIgX1JvdGF0ZUxlZnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgzNSk7XG5cdFxuXHR2YXIgX1JvdGF0ZUxlZnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUm90YXRlTGVmdCk7XG5cdFxuXHR2YXIgX1JvdGF0ZVJpZ2h0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4MzYpO1xuXHRcblx0dmFyIF9Sb3RhdGVSaWdodDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Sb3RhdGVSaWdodCk7XG5cdFxuXHR2YXIgX1NodWZmbGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgzNyk7XG5cdFxuXHR2YXIgX1NodWZmbGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU2h1ZmZsZSk7XG5cdFxuXHR2YXIgX1NwbGljZU9uZSA9IF9fd2VicGFja19yZXF1aXJlX18oODM0KTtcblx0XG5cdHZhciBfU3BsaWNlT25lMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1NwbGljZU9uZSk7XG5cdFxuXHR2YXIgX21hdHJpeCA9IF9fd2VicGFja19yZXF1aXJlX18oODM4KTtcblx0XG5cdHZhciBtYXRyaXggPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfbWF0cml4KTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0ZXhwb3J0cy5GaW5kQ2xvc2VzdEluU29ydGVkID0gX0ZpbmRDbG9zZXN0SW5Tb3J0ZWQyLmRlZmF1bHQ7XG5cdGV4cG9ydHMuR2V0UmFuZG9tRWxlbWVudCA9IF9HZXRSYW5kb21FbGVtZW50Mi5kZWZhdWx0O1xuXHRleHBvcnRzLk51bWJlckFycmF5ID0gX051bWJlckFycmF5Mi5kZWZhdWx0O1xuXHRleHBvcnRzLk51bWJlckFycmF5U3RlcCA9IF9OdW1iZXJBcnJheVN0ZXAyLmRlZmF1bHQ7XG5cdGV4cG9ydHMuUmVtb3ZlUmFuZG9tRWxlbWVudCA9IF9SZW1vdmVSYW5kb21FbGVtZW50Mi5kZWZhdWx0O1xuXHRleHBvcnRzLlJvdGF0ZUxlZnQgPSBfUm90YXRlTGVmdDIuZGVmYXVsdDtcblx0ZXhwb3J0cy5Sb3RhdGVSaWdodCA9IF9Sb3RhdGVSaWdodDIuZGVmYXVsdDtcblx0ZXhwb3J0cy5TaHVmZmxlID0gX1NodWZmbGUyLmRlZmF1bHQ7XG5cdGV4cG9ydHMuU3BsaWNlT25lID0gX1NwbGljZU9uZTIuZGVmYXVsdDtcblx0ZXhwb3J0cy5tYXRyaXggPSBtYXRyaXg7XG5cbi8qKiovIH0sXG5cbi8qKiovIDgyOTpcbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0ZXhwb3J0cy5kZWZhdWx0ID0gRmluZENsb3Nlc3RJblNvcnRlZDtcblx0LyoqXHJcblx0KiBTbmFwcyBhIHZhbHVlIHRvIHRoZSBuZWFyZXN0IHZhbHVlIGluIGFuIGFycmF5LlxyXG5cdCogVGhlIHJlc3VsdCB3aWxsIGFsd2F5cyBiZSBpbiB0aGUgcmFuZ2UgYFtmaXJzdF92YWx1ZSwgbGFzdF92YWx1ZV1gLlxyXG5cdCpcclxuXHQqIEBtZXRob2RcclxuXHQqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSAtIFRoZSBzZWFyY2ggdmFsdWVcclxuXHQqIEBwYXJhbSB7bnVtYmVyW119IGFyciAtIFRoZSBpbnB1dCBhcnJheSB3aGljaCBfbXVzdF8gYmUgc29ydGVkLlxyXG5cdCogQHJldHVybiB7bnVtYmVyfSBUaGUgbmVhcmVzdCB2YWx1ZSBmb3VuZC5cclxuXHQqL1xuXHRmdW5jdGlvbiBGaW5kQ2xvc2VzdEluU29ydGVkKHZhbHVlLCBhcnJheSkge1xuXHRcblx0ICAgIGlmICghYXJyYXkubGVuZ3RoKSB7XG5cdCAgICAgICAgcmV0dXJuIE5hTjtcblx0ICAgIH0gZWxzZSBpZiAoYXJyYXkubGVuZ3RoID09PSAxIHx8IHZhbHVlIDwgYXJyYXlbMF0pIHtcblx0ICAgICAgICByZXR1cm4gYXJyYXlbMF07XG5cdCAgICB9XG5cdFxuXHQgICAgdmFyIGkgPSAxO1xuXHRcblx0ICAgIHdoaWxlIChhcnJheVtpXSA8IHZhbHVlKSB7XG5cdCAgICAgICAgaSsrO1xuXHQgICAgfVxuXHRcblx0ICAgIHZhciBsb3cgPSBhcnJheVtpIC0gMV07XG5cdCAgICB2YXIgaGlnaCA9IGkgPCBhcnJheS5sZW5ndGggPyBhcnJheVtpXSA6IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcblx0XG5cdCAgICByZXR1cm4gaGlnaCAtIHZhbHVlIDw9IHZhbHVlIC0gbG93ID8gaGlnaCA6IGxvdztcblx0fVxuXG4vKioqLyB9LFxuXG4vKioqLyA4MzA6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgICAgdmFsdWU6IHRydWVcblx0fSk7XG5cdGV4cG9ydHMuZGVmYXVsdCA9IEdldFJhbmRvbUVsZW1lbnQ7XG5cdC8qKlxyXG5cdCogRmV0Y2ggYSByYW5kb20gZW50cnkgZnJvbSB0aGUgZ2l2ZW4gYXJyYXkuXHJcblx0KlxyXG5cdCogV2lsbCByZXR1cm4gbnVsbCBpZiB0aGVyZSBhcmUgbm8gYXJyYXkgaXRlbXMgdGhhdCBmYWxsIHdpdGhpbiB0aGUgc3BlY2lmaWVkIHJhbmdlXHJcblx0KiBvciBpZiB0aGVyZSBpcyBubyBpdGVtIGZvciB0aGUgcmFuZG9tbHkgY2hvc2VuIGluZGV4LlxyXG5cdCpcclxuXHQqIEBtZXRob2RcclxuXHQqIEBwYXJhbSB7YW55W119IG9iamVjdHMgLSBBbiBhcnJheSBvZiBvYmplY3RzLlxyXG5cdCogQHBhcmFtIHtpbnRlZ2VyfSBzdGFydEluZGV4IC0gT3B0aW9uYWwgb2Zmc2V0IG9mZiB0aGUgZnJvbnQgb2YgdGhlIGFycmF5LiBEZWZhdWx0IHZhbHVlIGlzIDAsIG9yIHRoZSBiZWdpbm5pbmcgb2YgdGhlIGFycmF5LlxyXG5cdCogQHBhcmFtIHtpbnRlZ2VyfSBsZW5ndGggLSBPcHRpb25hbCByZXN0cmljdGlvbiBvbiB0aGUgbnVtYmVyIG9mIHZhbHVlcyB5b3Ugd2FudCB0byByYW5kb21seSBzZWxlY3QgZnJvbS5cclxuXHQqIEByZXR1cm4ge29iamVjdH0gVGhlIHJhbmRvbSBvYmplY3QgdGhhdCB3YXMgc2VsZWN0ZWQuXHJcblx0Ki9cblx0XG5cdGZ1bmN0aW9uIEdldFJhbmRvbUVsZW1lbnQoYXJyYXkpIHtcblx0ICAgIHZhciBzdGFydCA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMSB8fCBhcmd1bWVudHNbMV0gPT09IHVuZGVmaW5lZCA/IDAgOiBhcmd1bWVudHNbMV07XG5cdCAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCA8PSAyIHx8IGFyZ3VtZW50c1syXSA9PT0gdW5kZWZpbmVkID8gYXJyYXkubGVuZ3RoIDogYXJndW1lbnRzWzJdO1xuXHRcblx0XG5cdCAgICB2YXIgcmFuZG9tSW5kZXggPSBzdGFydCArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGxlbmd0aCk7XG5cdFxuXHQgICAgcmV0dXJuIGFycmF5W3JhbmRvbUluZGV4XSA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IGFycmF5W3JhbmRvbUluZGV4XTtcblx0fVxuXG4vKioqLyB9LFxuXG4vKioqLyA4MzE6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgICAgdmFsdWU6IHRydWVcblx0fSk7XG5cdGV4cG9ydHMuZGVmYXVsdCA9IE51bWJlckFycmF5O1xuXHQvKipcclxuXHQqIENyZWF0ZSBhbiBhcnJheSByZXByZXNlbnRpbmcgdGhlIGluY2x1c2l2ZSByYW5nZSBvZiBudW1iZXJzICh1c3VhbGx5IGludGVnZXJzKSBpbiBgW3N0YXJ0LCBlbmRdYC5cclxuXHQqIFRoaXMgaXMgZXF1aXZhbGVudCB0byBgbnVtYmVyQXJyYXlTdGVwKHN0YXJ0LCBlbmQsIDEpYC5cclxuXHQqXHJcblx0KiBAbWV0aG9kIFBoYXNlci5BcnJheVV0aWxzI251bWJlckFycmF5XHJcblx0KiBAcGFyYW0ge251bWJlcn0gc3RhcnQgLSBUaGUgbWluaW11bSB2YWx1ZSB0aGUgYXJyYXkgc3RhcnRzIHdpdGguXHJcblx0KiBAcGFyYW0ge251bWJlcn0gZW5kIC0gVGhlIG1heGltdW0gdmFsdWUgdGhlIGFycmF5IGNvbnRhaW5zLlxyXG5cdCogQHJldHVybiB7bnVtYmVyW119IFRoZSBhcnJheSBvZiBudW1iZXIgdmFsdWVzLlxyXG5cdCovXG5cdGZ1bmN0aW9uIE51bWJlckFycmF5KHN0YXJ0LCBlbmQpIHtcblx0XG5cdCAgICBpZiAoc3RhcnQgPiBlbmQpIHtcblx0ICAgICAgICByZXR1cm47XG5cdCAgICB9XG5cdFxuXHQgICAgdmFyIHJlc3VsdCA9IFtdO1xuXHRcblx0ICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8PSBlbmQ7IGkrKykge1xuXHQgICAgICAgIHJlc3VsdC5wdXNoKGkpO1xuXHQgICAgfVxuXHRcblx0ICAgIHJldHVybiByZXN1bHQ7XG5cdH1cblxuLyoqKi8gfSxcblxuLyoqKi8gODMyOlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0ZXhwb3J0cy5kZWZhdWx0ID0gTnVtYmVyQXJyYXlTdGVwO1xuXHRcblx0dmFyIF9Sb3VuZEF3YXlGcm9tWmVybyA9IF9fd2VicGFja19yZXF1aXJlX18oNDMwKTtcblx0XG5cdHZhciBfUm91bmRBd2F5RnJvbVplcm8yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUm91bmRBd2F5RnJvbVplcm8pO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdC8qKlxyXG5cdCogQ3JlYXRlIGFuIGFycmF5IG9mIG51bWJlcnMgKHBvc2l0aXZlIGFuZC9vciBuZWdhdGl2ZSkgcHJvZ3Jlc3NpbmcgZnJvbSBgc3RhcnRgXHJcblx0KiB1cCB0byBidXQgbm90IGluY2x1ZGluZyBgZW5kYCBieSBhZHZhbmNpbmcgYnkgYHN0ZXBgLlxyXG5cdCpcclxuXHQqIElmIGBzdGFydGAgaXMgbGVzcyB0aGFuIGBlbmRgIGEgemVyby1sZW5ndGggcmFuZ2UgaXMgY3JlYXRlZCB1bmxlc3MgYSBuZWdhdGl2ZSBgc3RlcGAgaXMgc3BlY2lmaWVkLlxyXG5cdCpcclxuXHQqIENlcnRhaW4gdmFsdWVzIGZvciBgc3RhcnRgIGFuZCBgZW5kYCAoZWcuIE5hTi91bmRlZmluZWQvbnVsbCkgYXJlIGN1cnJlbnRseSBjb2VyY2VkIHRvIDA7XHJcblx0KiBmb3IgZm9yd2FyZCBjb21wYXRpYmlsaXR5IG1ha2Ugc3VyZSB0byBwYXNzIGluIGFjdHVhbCBudW1iZXJzLlxyXG5cdCpcclxuXHQqIEBtZXRob2QgUGhhc2VyLkFycmF5VXRpbHMjbnVtYmVyQXJyYXlTdGVwXHJcblx0KiBAcGFyYW0ge251bWJlcn0gc3RhcnQgLSBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxyXG5cdCogQHBhcmFtIHtudW1iZXJ9IFtlbmRdIC0gVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXHJcblx0KiBAcGFyYW0ge251bWJlcn0gW3N0ZXA9MV0gLSBUaGUgdmFsdWUgdG8gaW5jcmVtZW50IG9yIGRlY3JlbWVudCBieS5cclxuXHQqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIG51bWJlcnMuXHJcblx0KiBAZXhhbXBsZVxyXG5cdCogTnVtYmVyQXJyYXlTdGVwKDQpO1xyXG5cdCogLy8gPT4gWzAsIDEsIDIsIDNdXHJcblx0KlxyXG5cdCogTnVtYmVyQXJyYXlTdGVwKDEsIDUpO1xyXG5cdCogLy8gPT4gWzEsIDIsIDMsIDRdXHJcblx0KlxyXG5cdCogTnVtYmVyQXJyYXlTdGVwKDAsIDIwLCA1KTtcclxuXHQqIC8vID0+IFswLCA1LCAxMCwgMTVdXHJcblx0KlxyXG5cdCogTnVtYmVyQXJyYXlTdGVwKDAsIC00LCAtMSk7XHJcblx0KiAvLyA9PiBbMCwgLTEsIC0yLCAtM11cclxuXHQqXHJcblx0KiBOdW1iZXJBcnJheVN0ZXAoMSwgNCwgMCk7XHJcblx0KiAvLyA9PiBbMSwgMSwgMV1cclxuXHQqXHJcblx0KiBOdW1iZXJBcnJheVN0ZXAoMCk7XHJcblx0KiAvLyA9PiBbXVxyXG5cdCovXG5cdGZ1bmN0aW9uIE51bWJlckFycmF5U3RlcCgpIHtcblx0ICAgIHZhciBzdGFydCA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IDAgOiBhcmd1bWVudHNbMF07XG5cdCAgICB2YXIgZW5kID0gYXJndW1lbnRzLmxlbmd0aCA8PSAxIHx8IGFyZ3VtZW50c1sxXSA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IGFyZ3VtZW50c1sxXTtcblx0ICAgIHZhciBzdGVwID0gYXJndW1lbnRzLmxlbmd0aCA8PSAyIHx8IGFyZ3VtZW50c1syXSA9PT0gdW5kZWZpbmVkID8gMSA6IGFyZ3VtZW50c1syXTtcblx0XG5cdFxuXHQgICAgaWYgKGVuZCA9PT0gbnVsbCkge1xuXHQgICAgICAgIGVuZCA9IHN0YXJ0O1xuXHQgICAgICAgIHN0YXJ0ID0gMDtcblx0ICAgIH1cblx0XG5cdCAgICB2YXIgcmVzdWx0ID0gW107XG5cdFxuXHQgICAgdmFyIHRvdGFsID0gTWF0aC5tYXgoKDAsIF9Sb3VuZEF3YXlGcm9tWmVybzIuZGVmYXVsdCkoKGVuZCAtIHN0YXJ0KSAvIChzdGVwIHx8IDEpKSwgMCk7XG5cdFxuXHQgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b3RhbDsgaSsrKSB7XG5cdCAgICAgICAgcmVzdWx0LnB1c2goc3RhcnQpO1xuXHQgICAgICAgIHN0YXJ0ICs9IHN0ZXA7XG5cdCAgICB9XG5cdFxuXHQgICAgcmV0dXJuIHJlc3VsdDtcblx0fVxuXG4vKioqLyB9LFxuXG4vKioqLyA4MzM6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRleHBvcnRzLmRlZmF1bHQgPSBSZW1vdmVSYW5kb21FbGVtZW50O1xuXHRcblx0dmFyIF9TcGxpY2VPbmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgzNCk7XG5cdFxuXHR2YXIgX1NwbGljZU9uZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TcGxpY2VPbmUpO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdC8qKlxyXG5cdCogUmVtb3ZlcyBhIHJhbmRvbSBvYmplY3QgZnJvbSB0aGUgZ2l2ZW4gYXJyYXkgYW5kIHJldHVybnMgaXQuXHJcblx0KlxyXG5cdCogV2lsbCByZXR1cm4gbnVsbCBpZiB0aGVyZSBhcmUgbm8gYXJyYXkgaXRlbXMgdGhhdCBmYWxsIHdpdGhpbiB0aGUgc3BlY2lmaWVkIHJhbmdlXHJcblx0KiBvciBpZiB0aGVyZSBpcyBubyBpdGVtIGZvciB0aGUgcmFuZG9tbHkgY2hvc2VuIGluZGV4LlxyXG5cdCpcclxuXHQqIEBtZXRob2RcclxuXHQqIEBwYXJhbSB7YW55W119IG9iamVjdHMgLSBBbiBhcnJheSBvZiBvYmplY3RzLlxyXG5cdCogQHBhcmFtIHtpbnRlZ2VyfSBzdGFydEluZGV4IC0gT3B0aW9uYWwgb2Zmc2V0IG9mZiB0aGUgZnJvbnQgb2YgdGhlIGFycmF5LiBEZWZhdWx0IHZhbHVlIGlzIDAsIG9yIHRoZSBiZWdpbm5pbmcgb2YgdGhlIGFycmF5LlxyXG5cdCogQHBhcmFtIHtpbnRlZ2VyfSBsZW5ndGggLSBPcHRpb25hbCByZXN0cmljdGlvbiBvbiB0aGUgbnVtYmVyIG9mIHZhbHVlcyB5b3Ugd2FudCB0byByYW5kb21seSBzZWxlY3QgZnJvbS5cclxuXHQqIEByZXR1cm4ge29iamVjdH0gVGhlIHJhbmRvbSBvYmplY3QgdGhhdCB3YXMgcmVtb3ZlZC5cclxuXHQqL1xuXHRcblx0ZnVuY3Rpb24gUmVtb3ZlUmFuZG9tRWxlbWVudChhcnJheSkge1xuXHQgICAgdmFyIHN0YXJ0ID0gYXJndW1lbnRzLmxlbmd0aCA8PSAxIHx8IGFyZ3VtZW50c1sxXSA9PT0gdW5kZWZpbmVkID8gMCA6IGFyZ3VtZW50c1sxXTtcblx0ICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoIDw9IDIgfHwgYXJndW1lbnRzWzJdID09PSB1bmRlZmluZWQgPyBhcnJheS5sZW5ndGggOiBhcmd1bWVudHNbMl07XG5cdFxuXHRcblx0ICAgIHZhciByYW5kb21JbmRleCA9IHN0YXJ0ICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogbGVuZ3RoKTtcblx0XG5cdCAgICByZXR1cm4gKDAsIF9TcGxpY2VPbmUyLmRlZmF1bHQpKGFycmF5LCByYW5kb21JbmRleCk7XG5cdH1cblxuLyoqKi8gfSxcblxuLyoqKi8gODM0OlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRleHBvcnRzLmRlZmF1bHQgPSBTcGxpY2VPbmU7XG5cdC8vICBSZW1vdmVzIGEgc2luZ2xlIGl0ZW0gZnJvbSBhbiBhcnJheSBhbmQgcmV0dXJucyBpdFxuXHQvLyAgd2l0aG91dCBjcmVhdGluZyBnYyAobGlrZSB0aGUgbmF0aXZlIHNwbGljZSBkb2VzKVxuXHQvLyAgQmFzZWQgb24gY29kZSBieSBNaWtlIFJlaW5zdGVpblxuXHRcblx0ZnVuY3Rpb24gU3BsaWNlT25lKGFycmF5LCBpbmRleCkge1xuXHRcblx0ICAgIGlmIChpbmRleCA+PSBhcnJheS5sZW5ndGgpIHtcblx0ICAgICAgICByZXR1cm47XG5cdCAgICB9XG5cdFxuXHQgICAgdmFyIGxlbiA9IGFycmF5Lmxlbmd0aCAtIDE7XG5cdFxuXHQgICAgdmFyIGl0ZW0gPSBhcnJheVtpbmRleF07XG5cdFxuXHQgICAgZm9yICh2YXIgaSA9IGluZGV4OyBpIDwgbGVuOyBpKyspIHtcblx0ICAgICAgICBhcnJheVtpXSA9IGFycmF5W2kgKyAxXTtcblx0ICAgIH1cblx0XG5cdCAgICBhcnJheS5sZW5ndGggPSBsZW47XG5cdFxuXHQgICAgcmV0dXJuIGl0ZW07XG5cdH1cblxuLyoqKi8gfSxcblxuLyoqKi8gODM1OlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRleHBvcnRzLmRlZmF1bHQgPSBSb3RhdGVMZWZ0O1xuXHQvKipcclxuXHQqIE1vdmVzIHRoZSBlbGVtZW50IGF0IHRoZSBzdGFydCBvZiB0aGUgYXJyYXkgdG8gdGhlIGVuZCwgc2hpZnRpbmcgYWxsIGl0ZW1zIGluIHRoZSBwcm9jZXNzLlxyXG5cdCogVGhlIFwicm90YXRpb25cIiBoYXBwZW5zIHRvIHRoZSBsZWZ0LlxyXG5cdCpcclxuXHQqIEBtZXRob2QgUGhhc2VyLkFycmF5VXRpbHMucm90YXRlXHJcblx0KiBAcGFyYW0ge2FueVtdfSBhcnJheSAtIFRoZSBhcnJheSB0byBzaGlmdC9yb3RhdGUuIFRoZSBhcnJheSBpcyBtb2RpZmllZC5cclxuXHQqIEBwYXJhbSB7aW50ZWdlcn0gW3RvdGFsPTFdIC0gVGhlIG51bWJlciBvZiB0aW1lcyB0byBzaGlmdCB0aGUgYXJyYXkuIE9ubHkgdGhlIG1vc3QgcmVjZW50bHkgc2hpZnRlZCBlbGVtZW50IGlzIHJldHVybmVkLlxyXG5cdCogQHJldHVybiB7YW55fSBUaGUgc2hpZnRlZCB2YWx1ZS5cclxuXHQqL1xuXHRmdW5jdGlvbiBSb3RhdGVMZWZ0KGFycmF5KSB7XG5cdCAgICB2YXIgdG90YWwgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDEgfHwgYXJndW1lbnRzWzFdID09PSB1bmRlZmluZWQgPyAxIDogYXJndW1lbnRzWzFdO1xuXHRcblx0XG5cdCAgICB2YXIgZWxlbWVudCA9IG51bGw7XG5cdFxuXHQgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b3RhbDsgaSsrKSB7XG5cdCAgICAgICAgZWxlbWVudCA9IGFycmF5LnNoaWZ0KCk7XG5cdCAgICAgICAgYXJyYXkucHVzaChlbGVtZW50KTtcblx0ICAgIH1cblx0XG5cdCAgICByZXR1cm4gZWxlbWVudDtcblx0fVxuXG4vKioqLyB9LFxuXG4vKioqLyA4MzY6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgICAgdmFsdWU6IHRydWVcblx0fSk7XG5cdGV4cG9ydHMuZGVmYXVsdCA9IFJvdGF0ZVJpZ2h0O1xuXHQvKipcclxuXHQqIE1vdmVzIHRoZSBlbGVtZW50IGF0IHRoZSBlbmQgb2YgdGhlIGFycmF5IHRvIHRoZSBzdGFydCwgc2hpZnRpbmcgYWxsIGl0ZW1zIGluIHRoZSBwcm9jZXNzLlxyXG5cdCogVGhlIFwicm90YXRpb25cIiBoYXBwZW5zIHRvIHRoZSByaWdodC5cclxuXHQqXHJcblx0KiBAcGFyYW0ge2FueVtdfSBhcnJheSAtIFRoZSBhcnJheSB0byBzaGlmdC9yb3RhdGUuIFRoZSBhcnJheSBpcyBtb2RpZmllZC5cclxuXHQqIEBwYXJhbSB7aW50ZWdlcn0gW3RvdGFsPTFdIC0gVGhlIG51bWJlciBvZiB0aW1lcyB0byBzaGlmdCB0aGUgYXJyYXkuIE9ubHkgdGhlIG1vc3QgcmVjZW50bHkgc2hpZnRlZCBlbGVtZW50IGlzIHJldHVybmVkLlxyXG5cdCogQHJldHVybiB7YW55fSBUaGUgc2hpZnRlZCB2YWx1ZS5cclxuXHQqL1xuXHRmdW5jdGlvbiBSb3RhdGVSaWdodChhcnJheSkge1xuXHQgICAgdmFyIHRvdGFsID0gYXJndW1lbnRzLmxlbmd0aCA8PSAxIHx8IGFyZ3VtZW50c1sxXSA9PT0gdW5kZWZpbmVkID8gMSA6IGFyZ3VtZW50c1sxXTtcblx0XG5cdFxuXHQgICAgdmFyIGVsZW1lbnQgPSBudWxsO1xuXHRcblx0ICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG90YWw7IGkrKykge1xuXHQgICAgICAgIGVsZW1lbnQgPSBhcnJheS5wb3AoKTtcblx0ICAgICAgICBhcnJheS51bnNoaWZ0KGVsZW1lbnQpO1xuXHQgICAgfVxuXHRcblx0ICAgIHJldHVybiBlbGVtZW50O1xuXHR9XG5cbi8qKiovIH0sXG5cbi8qKiovIDgzNzpcbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0ZXhwb3J0cy5kZWZhdWx0ID0gU2h1ZmZsZTtcblx0LyoqXHJcblx0KiBBIHN0YW5kYXJkIEZpc2hlci1ZYXRlcyBBcnJheSBzaHVmZmxlIGltcGxlbWVudGF0aW9uIHdoaWNoIG1vZGlmaWVzIHRoZSBhcnJheSBpbiBwbGFjZS5cclxuXHQqXHJcblx0KiBAbWV0aG9kXHJcblx0KiBAcGFyYW0ge2FueVtdfSBhcnJheSAtIFRoZSBhcnJheSB0byBzaHVmZmxlLlxyXG5cdCogQHJldHVybiB7YW55W119IFRoZSBvcmlnaW5hbCBhcnJheSwgbm93IHNodWZmbGVkLlxyXG5cdCovXG5cdGZ1bmN0aW9uIFNodWZmbGUoYXJyYXkpIHtcblx0XG5cdCAgICBmb3IgKHZhciBpID0gYXJyYXkubGVuZ3RoIC0gMTsgaSA+IDA7IGktLSkge1xuXHQgICAgICAgIHZhciBqID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKGkgKyAxKSk7XG5cdCAgICAgICAgdmFyIHRlbXAgPSBhcnJheVtpXTtcblx0ICAgICAgICBhcnJheVtpXSA9IGFycmF5W2pdO1xuXHQgICAgICAgIGFycmF5W2pdID0gdGVtcDtcblx0ICAgIH1cblx0XG5cdCAgICByZXR1cm4gYXJyYXk7XG5cdH1cblxuLyoqKi8gfSxcblxuLyoqKi8gODM4OlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0ZXhwb3J0cy5UcmFuc3Bvc2VNYXRyaXggPSBleHBvcnRzLlJvdGF0ZVJpZ2h0ID0gZXhwb3J0cy5Sb3RhdGVNYXRyaXggPSBleHBvcnRzLlJvdGF0ZUxlZnQgPSBleHBvcnRzLlJvdGF0ZTE4MCA9IGV4cG9ydHMuUmV2ZXJzZVJvd3MgPSBleHBvcnRzLlJldmVyc2VDb2x1bW5zID0gZXhwb3J0cy5NYXRyaXhUb1N0cmluZyA9IGV4cG9ydHMuQ2hlY2tNYXRyaXggPSB1bmRlZmluZWQ7XG5cdFxuXHR2YXIgX0NoZWNrTWF0cml4ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4MzkpO1xuXHRcblx0dmFyIF9DaGVja01hdHJpeDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9DaGVja01hdHJpeCk7XG5cdFxuXHR2YXIgX01hdHJpeFRvU3RyaW5nID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NDApO1xuXHRcblx0dmFyIF9NYXRyaXhUb1N0cmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9NYXRyaXhUb1N0cmluZyk7XG5cdFxuXHR2YXIgX1JldmVyc2VDb2x1bW5zID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NDIpO1xuXHRcblx0dmFyIF9SZXZlcnNlQ29sdW1uczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9SZXZlcnNlQ29sdW1ucyk7XG5cdFxuXHR2YXIgX1JldmVyc2VSb3dzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NDMpO1xuXHRcblx0dmFyIF9SZXZlcnNlUm93czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9SZXZlcnNlUm93cyk7XG5cdFxuXHR2YXIgX1JvdGF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oODQ0KTtcblx0XG5cdHZhciBfUm90YXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1JvdGF0ZSk7XG5cdFxuXHR2YXIgX1JvdGF0ZUxlZnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg0Nyk7XG5cdFxuXHR2YXIgX1JvdGF0ZUxlZnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUm90YXRlTGVmdCk7XG5cdFxuXHR2YXIgX1JvdGF0ZU1hdHJpeCA9IF9fd2VicGFja19yZXF1aXJlX18oODQ1KTtcblx0XG5cdHZhciBfUm90YXRlTWF0cml4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1JvdGF0ZU1hdHJpeCk7XG5cdFxuXHR2YXIgX1JvdGF0ZVJpZ2h0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NDgpO1xuXHRcblx0dmFyIF9Sb3RhdGVSaWdodDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Sb3RhdGVSaWdodCk7XG5cdFxuXHR2YXIgX1RyYW5zcG9zZU1hdHJpeCA9IF9fd2VicGFja19yZXF1aXJlX18oODQ2KTtcblx0XG5cdHZhciBfVHJhbnNwb3NlTWF0cml4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1RyYW5zcG9zZU1hdHJpeCk7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0ZXhwb3J0cy5DaGVja01hdHJpeCA9IF9DaGVja01hdHJpeDIuZGVmYXVsdDtcblx0ZXhwb3J0cy5NYXRyaXhUb1N0cmluZyA9IF9NYXRyaXhUb1N0cmluZzIuZGVmYXVsdDtcblx0ZXhwb3J0cy5SZXZlcnNlQ29sdW1ucyA9IF9SZXZlcnNlQ29sdW1uczIuZGVmYXVsdDtcblx0ZXhwb3J0cy5SZXZlcnNlUm93cyA9IF9SZXZlcnNlUm93czIuZGVmYXVsdDtcblx0ZXhwb3J0cy5Sb3RhdGUxODAgPSBfUm90YXRlMi5kZWZhdWx0O1xuXHRleHBvcnRzLlJvdGF0ZUxlZnQgPSBfUm90YXRlTGVmdDIuZGVmYXVsdDtcblx0ZXhwb3J0cy5Sb3RhdGVNYXRyaXggPSBfUm90YXRlTWF0cml4Mi5kZWZhdWx0O1xuXHRleHBvcnRzLlJvdGF0ZVJpZ2h0ID0gX1JvdGF0ZVJpZ2h0Mi5kZWZhdWx0O1xuXHRleHBvcnRzLlRyYW5zcG9zZU1hdHJpeCA9IF9UcmFuc3Bvc2VNYXRyaXgyLmRlZmF1bHQ7XG5cbi8qKiovIH0sXG5cbi8qKiovIDgzOTpcbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0ZXhwb3J0cy5kZWZhdWx0ID0gQ2hlY2tNYXRyaXg7XG5cdGZ1bmN0aW9uIENoZWNrTWF0cml4KG1hdHJpeCkge1xuXHRcblx0ICAgIGlmICghQXJyYXkuaXNBcnJheShtYXRyaXgpIHx8IG1hdHJpeC5sZW5ndGggPCAyIHx8ICFBcnJheS5pc0FycmF5KG1hdHJpeFswXSkpIHtcblx0ICAgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICB9XG5cdFxuXHQgICAgLy8gIEhvdyBsb25nIGlzIHRoZSBmaXJzdCByb3c/XG5cdCAgICB2YXIgc2l6ZSA9IG1hdHJpeFswXS5sZW5ndGg7XG5cdFxuXHQgICAgLy8gIFZhbGlkYXRlIHRoZSByZXN0IG9mIHRoZSByb3dzIGFyZSB0aGUgc2FtZSBsZW5ndGhcblx0ICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZTtcblx0ICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvciA9IGZhbHNlO1xuXHQgICAgdmFyIF9pdGVyYXRvckVycm9yID0gdW5kZWZpbmVkO1xuXHRcblx0ICAgIHRyeSB7XG5cdCAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yID0gbWF0cml4W1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IChfc3RlcCA9IF9pdGVyYXRvci5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZSkge1xuXHQgICAgICAgICAgICB2YXIgcm93ID0gX3N0ZXAudmFsdWU7XG5cdFxuXHQgICAgICAgICAgICBpZiAocm93Lmxlbmd0aCAhPT0gc2l6ZSkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfSBjYXRjaCAoZXJyKSB7XG5cdCAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlO1xuXHQgICAgICAgIF9pdGVyYXRvckVycm9yID0gZXJyO1xuXHQgICAgfSBmaW5hbGx5IHtcblx0ICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybikge1xuXHQgICAgICAgICAgICAgICAgX2l0ZXJhdG9yLnJldHVybigpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSBmaW5hbGx5IHtcblx0ICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yKSB7XG5cdCAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH1cblx0XG5cdCAgICByZXR1cm4gdHJ1ZTtcblx0fVxuXG4vKioqLyB9LFxuXG4vKioqLyA4NDA6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRleHBvcnRzLmRlZmF1bHQgPSBNYXRyaXhUb1N0cmluZztcblx0XG5cdHZhciBfUGFkID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NDEpO1xuXHRcblx0dmFyIF9QYWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUGFkKTtcblx0XG5cdHZhciBfQ2hlY2tNYXRyaXggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgzOSk7XG5cdFxuXHR2YXIgX0NoZWNrTWF0cml4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0NoZWNrTWF0cml4KTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHQvLyAgR2VuZXJhdGVzIGEgc3RyaW5nICh3aGljaCB5b3UgY2FuIHBhc3MgdG8gY29uc29sZS5sb2cpIGZyb20gdGhlIGdpdmVuXG5cdC8vICBBcnJheSBNYXRyaXguXG5cdFxuXHRmdW5jdGlvbiBNYXRyaXhUb1N0cmluZyhtYXRyaXgpIHtcblx0XG5cdCAgICB2YXIgc3RyID0gJyc7XG5cdFxuXHQgICAgaWYgKCEoMCwgX0NoZWNrTWF0cml4Mi5kZWZhdWx0KShtYXRyaXgpKSB7XG5cdCAgICAgICAgcmV0dXJuIHN0cjtcblx0ICAgIH1cblx0XG5cdCAgICBmb3IgKHZhciByID0gMDsgciA8IG1hdHJpeC5sZW5ndGg7IHIrKykge1xuXHQgICAgICAgIGZvciAodmFyIGMgPSAwOyBjIDwgbWF0cml4W3JdLmxlbmd0aDsgYysrKSB7XG5cdCAgICAgICAgICAgIHZhciBjZWxsID0gbWF0cml4W3JdW2NdLnRvU3RyaW5nKCk7XG5cdFxuXHQgICAgICAgICAgICBpZiAoY2VsbCAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0ICAgICAgICAgICAgICAgIHN0ciArPSAoMCwgX1BhZDIuZGVmYXVsdCkoY2VsbCwgMik7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICBzdHIgKz0gJz8nO1xuXHQgICAgICAgICAgICB9XG5cdFxuXHQgICAgICAgICAgICBpZiAoYyA8IG1hdHJpeFtyXS5sZW5ndGggLSAxKSB7XG5cdCAgICAgICAgICAgICAgICBzdHIgKz0gJyB8Jztcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgaWYgKHIgPCBtYXRyaXgubGVuZ3RoIC0gMSkge1xuXHQgICAgICAgICAgICBzdHIgKz0gJ1xcbic7XG5cdFxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1hdHJpeFtyXS5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgc3RyICs9ICctLS0nO1xuXHRcblx0ICAgICAgICAgICAgICAgIGlmIChpIDwgbWF0cml4W3JdLmxlbmd0aCAtIDEpIHtcblx0ICAgICAgICAgICAgICAgICAgICBzdHIgKz0gJysnO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdFxuXHQgICAgICAgICAgICBzdHIgKz0gJ1xcbic7XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHRcblx0ICAgIHJldHVybiBzdHI7XG5cdH1cblxuLyoqKi8gfSxcblxuLyoqKi8gODQxOlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0ZXhwb3J0cy5kZWZhdWx0ID0gUGFkO1xuXHQvLyAgUGFkIG91dCB0aGUgZ2l2ZW4gc3RyaW5nICh2YWwpIHRvIHRoZSAnYW10JyBudW1iZXIgb2YgY2hhcmFjdGVycyB1c2luZyAnY2gnIGFzIHRoZSBleHRyYSBjaGFyYWN0ZXJzXG5cdC8vICBpZiB0aGUgc3RyaW5nIG5lZWRzIHBhZGRpbmdcblx0XG5cdGZ1bmN0aW9uIFBhZCh2YWwsIGFtdCkge1xuXHQgICAgdmFyIGNoID0gYXJndW1lbnRzLmxlbmd0aCA8PSAyIHx8IGFyZ3VtZW50c1syXSA9PT0gdW5kZWZpbmVkID8gJyAnIDogYXJndW1lbnRzWzJdO1xuXHRcblx0XG5cdCAgICB2YXIgc3RyID0gdmFsO1xuXHRcblx0ICAgIHZhciBtYXggPSBNYXRoLmFicyhhbXQpO1xuXHRcblx0ICAgIHdoaWxlIChzdHIubGVuZ3RoIDwgbWF4KSB7XG5cdCAgICAgICAgaWYgKGFtdCA8IDApIHtcblx0ICAgICAgICAgICAgc3RyICs9IGNoO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIHN0ciA9IGNoICsgc3RyO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0XG5cdCAgICByZXR1cm4gc3RyO1xuXHR9XG5cbi8qKiovIH0sXG5cbi8qKiovIDg0Mjpcbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0ZXhwb3J0cy5kZWZhdWx0ID0gUmV2ZXJzZUNvbHVtbnM7XG5cdGZ1bmN0aW9uIFJldmVyc2VDb2x1bW5zKG1hdHJpeCkge1xuXHRcblx0ICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWF0cml4Lmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgbWF0cml4W2ldLnJldmVyc2UoKTtcblx0ICAgIH1cblx0XG5cdCAgICByZXR1cm4gbWF0cml4O1xuXHR9XG5cbi8qKiovIH0sXG5cbi8qKiovIDg0Mzpcbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0ZXhwb3J0cy5kZWZhdWx0ID0gUmV2ZXJzZVJvd3M7XG5cdGZ1bmN0aW9uIFJldmVyc2VSb3dzKG1hdHJpeCkge1xuXHRcblx0ICAgIHJldHVybiBtYXRyaXgucmV2ZXJzZSgpO1xuXHR9XG5cbi8qKiovIH0sXG5cbi8qKiovIDg0NDpcbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgICAgdmFsdWU6IHRydWVcblx0fSk7XG5cdGV4cG9ydHMuZGVmYXVsdCA9IFJvdGF0ZTE4MDtcblx0XG5cdHZhciBfUm90YXRlTWF0cml4ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NDUpO1xuXHRcblx0dmFyIF9Sb3RhdGVNYXRyaXgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUm90YXRlTWF0cml4KTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHRmdW5jdGlvbiBSb3RhdGUxODAobWF0cml4KSB7XG5cdFxuXHQgICAgcmV0dXJuICgwLCBfUm90YXRlTWF0cml4Mi5kZWZhdWx0KShtYXRyaXgsIDE4MCk7XG5cdH1cblxuLyoqKi8gfSxcblxuLyoqKi8gODQ1OlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0ZXhwb3J0cy5kZWZhdWx0ID0gUm90YXRlTWF0cml4O1xuXHRcblx0dmFyIF9DaGVja01hdHJpeCA9IF9fd2VicGFja19yZXF1aXJlX18oODM5KTtcblx0XG5cdHZhciBfQ2hlY2tNYXRyaXgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQ2hlY2tNYXRyaXgpO1xuXHRcblx0dmFyIF9UcmFuc3Bvc2VNYXRyaXggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg0Nik7XG5cdFxuXHR2YXIgX1RyYW5zcG9zZU1hdHJpeDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9UcmFuc3Bvc2VNYXRyaXgpO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdC8qKlxyXG5cdCogUm90YXRlcyB0aGUgZ2l2ZW4gbWF0cml4IChhcnJheSBvZiBhcnJheXMpLlxyXG5cdCpcclxuXHQqIEJhc2VkIG9uIHRoZSByb3V0aW5lIGZyb20ge0BsaW5rIGh0dHA6Ly9qc2ZpZGRsZS5uZXQvTXJQb2x5d2hpcmwvTkg0MnovfS5cclxuXHQqXHJcblx0KiBAbWV0aG9kXHJcblx0KiBAcGFyYW0ge0FycmF5PGFueVtdPn0gbWF0cml4IC0gVGhlIGFycmF5IHRvIHJvdGF0ZTsgdGhpcyBtYXRyaXggX21heV8gYmUgYWx0ZXJlZC5cclxuXHQqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ30gZGlyZWN0aW9uIC0gVGhlIGFtb3VudCB0byByb3RhdGU6IHRoZSByb3RhdGlvbiBpbiBkZWdyZWVzICg5MCwgLTkwLCAyNzAsIC0yNzAsIDE4MCkgb3IgYSBzdHJpbmcgY29tbWFuZCAoJ3JvdGF0ZUxlZnQnLCAncm90YXRlUmlnaHQnIG9yICdyb3RhdGUxODAnKS5cclxuXHQqIEByZXR1cm4ge0FycmF5PGFueVtdPn0gVGhlIHJvdGF0ZWQgbWF0cml4LiBUaGUgc291cmNlIG1hdHJpeCBzaG91bGQgYmUgZGlzY2FyZGVkIGZvciB0aGUgcmV0dXJuZWQgbWF0cml4LlxyXG5cdCovXG5cdGZ1bmN0aW9uIFJvdGF0ZU1hdHJpeChtYXRyaXgpIHtcblx0ICAgIHZhciBkaXJlY3Rpb24gPSBhcmd1bWVudHMubGVuZ3RoIDw9IDEgfHwgYXJndW1lbnRzWzFdID09PSB1bmRlZmluZWQgPyA5MCA6IGFyZ3VtZW50c1sxXTtcblx0XG5cdFxuXHQgICAgaWYgKCEoMCwgX0NoZWNrTWF0cml4Mi5kZWZhdWx0KShtYXRyaXgpKSB7XG5cdCAgICAgICAgcmV0dXJuIG51bGw7XG5cdCAgICB9XG5cdFxuXHQgICAgaWYgKHR5cGVvZiBkaXJlY3Rpb24gIT09ICdzdHJpbmcnKSB7XG5cdCAgICAgICAgZGlyZWN0aW9uID0gKGRpcmVjdGlvbiAlIDM2MCArIDM2MCkgJSAzNjA7XG5cdCAgICB9XG5cdFxuXHQgICAgaWYgKGRpcmVjdGlvbiA9PT0gOTAgfHwgZGlyZWN0aW9uID09PSAtMjcwIHx8IGRpcmVjdGlvbiA9PT0gJ3JvdGF0ZUxlZnQnKSB7XG5cdCAgICAgICAgbWF0cml4ID0gKDAsIF9UcmFuc3Bvc2VNYXRyaXgyLmRlZmF1bHQpKG1hdHJpeCk7XG5cdCAgICAgICAgbWF0cml4ID0gbWF0cml4LnJldmVyc2UoKTtcblx0ICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSAtOTAgfHwgZGlyZWN0aW9uID09PSAyNzAgfHwgZGlyZWN0aW9uID09PSAncm90YXRlUmlnaHQnKSB7XG5cdCAgICAgICAgbWF0cml4ID0gbWF0cml4LnJldmVyc2UoKTtcblx0ICAgICAgICBtYXRyaXggPSAoMCwgX1RyYW5zcG9zZU1hdHJpeDIuZGVmYXVsdCkobWF0cml4KTtcblx0ICAgIH0gZWxzZSBpZiAoTWF0aC5hYnMoZGlyZWN0aW9uKSA9PT0gMTgwIHx8IGRpcmVjdGlvbiA9PT0gJ3JvdGF0ZTE4MCcpIHtcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1hdHJpeC5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICBtYXRyaXhbaV0ucmV2ZXJzZSgpO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgbWF0cml4ID0gbWF0cml4LnJldmVyc2UoKTtcblx0ICAgIH1cblx0XG5cdCAgICByZXR1cm4gbWF0cml4O1xuXHR9XG5cbi8qKiovIH0sXG5cbi8qKiovIDg0Njpcbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0ZXhwb3J0cy5kZWZhdWx0ID0gVHJhbnNwb3NlTWF0cml4O1xuXHQvKipcclxuXHQqIFRyYW5zcG9zZXMgdGhlIGVsZW1lbnRzIG9mIHRoZSBnaXZlbiBtYXRyaXggKGFycmF5IG9mIGFycmF5cykuXHJcblx0KiBUaGUgdHJhbnNwb3NlIG9mIGEgbWF0cml4IGlzIGEgbmV3IG1hdHJpeCB3aG9zZSByb3dzIGFyZSB0aGUgY29sdW1ucyBvZiB0aGUgb3JpZ2luYWwuXHJcblx0KlxyXG5cdCogQSBNYXRyaXggaXMgc2ltcGx5IGFuIGFycmF5IG9mIGFycmF5cywgd2hlcmUgZWFjaCBzdWItYXJyYXkgKHRoZSByb3dzKSBoYXZlIHRoZSBzYW1lIGxlbmd0aDpcclxuXHQqXHJcblx0KiBsZXQgbWF0cml4MiA9IFtcclxuXHQqICAgIFsgMSwgMSwgMSwgMSwgMSwgMSBdLFxyXG5cdCogICAgWyAyLCAwLCAwLCAwLCAwLCA0IF0sXHJcblx0KiAgICBbIDIsIDAsIDEsIDIsIDAsIDQgXSxcclxuXHQqICAgIFsgMiwgMCwgMywgNCwgMCwgNCBdLFxyXG5cdCogICAgWyAyLCAwLCAwLCAwLCAwLCA0IF0sXHJcblx0KiAgICBbIDMsIDMsIDMsIDMsIDMsIDMgXVxyXG5cdCpdO1xyXG5cdCpcclxuXHQqIFJvdyBlbGVtZW50cyBjYW4gYmUgYW55IGRhdGEtdHlwZSAobnVtYmVyLCBzdHJpbmcsIE9iamVjdCwgZXRjKVxyXG5cdCpcclxuXHQqIEBtZXRob2RcclxuXHQqIEBwYXJhbSB7QXJyYXk8YW55W10+fSBhcnJheSAtIFRoZSBtYXRyaXggdG8gdHJhbnNwb3NlLlxyXG5cdCogQHJldHVybiB7QXJyYXk8YW55W10+fSBBIG5ldyB0cmFuc3Bvc2VkIG1hdHJpeFxyXG5cdCovXG5cdGZ1bmN0aW9uIFRyYW5zcG9zZU1hdHJpeChhcnJheSkge1xuXHRcblx0ICAgIHZhciBzb3VyY2VSb3dDb3VudCA9IGFycmF5Lmxlbmd0aDtcblx0ICAgIHZhciBzb3VyY2VDb2xDb3VudCA9IGFycmF5WzBdLmxlbmd0aDtcblx0XG5cdCAgICB2YXIgcmVzdWx0ID0gbmV3IEFycmF5KHNvdXJjZUNvbENvdW50KTtcblx0XG5cdCAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNvdXJjZUNvbENvdW50OyBpKyspIHtcblx0ICAgICAgICByZXN1bHRbaV0gPSBuZXcgQXJyYXkoc291cmNlUm93Q291bnQpO1xuXHRcblx0ICAgICAgICBmb3IgKHZhciBqID0gc291cmNlUm93Q291bnQgLSAxOyBqID4gLTE7IGotLSkge1xuXHQgICAgICAgICAgICByZXN1bHRbaV1bal0gPSBhcnJheVtqXVtpXTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cdFxuXHQgICAgcmV0dXJuIHJlc3VsdDtcblx0fVxuXG4vKioqLyB9LFxuXG4vKioqLyA4NDc6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRleHBvcnRzLmRlZmF1bHQgPSBSb3RhdGVMZWZ0O1xuXHRcblx0dmFyIF9Sb3RhdGVNYXRyaXggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg0NSk7XG5cdFxuXHR2YXIgX1JvdGF0ZU1hdHJpeDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Sb3RhdGVNYXRyaXgpO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdGZ1bmN0aW9uIFJvdGF0ZUxlZnQobWF0cml4KSB7XG5cdFxuXHQgICAgcmV0dXJuICgwLCBfUm90YXRlTWF0cml4Mi5kZWZhdWx0KShtYXRyaXgsIC05MCk7XG5cdH1cblxuLyoqKi8gfSxcblxuLyoqKi8gODQ4OlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0ZXhwb3J0cy5kZWZhdWx0ID0gUm90YXRlUmlnaHQ7XG5cdFxuXHR2YXIgX1JvdGF0ZU1hdHJpeCA9IF9fd2VicGFja19yZXF1aXJlX18oODQ1KTtcblx0XG5cdHZhciBfUm90YXRlTWF0cml4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1JvdGF0ZU1hdHJpeCk7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0ZnVuY3Rpb24gUm90YXRlUmlnaHQobWF0cml4KSB7XG5cdFxuXHQgICAgcmV0dXJuICgwLCBfUm90YXRlTWF0cml4Mi5kZWZhdWx0KShtYXRyaXgsIDkwKTtcblx0fVxuXG4vKioqLyB9LFxuXG4vKioqLyA4NDk6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRleHBvcnRzLlBhZCA9IHVuZGVmaW5lZDtcblx0XG5cdHZhciBfUGFkID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NDEpO1xuXHRcblx0dmFyIF9QYWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUGFkKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHRleHBvcnRzLlBhZCA9IF9QYWQyLmRlZmF1bHQ7XG5cbi8qKiovIH1cblxuLyoqKioqKi8gfSlcbn0pO1xuO1xuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIHV0aWxzLmpzXG4gKiovIiwiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG5cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGV4cG9ydHM6IHt9LFxuIFx0XHRcdGlkOiBtb2R1bGVJZCxcbiBcdFx0XHRsb2FkZWQ6IGZhbHNlXG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiB3ZWJwYWNrL2Jvb3RzdHJhcCAxYjZmNThhMTc3NDUwODBmMDAxYVxuICoqLyIsImltcG9ydCBCYW5uZXIgZnJvbSAnLi9CYW5uZXIuanMnO1xyXG5pbXBvcnQgQ29tcG9zZSBmcm9tICcuL0NvbXBvc2UuanMnO1xyXG5pbXBvcnQgKiBhcyBhcnJheSBmcm9tICcuL2FycmF5JztcclxuaW1wb3J0ICogYXMgc3RyaW5nIGZyb20gJy4vc3RyaW5nJztcclxuXHJcbmV4cG9ydCB7XHJcbiAgICBCYW5uZXIsXHJcbiAgICBDb21wb3NlLFxyXG4gICAgYXJyYXksXHJcbiAgICBzdHJpbmdcclxufTtcclxuXHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL3V0aWxzL2luZGV4LmpzXG4gKiovIiwiaW1wb3J0IFZlcnNpb24gZnJvbSAnLi4vVmVyc2lvbi5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBCYW5uZXIgKHRpdGxlLCB1cmwpIHtcclxuXHJcbiAgICBsZXQgbXNnID0gJyVjICVjICVjICVjICVjICAnO1xyXG5cclxuICAgIGlmICh0aXRsZSlcclxuICAgIHtcclxuICAgICAgICBtc2cgPSBtc2cuY29uY2F0KHRpdGxlICsgJyBwb3dlcmVkIGJ5ICcpO1xyXG4gICAgfVxyXG5cclxuICAgIG1zZyA9IG1zZy5jb25jYXQoJ0xhemVyIHYnICsgVmVyc2lvbi5tYWpvciArICcuJyArIFZlcnNpb24ubWlub3IpO1xyXG5cclxuICAgIGlmICh1cmwgPT09IHVuZGVmaW5lZClcclxuICAgIHtcclxuICAgICAgICBtc2cgPSBtc2cuY29uY2F0KCcgLSBodHRwczovL2xhemVyanMuaW8nKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHVybCAhPT0gJycpXHJcbiAgICB7XHJcbiAgICAgICAgbXNnID0gbXNnLmNvbmNhdCgnIC0gJyArIHVybCk7XHJcbiAgICB9XHJcblxyXG4gICAgbXNnID0gbXNnLmNvbmNhdCgnICAnKTtcclxuXHJcbiAgICBjb25zb2xlLmxvZy5hcHBseShjb25zb2xlLCBbXHJcbiAgICAgICAgbXNnLFxyXG4gICAgICAgICdiYWNrZ3JvdW5kOiAjZmYwMDAwJyxcclxuICAgICAgICAnYmFja2dyb3VuZDogI2ZmZmYwMCcsXHJcbiAgICAgICAgJ2JhY2tncm91bmQ6ICMwMGZmMDAnLFxyXG4gICAgICAgICdiYWNrZ3JvdW5kOiAjMDBmZmZmJyxcclxuICAgICAgICAnY29sb3I6ICNmZmZmZmY7IGJhY2tncm91bmQ6ICMwMDA7J1xyXG4gICAgXSk7XHJcblxyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL3V0aWxzL0Jhbm5lci5qc1xuICoqLyIsImNvbnN0IFZlcnNpb24gPSB7XHJcbiAgICBtYWpvcjogMSxcclxuICAgIG1pbm9yOiAyLFxyXG4gICAgcG9pbnQ6IDMsXHJcbiAgICBidWlsZDogMSxcclxuICAgIGRhdGU6ICcxMnRoIEphbnVhcnkgMjAxNidcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFZlcnNpb247XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvVmVyc2lvbi5qc1xuICoqLyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFJvdW5kQXdheUZyb21aZXJvICh2YWx1ZSkge1xyXG5cclxuICAgIC8vIFwiT3Bwb3NpdGVcIiBvZiB0cnVuY2F0ZS5cclxuICAgIHJldHVybiAodmFsdWUgPiAwKSA/IE1hdGguY2VpbCh2YWx1ZSkgOiBNYXRoLmZsb29yKHZhbHVlKTtcclxuXHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvbWF0aC9Sb3VuZEF3YXlGcm9tWmVyby5qc1xuICoqLyIsIi8vICBDb21wb25lbnQgZmFicmljYXRpb24uXHJcbi8vICBCYXNlZCBvbiB0aGUgVW5pdHkgc3R5bGUgb2Ygb2JqZWN0IGNyZWF0aW9uLlxyXG4vLyAgQmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2RhdmVkeC9mYWJyaWNhbnQgYnkgRGF2ZSBDbGF5dG9uXHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBDb21wb3NlIChwcmVmYWIpIHtcclxuXHJcbiAgICBjb25zdCBob3N0ID0gT2JqZWN0LmNyZWF0ZShwcmVmYWIpO1xyXG5cclxuICAgIGhvc3QuY29tcG9uZW50cyA9IG5ldyBNYXAoKTtcclxuXHJcbiAgICBmb3IgKGxldCBjb21wb25lbnQgb2YgcHJlZmFiLmNvbXBvbmVudHMpXHJcbiAgICB7XHJcbiAgICAgICAgbGV0IGluc3RhbmNlO1xyXG5cclxuICAgICAgICBpZiAoY29tcG9uZW50LnByb3RvdHlwZSAmJiBjb21wb25lbnQucHJvdG90eXBlLmNvbnN0cnVjdG9yKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaW5zdGFuY2UgPSBuZXcgY29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2VcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGluc3RhbmNlID0gT2JqZWN0LmNyZWF0ZShjb21wb25lbnQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaW5zdGFuY2UuaG9zdCA9IGhvc3Q7XHJcblxyXG4gICAgICAgIGhvc3QuY29tcG9uZW50cy5zZXQoY29tcG9uZW50LCBpbnN0YW5jZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGhvc3Q7XHJcblxyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL3V0aWxzL0NvbXBvc2UuanNcbiAqKi8iLCJpbXBvcnQgRmluZENsb3Nlc3RJblNvcnRlZCBmcm9tICcuL0ZpbmRDbG9zZXN0SW5Tb3J0ZWQuanMnO1xyXG5pbXBvcnQgR2V0UmFuZG9tRWxlbWVudCBmcm9tICcuL0dldFJhbmRvbUVsZW1lbnQuanMnO1xyXG5pbXBvcnQgTnVtYmVyQXJyYXkgZnJvbSAnLi9OdW1iZXJBcnJheS5qcyc7XHJcbmltcG9ydCBOdW1iZXJBcnJheVN0ZXAgZnJvbSAnLi9OdW1iZXJBcnJheVN0ZXAuanMnO1xyXG5pbXBvcnQgUmVtb3ZlUmFuZG9tRWxlbWVudCBmcm9tICcuL1JlbW92ZVJhbmRvbUVsZW1lbnQuanMnO1xyXG5pbXBvcnQgUm90YXRlTGVmdCBmcm9tICcuL1JvdGF0ZUxlZnQuanMnO1xyXG5pbXBvcnQgUm90YXRlUmlnaHQgZnJvbSAnLi9Sb3RhdGVSaWdodC5qcyc7XHJcbmltcG9ydCBTaHVmZmxlIGZyb20gJy4vU2h1ZmZsZS5qcyc7XHJcbmltcG9ydCBTcGxpY2VPbmUgZnJvbSAnLi9TcGxpY2VPbmUuanMnO1xyXG5pbXBvcnQgKiBhcyBtYXRyaXggZnJvbSAnLi9tYXRyaXgnO1xyXG5cclxuZXhwb3J0IHtcclxuICAgIEZpbmRDbG9zZXN0SW5Tb3J0ZWQsXHJcbiAgICBHZXRSYW5kb21FbGVtZW50LFxyXG4gICAgTnVtYmVyQXJyYXksXHJcbiAgICBOdW1iZXJBcnJheVN0ZXAsXHJcbiAgICBSZW1vdmVSYW5kb21FbGVtZW50LFxyXG4gICAgUm90YXRlTGVmdCxcclxuICAgIFJvdGF0ZVJpZ2h0LFxyXG4gICAgU2h1ZmZsZSxcclxuICAgIFNwbGljZU9uZSxcclxuICAgIG1hdHJpeFxyXG59O1xyXG5cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvdXRpbHMvYXJyYXkvaW5kZXguanNcbiAqKi8iLCIvKipcclxuKiBTbmFwcyBhIHZhbHVlIHRvIHRoZSBuZWFyZXN0IHZhbHVlIGluIGFuIGFycmF5LlxyXG4qIFRoZSByZXN1bHQgd2lsbCBhbHdheXMgYmUgaW4gdGhlIHJhbmdlIGBbZmlyc3RfdmFsdWUsIGxhc3RfdmFsdWVdYC5cclxuKlxyXG4qIEBtZXRob2RcclxuKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgLSBUaGUgc2VhcmNoIHZhbHVlXHJcbiogQHBhcmFtIHtudW1iZXJbXX0gYXJyIC0gVGhlIGlucHV0IGFycmF5IHdoaWNoIF9tdXN0XyBiZSBzb3J0ZWQuXHJcbiogQHJldHVybiB7bnVtYmVyfSBUaGUgbmVhcmVzdCB2YWx1ZSBmb3VuZC5cclxuKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gRmluZENsb3Nlc3RJblNvcnRlZCAodmFsdWUsIGFycmF5KSB7XHJcblxyXG4gICAgaWYgKCFhcnJheS5sZW5ndGgpXHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIE5hTjtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGFycmF5Lmxlbmd0aCA9PT0gMSB8fCB2YWx1ZSA8IGFycmF5WzBdKVxyXG4gICAge1xyXG4gICAgICAgIHJldHVybiBhcnJheVswXTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgaSA9IDE7XHJcblxyXG4gICAgd2hpbGUgKGFycmF5W2ldIDwgdmFsdWUpXHJcbiAgICB7XHJcbiAgICAgICAgaSsrO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBsb3cgPSBhcnJheVtpIC0gMV07XHJcbiAgICBsZXQgaGlnaCA9IChpIDwgYXJyYXkubGVuZ3RoKSA/IGFycmF5W2ldIDogTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xyXG5cclxuICAgIHJldHVybiAoKGhpZ2ggLSB2YWx1ZSkgPD0gKHZhbHVlIC0gbG93KSkgPyBoaWdoIDogbG93O1xyXG5cclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy91dGlscy9hcnJheS9GaW5kQ2xvc2VzdEluU29ydGVkLmpzXG4gKiovIiwiLyoqXHJcbiogRmV0Y2ggYSByYW5kb20gZW50cnkgZnJvbSB0aGUgZ2l2ZW4gYXJyYXkuXHJcbipcclxuKiBXaWxsIHJldHVybiBudWxsIGlmIHRoZXJlIGFyZSBubyBhcnJheSBpdGVtcyB0aGF0IGZhbGwgd2l0aGluIHRoZSBzcGVjaWZpZWQgcmFuZ2VcclxuKiBvciBpZiB0aGVyZSBpcyBubyBpdGVtIGZvciB0aGUgcmFuZG9tbHkgY2hvc2VuIGluZGV4LlxyXG4qXHJcbiogQG1ldGhvZFxyXG4qIEBwYXJhbSB7YW55W119IG9iamVjdHMgLSBBbiBhcnJheSBvZiBvYmplY3RzLlxyXG4qIEBwYXJhbSB7aW50ZWdlcn0gc3RhcnRJbmRleCAtIE9wdGlvbmFsIG9mZnNldCBvZmYgdGhlIGZyb250IG9mIHRoZSBhcnJheS4gRGVmYXVsdCB2YWx1ZSBpcyAwLCBvciB0aGUgYmVnaW5uaW5nIG9mIHRoZSBhcnJheS5cclxuKiBAcGFyYW0ge2ludGVnZXJ9IGxlbmd0aCAtIE9wdGlvbmFsIHJlc3RyaWN0aW9uIG9uIHRoZSBudW1iZXIgb2YgdmFsdWVzIHlvdSB3YW50IHRvIHJhbmRvbWx5IHNlbGVjdCBmcm9tLlxyXG4qIEByZXR1cm4ge29iamVjdH0gVGhlIHJhbmRvbSBvYmplY3QgdGhhdCB3YXMgc2VsZWN0ZWQuXHJcbiovXHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBHZXRSYW5kb21FbGVtZW50IChhcnJheSwgc3RhcnQgPSAwLCBsZW5ndGggPSBhcnJheS5sZW5ndGgpIHtcclxuXHJcbiAgICBjb25zdCByYW5kb21JbmRleCA9IHN0YXJ0ICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogbGVuZ3RoKTtcclxuXHJcbiAgICByZXR1cm4gKGFycmF5W3JhbmRvbUluZGV4XSA9PT0gdW5kZWZpbmVkKSA/IG51bGwgOiBhcnJheVtyYW5kb21JbmRleF07XHJcblxyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL3V0aWxzL2FycmF5L0dldFJhbmRvbUVsZW1lbnQuanNcbiAqKi8iLCIvKipcclxuKiBDcmVhdGUgYW4gYXJyYXkgcmVwcmVzZW50aW5nIHRoZSBpbmNsdXNpdmUgcmFuZ2Ugb2YgbnVtYmVycyAodXN1YWxseSBpbnRlZ2VycykgaW4gYFtzdGFydCwgZW5kXWAuXHJcbiogVGhpcyBpcyBlcXVpdmFsZW50IHRvIGBudW1iZXJBcnJheVN0ZXAoc3RhcnQsIGVuZCwgMSlgLlxyXG4qXHJcbiogQG1ldGhvZCBQaGFzZXIuQXJyYXlVdGlscyNudW1iZXJBcnJheVxyXG4qIEBwYXJhbSB7bnVtYmVyfSBzdGFydCAtIFRoZSBtaW5pbXVtIHZhbHVlIHRoZSBhcnJheSBzdGFydHMgd2l0aC5cclxuKiBAcGFyYW0ge251bWJlcn0gZW5kIC0gVGhlIG1heGltdW0gdmFsdWUgdGhlIGFycmF5IGNvbnRhaW5zLlxyXG4qIEByZXR1cm4ge251bWJlcltdfSBUaGUgYXJyYXkgb2YgbnVtYmVyIHZhbHVlcy5cclxuKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTnVtYmVyQXJyYXkgKHN0YXJ0LCBlbmQpIHtcclxuXHJcbiAgICBpZiAoc3RhcnQgPiBlbmQpXHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCByZXN1bHQgPSBbXTtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPD0gZW5kOyBpKyspXHJcbiAgICB7XHJcbiAgICAgICAgcmVzdWx0LnB1c2goaSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuXHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvdXRpbHMvYXJyYXkvTnVtYmVyQXJyYXkuanNcbiAqKi8iLCJpbXBvcnQgUm91bmRBd2F5RnJvbVplcm8gZnJvbSAnLi4vLi4vbWF0aC9Sb3VuZEF3YXlGcm9tWmVyby5qcyc7XHJcblxyXG4vKipcclxuKiBDcmVhdGUgYW4gYXJyYXkgb2YgbnVtYmVycyAocG9zaXRpdmUgYW5kL29yIG5lZ2F0aXZlKSBwcm9ncmVzc2luZyBmcm9tIGBzdGFydGBcclxuKiB1cCB0byBidXQgbm90IGluY2x1ZGluZyBgZW5kYCBieSBhZHZhbmNpbmcgYnkgYHN0ZXBgLlxyXG4qXHJcbiogSWYgYHN0YXJ0YCBpcyBsZXNzIHRoYW4gYGVuZGAgYSB6ZXJvLWxlbmd0aCByYW5nZSBpcyBjcmVhdGVkIHVubGVzcyBhIG5lZ2F0aXZlIGBzdGVwYCBpcyBzcGVjaWZpZWQuXHJcbipcclxuKiBDZXJ0YWluIHZhbHVlcyBmb3IgYHN0YXJ0YCBhbmQgYGVuZGAgKGVnLiBOYU4vdW5kZWZpbmVkL251bGwpIGFyZSBjdXJyZW50bHkgY29lcmNlZCB0byAwO1xyXG4qIGZvciBmb3J3YXJkIGNvbXBhdGliaWxpdHkgbWFrZSBzdXJlIHRvIHBhc3MgaW4gYWN0dWFsIG51bWJlcnMuXHJcbipcclxuKiBAbWV0aG9kIFBoYXNlci5BcnJheVV0aWxzI251bWJlckFycmF5U3RlcFxyXG4qIEBwYXJhbSB7bnVtYmVyfSBzdGFydCAtIFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXHJcbiogQHBhcmFtIHtudW1iZXJ9IFtlbmRdIC0gVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXHJcbiogQHBhcmFtIHtudW1iZXJ9IFtzdGVwPTFdIC0gVGhlIHZhbHVlIHRvIGluY3JlbWVudCBvciBkZWNyZW1lbnQgYnkuXHJcbiogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgbnVtYmVycy5cclxuKiBAZXhhbXBsZVxyXG4qIE51bWJlckFycmF5U3RlcCg0KTtcclxuKiAvLyA9PiBbMCwgMSwgMiwgM11cclxuKlxyXG4qIE51bWJlckFycmF5U3RlcCgxLCA1KTtcclxuKiAvLyA9PiBbMSwgMiwgMywgNF1cclxuKlxyXG4qIE51bWJlckFycmF5U3RlcCgwLCAyMCwgNSk7XHJcbiogLy8gPT4gWzAsIDUsIDEwLCAxNV1cclxuKlxyXG4qIE51bWJlckFycmF5U3RlcCgwLCAtNCwgLTEpO1xyXG4qIC8vID0+IFswLCAtMSwgLTIsIC0zXVxyXG4qXHJcbiogTnVtYmVyQXJyYXlTdGVwKDEsIDQsIDApO1xyXG4qIC8vID0+IFsxLCAxLCAxXVxyXG4qXHJcbiogTnVtYmVyQXJyYXlTdGVwKDApO1xyXG4qIC8vID0+IFtdXHJcbiovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE51bWJlckFycmF5U3RlcCAoc3RhcnQgPSAwLCBlbmQgPSBudWxsLCBzdGVwID0gMSkge1xyXG5cclxuICAgIGlmIChlbmQgPT09IG51bGwpXHJcbiAgICB7XHJcbiAgICAgICAgZW5kID0gc3RhcnQ7XHJcbiAgICAgICAgc3RhcnQgPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCByZXN1bHQgPSBbXTtcclxuXHJcbiAgICBjb25zdCB0b3RhbCA9IE1hdGgubWF4KFJvdW5kQXdheUZyb21aZXJvKChlbmQgLSBzdGFydCkgLyAoc3RlcCB8fCAxKSksIDApO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdG90YWw7IGkrKylcclxuICAgIHtcclxuICAgICAgICByZXN1bHQucHVzaChzdGFydCk7XHJcbiAgICAgICAgc3RhcnQgKz0gc3RlcDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG5cclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy91dGlscy9hcnJheS9OdW1iZXJBcnJheVN0ZXAuanNcbiAqKi8iLCJpbXBvcnQgU3BsaWNlT25lIGZyb20gJy4vU3BsaWNlT25lLmpzJztcclxuXHJcbi8qKlxyXG4qIFJlbW92ZXMgYSByYW5kb20gb2JqZWN0IGZyb20gdGhlIGdpdmVuIGFycmF5IGFuZCByZXR1cm5zIGl0LlxyXG4qXHJcbiogV2lsbCByZXR1cm4gbnVsbCBpZiB0aGVyZSBhcmUgbm8gYXJyYXkgaXRlbXMgdGhhdCBmYWxsIHdpdGhpbiB0aGUgc3BlY2lmaWVkIHJhbmdlXHJcbiogb3IgaWYgdGhlcmUgaXMgbm8gaXRlbSBmb3IgdGhlIHJhbmRvbWx5IGNob3NlbiBpbmRleC5cclxuKlxyXG4qIEBtZXRob2RcclxuKiBAcGFyYW0ge2FueVtdfSBvYmplY3RzIC0gQW4gYXJyYXkgb2Ygb2JqZWN0cy5cclxuKiBAcGFyYW0ge2ludGVnZXJ9IHN0YXJ0SW5kZXggLSBPcHRpb25hbCBvZmZzZXQgb2ZmIHRoZSBmcm9udCBvZiB0aGUgYXJyYXkuIERlZmF1bHQgdmFsdWUgaXMgMCwgb3IgdGhlIGJlZ2lubmluZyBvZiB0aGUgYXJyYXkuXHJcbiogQHBhcmFtIHtpbnRlZ2VyfSBsZW5ndGggLSBPcHRpb25hbCByZXN0cmljdGlvbiBvbiB0aGUgbnVtYmVyIG9mIHZhbHVlcyB5b3Ugd2FudCB0byByYW5kb21seSBzZWxlY3QgZnJvbS5cclxuKiBAcmV0dXJuIHtvYmplY3R9IFRoZSByYW5kb20gb2JqZWN0IHRoYXQgd2FzIHJlbW92ZWQuXHJcbiovXHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBSZW1vdmVSYW5kb21FbGVtZW50IChhcnJheSwgc3RhcnQgPSAwLCBsZW5ndGggPSBhcnJheS5sZW5ndGgpIHtcclxuXHJcbiAgICBjb25zdCByYW5kb21JbmRleCA9IHN0YXJ0ICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogbGVuZ3RoKTtcclxuXHJcbiAgICByZXR1cm4gU3BsaWNlT25lKGFycmF5LCByYW5kb21JbmRleCk7XHJcblxyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL3V0aWxzL2FycmF5L1JlbW92ZVJhbmRvbUVsZW1lbnQuanNcbiAqKi8iLCIvLyAgUmVtb3ZlcyBhIHNpbmdsZSBpdGVtIGZyb20gYW4gYXJyYXkgYW5kIHJldHVybnMgaXRcclxuLy8gIHdpdGhvdXQgY3JlYXRpbmcgZ2MgKGxpa2UgdGhlIG5hdGl2ZSBzcGxpY2UgZG9lcylcclxuLy8gIEJhc2VkIG9uIGNvZGUgYnkgTWlrZSBSZWluc3RlaW5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFNwbGljZU9uZSAoYXJyYXksIGluZGV4KSB7XHJcblxyXG4gICAgaWYgKGluZGV4ID49IGFycmF5Lmxlbmd0aClcclxuICAgIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgbGVuID0gYXJyYXkubGVuZ3RoIC0gMTtcclxuXHJcbiAgICBjb25zdCBpdGVtID0gYXJyYXlbaW5kZXhdO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSBpbmRleDsgaSA8IGxlbjsgaSsrKVxyXG4gICAge1xyXG4gICAgICAgIGFycmF5W2ldID0gYXJyYXlbaSArIDFdO1xyXG4gICAgfVxyXG5cclxuICAgIGFycmF5Lmxlbmd0aCA9IGxlbjtcclxuXHJcbiAgICByZXR1cm4gaXRlbTtcclxuICAgIFxyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL3V0aWxzL2FycmF5L1NwbGljZU9uZS5qc1xuICoqLyIsIi8qKlxyXG4qIE1vdmVzIHRoZSBlbGVtZW50IGF0IHRoZSBzdGFydCBvZiB0aGUgYXJyYXkgdG8gdGhlIGVuZCwgc2hpZnRpbmcgYWxsIGl0ZW1zIGluIHRoZSBwcm9jZXNzLlxyXG4qIFRoZSBcInJvdGF0aW9uXCIgaGFwcGVucyB0byB0aGUgbGVmdC5cclxuKlxyXG4qIEBtZXRob2QgUGhhc2VyLkFycmF5VXRpbHMucm90YXRlXHJcbiogQHBhcmFtIHthbnlbXX0gYXJyYXkgLSBUaGUgYXJyYXkgdG8gc2hpZnQvcm90YXRlLiBUaGUgYXJyYXkgaXMgbW9kaWZpZWQuXHJcbiogQHBhcmFtIHtpbnRlZ2VyfSBbdG90YWw9MV0gLSBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIHNoaWZ0IHRoZSBhcnJheS4gT25seSB0aGUgbW9zdCByZWNlbnRseSBzaGlmdGVkIGVsZW1lbnQgaXMgcmV0dXJuZWQuXHJcbiogQHJldHVybiB7YW55fSBUaGUgc2hpZnRlZCB2YWx1ZS5cclxuKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUm90YXRlTGVmdCAoYXJyYXksIHRvdGFsID0gMSkge1xyXG5cclxuICAgIGxldCBlbGVtZW50ID0gbnVsbDtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRvdGFsOyBpKyspXHJcbiAgICB7XHJcbiAgICAgICAgZWxlbWVudCA9IGFycmF5LnNoaWZ0KCk7XHJcbiAgICAgICAgYXJyYXkucHVzaChlbGVtZW50KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZWxlbWVudDtcclxuICAgIFxyXG59XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvdXRpbHMvYXJyYXkvUm90YXRlTGVmdC5qc1xuICoqLyIsIi8qKlxyXG4qIE1vdmVzIHRoZSBlbGVtZW50IGF0IHRoZSBlbmQgb2YgdGhlIGFycmF5IHRvIHRoZSBzdGFydCwgc2hpZnRpbmcgYWxsIGl0ZW1zIGluIHRoZSBwcm9jZXNzLlxyXG4qIFRoZSBcInJvdGF0aW9uXCIgaGFwcGVucyB0byB0aGUgcmlnaHQuXHJcbipcclxuKiBAcGFyYW0ge2FueVtdfSBhcnJheSAtIFRoZSBhcnJheSB0byBzaGlmdC9yb3RhdGUuIFRoZSBhcnJheSBpcyBtb2RpZmllZC5cclxuKiBAcGFyYW0ge2ludGVnZXJ9IFt0b3RhbD0xXSAtIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gc2hpZnQgdGhlIGFycmF5LiBPbmx5IHRoZSBtb3N0IHJlY2VudGx5IHNoaWZ0ZWQgZWxlbWVudCBpcyByZXR1cm5lZC5cclxuKiBAcmV0dXJuIHthbnl9IFRoZSBzaGlmdGVkIHZhbHVlLlxyXG4qL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBSb3RhdGVSaWdodCAoYXJyYXksIHRvdGFsID0gMSkge1xyXG5cclxuICAgIGxldCBlbGVtZW50ID0gbnVsbDtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRvdGFsOyBpKyspXHJcbiAgICB7XHJcbiAgICAgICAgZWxlbWVudCA9IGFycmF5LnBvcCgpO1xyXG4gICAgICAgIGFycmF5LnVuc2hpZnQoZWxlbWVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGVsZW1lbnQ7XHJcbiAgICBcclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy91dGlscy9hcnJheS9Sb3RhdGVSaWdodC5qc1xuICoqLyIsIi8qKlxyXG4qIEEgc3RhbmRhcmQgRmlzaGVyLVlhdGVzIEFycmF5IHNodWZmbGUgaW1wbGVtZW50YXRpb24gd2hpY2ggbW9kaWZpZXMgdGhlIGFycmF5IGluIHBsYWNlLlxyXG4qXHJcbiogQG1ldGhvZFxyXG4qIEBwYXJhbSB7YW55W119IGFycmF5IC0gVGhlIGFycmF5IHRvIHNodWZmbGUuXHJcbiogQHJldHVybiB7YW55W119IFRoZSBvcmlnaW5hbCBhcnJheSwgbm93IHNodWZmbGVkLlxyXG4qL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBTaHVmZmxlIChhcnJheSkge1xyXG5cclxuICAgIGZvciAobGV0IGkgPSBhcnJheS5sZW5ndGggLSAxOyBpID4gMDsgaS0tKVxyXG4gICAge1xyXG4gICAgICAgIGxldCBqID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKGkgKyAxKSk7XHJcbiAgICAgICAgbGV0IHRlbXAgPSBhcnJheVtpXTtcclxuICAgICAgICBhcnJheVtpXSA9IGFycmF5W2pdO1xyXG4gICAgICAgIGFycmF5W2pdID0gdGVtcDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gYXJyYXk7XHJcblxyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL3V0aWxzL2FycmF5L1NodWZmbGUuanNcbiAqKi8iLCJpbXBvcnQgQ2hlY2tNYXRyaXggZnJvbSAnLi9DaGVja01hdHJpeC5qcyc7XHJcbmltcG9ydCBNYXRyaXhUb1N0cmluZyBmcm9tICcuL01hdHJpeFRvU3RyaW5nLmpzJztcclxuaW1wb3J0IFJldmVyc2VDb2x1bW5zIGZyb20gJy4vUmV2ZXJzZUNvbHVtbnMuanMnO1xyXG5pbXBvcnQgUmV2ZXJzZVJvd3MgZnJvbSAnLi9SZXZlcnNlUm93cy5qcyc7XHJcbmltcG9ydCBSb3RhdGUxODAgZnJvbSAnLi9Sb3RhdGUxODAuanMnO1xyXG5pbXBvcnQgUm90YXRlTGVmdCBmcm9tICcuL1JvdGF0ZUxlZnQuanMnO1xyXG5pbXBvcnQgUm90YXRlTWF0cml4IGZyb20gJy4vUm90YXRlTWF0cml4LmpzJztcclxuaW1wb3J0IFJvdGF0ZVJpZ2h0IGZyb20gJy4vUm90YXRlUmlnaHQuanMnO1xyXG5pbXBvcnQgVHJhbnNwb3NlTWF0cml4IGZyb20gJy4vVHJhbnNwb3NlTWF0cml4LmpzJztcclxuXHJcbmV4cG9ydCB7XHJcbiAgICBDaGVja01hdHJpeCxcclxuICAgIE1hdHJpeFRvU3RyaW5nLFxyXG4gICAgUmV2ZXJzZUNvbHVtbnMsXHJcbiAgICBSZXZlcnNlUm93cyxcclxuICAgIFJvdGF0ZTE4MCxcclxuICAgIFJvdGF0ZUxlZnQsXHJcbiAgICBSb3RhdGVNYXRyaXgsXHJcbiAgICBSb3RhdGVSaWdodCxcclxuICAgIFRyYW5zcG9zZU1hdHJpeFxyXG59O1xyXG5cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvdXRpbHMvYXJyYXkvbWF0cml4L2luZGV4LmpzXG4gKiovIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQ2hlY2tNYXRyaXggKG1hdHJpeCkge1xyXG5cclxuICAgIGlmICghQXJyYXkuaXNBcnJheShtYXRyaXgpIHx8IG1hdHJpeC5sZW5ndGggPCAyIHx8ICFBcnJheS5pc0FycmF5KG1hdHJpeFswXSkpXHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vICBIb3cgbG9uZyBpcyB0aGUgZmlyc3Qgcm93P1xyXG4gICAgY29uc3Qgc2l6ZSA9IG1hdHJpeFswXS5sZW5ndGg7XHJcblxyXG4gICAgLy8gIFZhbGlkYXRlIHRoZSByZXN0IG9mIHRoZSByb3dzIGFyZSB0aGUgc2FtZSBsZW5ndGhcclxuICAgIGZvciAobGV0IHJvdyBvZiBtYXRyaXgpXHJcbiAgICB7XHJcbiAgICAgICAgaWYgKHJvdy5sZW5ndGggIT09IHNpemUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0cnVlO1xyXG4gICAgXHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvdXRpbHMvYXJyYXkvbWF0cml4L0NoZWNrTWF0cml4LmpzXG4gKiovIiwiaW1wb3J0IFBhZCBmcm9tICcuLi8uLi9zdHJpbmcvUGFkLmpzJztcclxuaW1wb3J0IENoZWNrTWF0cml4IGZyb20gJy4vQ2hlY2tNYXRyaXguanMnO1xyXG5cclxuLy8gIEdlbmVyYXRlcyBhIHN0cmluZyAod2hpY2ggeW91IGNhbiBwYXNzIHRvIGNvbnNvbGUubG9nKSBmcm9tIHRoZSBnaXZlblxyXG4vLyAgQXJyYXkgTWF0cml4LlxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTWF0cml4VG9TdHJpbmcgKG1hdHJpeCkge1xyXG5cclxuICAgIGxldCBzdHIgPSAnJztcclxuXHJcbiAgICBpZiAoIUNoZWNrTWF0cml4KG1hdHJpeCkpXHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIHN0cjtcclxuICAgIH1cclxuXHJcbiAgICBmb3IgKGxldCByID0gMDsgciA8IG1hdHJpeC5sZW5ndGg7IHIrKylcclxuICAgIHtcclxuICAgICAgICBmb3IgKGxldCBjID0gMDsgYyA8IG1hdHJpeFtyXS5sZW5ndGg7IGMrKylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGxldCBjZWxsID0gbWF0cml4W3JdW2NdLnRvU3RyaW5nKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoY2VsbCAhPT0gJ3VuZGVmaW5lZCcpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHN0ciArPSBQYWQoY2VsbCwgMik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzdHIgKz0gJz8nO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoYyA8IG1hdHJpeFtyXS5sZW5ndGggLSAxKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzdHIgKz0gJyB8JztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHIgPCBtYXRyaXgubGVuZ3RoIC0gMSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHN0ciArPSAnXFxuJztcclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWF0cml4W3JdLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzdHIgKz0gJy0tLSc7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGkgPCBtYXRyaXhbcl0ubGVuZ3RoIC0gMSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBzdHIgKz0gJysnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzdHIgKz0gJ1xcbic7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gc3RyO1xyXG5cclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy91dGlscy9hcnJheS9tYXRyaXgvTWF0cml4VG9TdHJpbmcuanNcbiAqKi8iLCIvLyAgUGFkIG91dCB0aGUgZ2l2ZW4gc3RyaW5nICh2YWwpIHRvIHRoZSAnYW10JyBudW1iZXIgb2YgY2hhcmFjdGVycyB1c2luZyAnY2gnIGFzIHRoZSBleHRyYSBjaGFyYWN0ZXJzXHJcbi8vICBpZiB0aGUgc3RyaW5nIG5lZWRzIHBhZGRpbmdcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFBhZCAodmFsLCBhbXQsIGNoID0gJyAnKSB7XHJcblxyXG4gICAgbGV0IHN0ciA9IHZhbFxyXG5cclxuICAgIGNvbnN0IG1heCA9IE1hdGguYWJzKGFtdCk7XHJcblxyXG4gICAgd2hpbGUgKHN0ci5sZW5ndGggPCBtYXgpXHJcbiAgICB7XHJcbiAgICAgICAgaWYgKGFtdCA8IDApXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzdHIgKz0gY2g7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2VcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHN0ciA9IGNoICsgc3RyO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gc3RyO1xyXG5cclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy91dGlscy9zdHJpbmcvUGFkLmpzXG4gKiovIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUmV2ZXJzZUNvbHVtbnMgKG1hdHJpeCkge1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWF0cml4Lmxlbmd0aDsgaSsrKVxyXG4gICAge1xyXG4gICAgICAgIG1hdHJpeFtpXS5yZXZlcnNlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG1hdHJpeDtcclxuICAgIFxyXG59XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvdXRpbHMvYXJyYXkvbWF0cml4L1JldmVyc2VDb2x1bW5zLmpzXG4gKiovIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUmV2ZXJzZVJvd3MgKG1hdHJpeCkge1xyXG5cclxuICAgIHJldHVybiBtYXRyaXgucmV2ZXJzZSgpO1xyXG4gICAgXHJcbn1cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy91dGlscy9hcnJheS9tYXRyaXgvUmV2ZXJzZVJvd3MuanNcbiAqKi8iLCJpbXBvcnQgUm90YXRlTWF0cml4IGZyb20gJy4vUm90YXRlTWF0cml4LmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFJvdGF0ZTE4MCAobWF0cml4KSB7XHJcblxyXG4gICAgcmV0dXJuIFJvdGF0ZU1hdHJpeChtYXRyaXgsIDE4MCk7XHJcbiAgICBcclxufVxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL3V0aWxzL2FycmF5L21hdHJpeC9Sb3RhdGUxODAuanNcbiAqKi8iLCJpbXBvcnQgQ2hlY2tNYXRyaXggZnJvbSAnLi9DaGVja01hdHJpeC5qcyc7XHJcbmltcG9ydCBUcmFuc3Bvc2VNYXRyaXggZnJvbSAnLi9UcmFuc3Bvc2VNYXRyaXguanMnO1xyXG5cclxuLyoqXHJcbiogUm90YXRlcyB0aGUgZ2l2ZW4gbWF0cml4IChhcnJheSBvZiBhcnJheXMpLlxyXG4qXHJcbiogQmFzZWQgb24gdGhlIHJvdXRpbmUgZnJvbSB7QGxpbmsgaHR0cDovL2pzZmlkZGxlLm5ldC9NclBvbHl3aGlybC9OSDQyei99LlxyXG4qXHJcbiogQG1ldGhvZFxyXG4qIEBwYXJhbSB7QXJyYXk8YW55W10+fSBtYXRyaXggLSBUaGUgYXJyYXkgdG8gcm90YXRlOyB0aGlzIG1hdHJpeCBfbWF5XyBiZSBhbHRlcmVkLlxyXG4qIEBwYXJhbSB7bnVtYmVyfHN0cmluZ30gZGlyZWN0aW9uIC0gVGhlIGFtb3VudCB0byByb3RhdGU6IHRoZSByb3RhdGlvbiBpbiBkZWdyZWVzICg5MCwgLTkwLCAyNzAsIC0yNzAsIDE4MCkgb3IgYSBzdHJpbmcgY29tbWFuZCAoJ3JvdGF0ZUxlZnQnLCAncm90YXRlUmlnaHQnIG9yICdyb3RhdGUxODAnKS5cclxuKiBAcmV0dXJuIHtBcnJheTxhbnlbXT59IFRoZSByb3RhdGVkIG1hdHJpeC4gVGhlIHNvdXJjZSBtYXRyaXggc2hvdWxkIGJlIGRpc2NhcmRlZCBmb3IgdGhlIHJldHVybmVkIG1hdHJpeC5cclxuKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUm90YXRlTWF0cml4IChtYXRyaXgsIGRpcmVjdGlvbiA9IDkwKSB7XHJcblxyXG4gICAgaWYgKCFDaGVja01hdHJpeChtYXRyaXgpKVxyXG4gICAge1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0eXBlb2YgZGlyZWN0aW9uICE9PSAnc3RyaW5nJylcclxuICAgIHtcclxuICAgICAgICBkaXJlY3Rpb24gPSAoKGRpcmVjdGlvbiAlIDM2MCkgKyAzNjApICUgMzYwO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChkaXJlY3Rpb24gPT09IDkwIHx8IGRpcmVjdGlvbiA9PT0gLTI3MCB8fCBkaXJlY3Rpb24gPT09ICdyb3RhdGVMZWZ0JylcclxuICAgIHtcclxuICAgICAgICBtYXRyaXggPSBUcmFuc3Bvc2VNYXRyaXgobWF0cml4KTtcclxuICAgICAgICBtYXRyaXggPSBtYXRyaXgucmV2ZXJzZSgpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoZGlyZWN0aW9uID09PSAtOTAgfHwgZGlyZWN0aW9uID09PSAyNzAgfHwgZGlyZWN0aW9uID09PSAncm90YXRlUmlnaHQnKVxyXG4gICAge1xyXG4gICAgICAgIG1hdHJpeCA9IG1hdHJpeC5yZXZlcnNlKCk7XHJcbiAgICAgICAgbWF0cml4ID0gVHJhbnNwb3NlTWF0cml4KG1hdHJpeCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChNYXRoLmFicyhkaXJlY3Rpb24pID09PSAxODAgfHwgZGlyZWN0aW9uID09PSAncm90YXRlMTgwJylcclxuICAgIHtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1hdHJpeC5sZW5ndGg7IGkrKylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIG1hdHJpeFtpXS5yZXZlcnNlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBtYXRyaXggPSBtYXRyaXgucmV2ZXJzZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBtYXRyaXg7XHJcblxyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL3V0aWxzL2FycmF5L21hdHJpeC9Sb3RhdGVNYXRyaXguanNcbiAqKi8iLCIvKipcclxuKiBUcmFuc3Bvc2VzIHRoZSBlbGVtZW50cyBvZiB0aGUgZ2l2ZW4gbWF0cml4IChhcnJheSBvZiBhcnJheXMpLlxyXG4qIFRoZSB0cmFuc3Bvc2Ugb2YgYSBtYXRyaXggaXMgYSBuZXcgbWF0cml4IHdob3NlIHJvd3MgYXJlIHRoZSBjb2x1bW5zIG9mIHRoZSBvcmlnaW5hbC5cclxuKlxyXG4qIEEgTWF0cml4IGlzIHNpbXBseSBhbiBhcnJheSBvZiBhcnJheXMsIHdoZXJlIGVhY2ggc3ViLWFycmF5ICh0aGUgcm93cykgaGF2ZSB0aGUgc2FtZSBsZW5ndGg6XHJcbipcclxuKiBsZXQgbWF0cml4MiA9IFtcclxuKiAgICBbIDEsIDEsIDEsIDEsIDEsIDEgXSxcclxuKiAgICBbIDIsIDAsIDAsIDAsIDAsIDQgXSxcclxuKiAgICBbIDIsIDAsIDEsIDIsIDAsIDQgXSxcclxuKiAgICBbIDIsIDAsIDMsIDQsIDAsIDQgXSxcclxuKiAgICBbIDIsIDAsIDAsIDAsIDAsIDQgXSxcclxuKiAgICBbIDMsIDMsIDMsIDMsIDMsIDMgXVxyXG4qXTtcclxuKlxyXG4qIFJvdyBlbGVtZW50cyBjYW4gYmUgYW55IGRhdGEtdHlwZSAobnVtYmVyLCBzdHJpbmcsIE9iamVjdCwgZXRjKVxyXG4qXHJcbiogQG1ldGhvZFxyXG4qIEBwYXJhbSB7QXJyYXk8YW55W10+fSBhcnJheSAtIFRoZSBtYXRyaXggdG8gdHJhbnNwb3NlLlxyXG4qIEByZXR1cm4ge0FycmF5PGFueVtdPn0gQSBuZXcgdHJhbnNwb3NlZCBtYXRyaXhcclxuKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gVHJhbnNwb3NlTWF0cml4IChhcnJheSkge1xyXG5cclxuICAgIGNvbnN0IHNvdXJjZVJvd0NvdW50ID0gYXJyYXkubGVuZ3RoO1xyXG4gICAgY29uc3Qgc291cmNlQ29sQ291bnQgPSBhcnJheVswXS5sZW5ndGg7XHJcblxyXG4gICAgbGV0IHJlc3VsdCA9IG5ldyBBcnJheShzb3VyY2VDb2xDb3VudCk7XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzb3VyY2VDb2xDb3VudDsgaSsrKVxyXG4gICAge1xyXG4gICAgICAgIHJlc3VsdFtpXSA9IG5ldyBBcnJheShzb3VyY2VSb3dDb3VudCk7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGogPSBzb3VyY2VSb3dDb3VudCAtIDE7IGogPiAtMTsgai0tKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmVzdWx0W2ldW2pdID0gYXJyYXlbal1baV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZXN1bHQ7XHJcblxyXG59XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL3V0aWxzL2FycmF5L21hdHJpeC9UcmFuc3Bvc2VNYXRyaXguanNcbiAqKi8iLCJpbXBvcnQgUm90YXRlTWF0cml4IGZyb20gJy4vUm90YXRlTWF0cml4LmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFJvdGF0ZUxlZnQgKG1hdHJpeCkge1xyXG5cclxuICAgIHJldHVybiBSb3RhdGVNYXRyaXgobWF0cml4LCAtOTApO1xyXG4gICAgXHJcbn1cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy91dGlscy9hcnJheS9tYXRyaXgvUm90YXRlTGVmdC5qc1xuICoqLyIsImltcG9ydCBSb3RhdGVNYXRyaXggZnJvbSAnLi9Sb3RhdGVNYXRyaXguanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUm90YXRlUmlnaHQgKG1hdHJpeCkge1xyXG5cclxuICAgIHJldHVybiBSb3RhdGVNYXRyaXgobWF0cml4LCA5MCk7XHJcbiAgICBcclxufVxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL3V0aWxzL2FycmF5L21hdHJpeC9Sb3RhdGVSaWdodC5qc1xuICoqLyIsImltcG9ydCBQYWQgZnJvbSAnLi9QYWQuanMnO1xyXG5cclxuZXhwb3J0IHtcclxuICAgIFBhZFxyXG59O1xyXG5cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvdXRpbHMvc3RyaW5nL2luZGV4LmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==