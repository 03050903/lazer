!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("fx",[],e):"object"==typeof exports?exports.fx=e():(t.lazer=t.lazer||{},t.lazer.fx=e())}(this,function(){return function(t){function e(r){if(i[r])return i[r].exports;var n=i[r]={exports:{},id:r,loaded:!1};return t[r].call(n.exports,n,n.exports,e),n.loaded=!0,n.exports}var i={};return e.m=t,e.c=i,e.p="",e(0)}({0:function(t,e,i){"use strict";function r(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e["default"]=t,e}Object.defineProperty(e,"__esModule",{value:!0}),e.starfield=e.sinusdots=e.plasma=void 0;var n=i(158),o=r(n),s=i(162),a=r(s),h=i(164),u=r(h);e.plasma=o,e.sinusdots=a,e.starfield=u},10:function(t,e){"use strict";function i(t,e){var i=arguments.length<=2||void 0===arguments[2]?{}:arguments[2],r=i.srcX,n=void 0===r?0:r,o=i.srcY,s=void 0===o?0:o,a=i.srcWidth,h=void 0===a?e.width:a,u=i.srcHeight,d=void 0===u?e.height:u,l=i.x,f=void 0===l?f:l,c=i.y,v=void 0===c?v:c,y=i.width,p=void 0===y?h:y,_=i.height,g=void 0===_?d:_,x=i.rotate,m=void 0===x?0:x,b=i.anchorX,w=void 0===b?0:b,M=i.anchorY,k=void 0===M?0:M,X=i.scaleX,Y=void 0===X?1:X,O=i.scaleY,S=void 0===O?1:O,j=i.alpha,P=void 0===j?1:j,F=i.blendMode,I=void 0===F?null:F,D=i.roundPx,A=void 0===D?!1:D;if(0!==P&&0!==Y&&0!==S){var T=t.globalAlpha,E=t.globalCompositeOperation;return t.save(),t.globalAlpha=P,A&&(f|=0,v|=0),I&&(t.globalCompositeOperation=I),t.translate(f,v),t.scale(Y,S),t.rotate(m),t.drawImage(e,n,s,h,d,-p*w,-g*k,p,g),t.restore(),t.globalAlpha=T,t.globalCompositeOperation=E,t}}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=i},27:function(t,e,i){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function n(t){var e=arguments.length<=1||void 0===arguments[1]?0:arguments[1],i=arguments.length<=2||void 0===arguments[2]?0:arguments[2],r=arguments.length<=3||void 0===arguments[3]?null:arguments[3],n=arguments.length<=4||void 0===arguments[4]?null:arguments[4];return r||(r=t.canvas.width),n||(n=t.canvas.height),e=(0,s["default"])(e,0,t.canvas.width-r),i=(0,s["default"])(i,0,t.canvas.height-n),t.getImageData(e,i,r,n)}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var o=i(28),s=r(o)},28:function(t,e){"use strict";function i(t,e,i){return e>t?e:t>i?i:t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=i},29:function(t,e){"use strict";function i(t,e){var i=arguments.length<=2||void 0===arguments[2]?0:arguments[2],r=arguments.length<=3||void 0===arguments[3]?0:arguments[3],n=arguments[4],o=arguments[5],s=arguments[6],a=arguments[7];return void 0!==n?t.putImageData(e,i,r,n,o,s,a):t.putImageData(e,i,r),t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=i},86:function(t,e){"use strict";function i(t,e,i){return e=Math.abs(Math.round(e)),i=Math.abs(Math.round(i)),e<t.width&&i<t.height?4*(e+i*t.width):-1}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=i},94:function(t,e,i){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function n(t,e,i){var r=arguments.length<=3||void 0===arguments[3]?0:arguments[3],n=arguments.length<=4||void 0===arguments[4]?0:arguments[4],o=arguments.length<=5||void 0===arguments[5]?0:arguments[5],a=arguments.length<=6||void 0===arguments[6]?255:arguments[6],h=(0,s["default"])(t,e,i);return t.data[h]>=0?(t.data[h]=r,t.data[++h]=n,t.data[++h]=o,t.data[++h]=a,!0):!1}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var o=i(86),s=r(o)},99:function(t,e,i){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function n(t,e){var i=arguments.length<=2||void 0===arguments[2]?0:arguments[2],r=arguments.length<=3||void 0===arguments[3]?0:arguments[3];this.context=t,this.imageData=e,this.tl?(this.tl.setTo(1/0,1/0),this.br.zero(),this.offset.setTo(i,r)):(this.tl=new h["default"](1/0,1/0),this.br=new h["default"](0,0),this.offset=new h["default"](i,r))}function o(t,e){var i=arguments.length<=2||void 0===arguments[2]?0:arguments[2],r=arguments.length<=3||void 0===arguments[3]?0:arguments[3],n=arguments.length<=4||void 0===arguments[4]?0:arguments[4],o=arguments.length<=5||void 0===arguments[5]?255:arguments[5];(0,d["default"])(this.imageData,t,e,i,r,n,o)&&(t<this.tl.x&&(this.tl.x=t),e<this.tl.y&&(this.tl.y=e),t>this.br.x&&(this.br.x=t),e>this.br.y&&(this.br.y=e))}function s(){return this.imageData?(0,f["default"])(this.context,this.imageData,this.offset.x,this.offset.y,this.tl.x,this.tl.y,this.br.x-this.tl.x,this.br.y-this.tl.y):void 0}Object.defineProperty(e,"__esModule",{value:!0}),e.load=n,e.set=o,e.write=s;var a=i(100),h=r(a),u=i(94),d=r(u),l=i(29),f=r(l)},100:function(t,e){"use strict";function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var i=0;i<e.length;i++){var r=e[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,i,r){return i&&t(e.prototype,i),r&&t(e,r),e}}(),n=function(){function t(){var e=arguments.length<=0||void 0===arguments[0]?0:arguments[0],r=arguments.length<=1||void 0===arguments[1]?0:arguments[1];i(this,t),this[0]=e,this[1]=r}return r(t,[{key:"set",value:function(t){var e=arguments.length<=1||void 0===arguments[1]?t:arguments[1];return this[0]=t,this[1]=e,this}},{key:"setTo",value:function(t){var e=arguments.length<=1||void 0===arguments[1]?t:arguments[1];return this[0]=t,this[1]=e,this}},{key:"zero",value:function(){return this[0]=0,this[1]=0,this}},{key:"add",value:function(t){return this[0]+=t[0],this[1]+=t[1],this}},{key:"addScalar",value:function(t){return this[0]+=t,this[1]+=t,this}},{key:"addVectors",value:function(t,e){return this[0]=t[0]+e[0],this[1]=t[1]+e[1],this}},{key:"addScaledVector",value:function(t,e){return this[0]+=t[0]*e,this[1]+=t[1]*e,this}},{key:"sub",value:function(t){return this[0]-=t[0],this[1]-=t[1],this}},{key:"subScalar",value:function(t){return this[0]-=t,this[1]-=t,this}},{key:"subVectors",value:function(t,e){return this[0]=t[0]-e[0],this[1]=t[1]-e[1],this}},{key:"multiply",value:function(t){return this[0]*=t[0],this[1]*=t[1],this}},{key:"multiplyScalar",value:function(t){return isFinite(t)?(this[0]*=t,this[1]*=t):(this[0]=0,this[1]=0),this}},{key:"scale",value:function(t){var e=arguments.length<=1||void 0===arguments[1]?t:arguments[1];return this[0]*=t,this[1]*=e,this}},{key:"scaleV",value:function(t){return this[0]*=t[0],this[1]*=t[1],this}},{key:"divide",value:function(t){return this[0]/=t,this[1]/=t,this}},{key:"divideScalar",value:function(t){var e=1/t;return isFinite(e)?(this[0]*=e,this[1]*=e):(this[0]=0,this[1]=0),this}},{key:"min",value:function(t){return this[0]=Math.min(this[0],t[0]),this[1]=Math.min(this[1],t[1]),this}},{key:"max",value:function(t){return this[0]=Math.max(this[0],t[0]),this[1]=Math.max(this[1],t[1]),this}},{key:"clamp",value:function(t,e){return this[0]=Math.max(t[0],Math.min(e[0],this[0])),this[1]=Math.max(t[1],Math.min(e[1],this[1])),this}},{key:"floor",value:function(){return this[0]=Math.floor(this[0]),this[1]=Math.floor(this[1]),this}},{key:"ceil",value:function(){return this[0]=Math.ceil(this[0]),this[1]=Math.ceil(this[1]),this}},{key:"round",value:function(){return this[0]=Math.round(this[0]),this[1]=Math.round(this[1]),this}},{key:"roundToZero",value:function(){return this[0]<0?this[0]=Math.ceil(this[0]):this[0]=Math.floor(this[0]),this[1]<1?this[1]=Math.ceil(this[1]):this[1]=Math.floor(this[1]),this}},{key:"negate",value:function(){return this[0]=-this[0],this[1]=-this[1],this}},{key:"normalize",value:function(){var t=this.length();return t>0&&(this[0]/=t,this[1]/=t),this}},{key:"perp",value:function(){var t=this[0],e=this[1];return this[0]=e,this[1]=-t,this}},{key:"dot",value:function(t){return this[0]*t[0]+this[1]*t[1]}},{key:"lengthSq",value:function(){return this[0]*this[0]+this[1]*this[1]}},{key:"lengthManhattan",value:function(){return Math.abs(this[0])+Math.abs(this[1])}},{key:"toString",value:function(){return"[Vec2 (x="+this[0]+", y="+this[1]+")]"}},{key:"x",get:function(){return this[0]},set:function(t){this[0]=t}},{key:"y",get:function(){return this[1]},set:function(t){this[1]=t}},{key:"length",set:function(t){var e=Math.atan2(this[1],this[0]);this[0]=Math.cos(e)*t,this[1]=Math.sin(e)*t},get:function(){return Math.sqrt(this[0]*this[0]+this[1]*this[1])}}]),t}();e["default"]=n},158:function(t,e,i){"use strict";"create index";function r(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(e,"__esModule",{value:!0}),e.Plasma=void 0;var n=i(159),o=r(n);e.Plasma=o["default"]},159:function(t,e,i){"use strict";function r(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e["default"]=t,e}function n(t){return t&&t.__esModule?t:{"default":t}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var s=function(){function t(t,e){for(var i=0;i<e.length;i++){var r=e[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,i,r){return i&&t(e.prototype,i),r&&t(e,r),e}}(),a=i(160),h=n(a),u=i(99),d=r(u),l=i(27),f=n(l),c=function(){function t(e,i,r,n){o(this,t),this.pos1=0,this.pos2=5,this.pos3=0,this.pos4=0,this.depth=128,this._tpos1=293,this._tpos2=483,this._tpos3=120,this._tpos4=360,this._aSin=[],this._colors=[],this._step=0,this._span=0,this.width=r,this.height=n,this.create(e,i,r,n)}return s(t,[{key:"create",value:function(t,e,i,r){this._colors=(0,h["default"])(),this._span=this._colors.length-1,this._aSin=[];for(var n=0;1024>n;n++){var o=.703125*n*.0174532;this._aSin[n]=1024*Math.sin(o)}}},{key:"render",value:function(t){var e=(0,f["default"])(t);d.load(t,e),this._step<10&&this._step++,this._tpos4=this.pos4,this._tpos3=this.pos3;for(var i=0;i<this.height;i++){this._tpos1=this.pos1+5,this._tpos2=this.pos2+3,this._tpos2&=511,this._tpos3&=511;for(var r=0;r<this.width;r++){this._tpos1&=511,this._tpos2&=511;var n=this._aSin[this._tpos1]+this._aSin[this._tpos2]+this._aSin[this._tpos3]+this._aSin[this._tpos4],o=this.depth+(n>>4);0>o&&(o+=this._span,0>o&&(o=0)),o>=this._span&&(o-=this._span),this._colors[o]||console.log("bad index",o),d.set(r,i,this._colors[o].r,this._colors[o].g,this._colors[o].b),this._tpos1+=5,this._tpos2+=3}this._tpos3+=1,this._tpos4+=3}d.write(),this.pos1+=4,this.pos3+=2}}]),t}();e["default"]=c},160:function(t,e,i){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function n(){for(var t=arguments.length<=0||void 0===arguments[0]?1:arguments[0],e=arguments.length<=1||void 0===arguments[1]?1:arguments[1],i=[],r=0;359>=r;r++)i.push((0,s["default"])(r/359,t,e));return i}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var o=i(161),s=r(o)},161:function(t,e){"use strict";function i(t){var e=arguments.length<=1||void 0===arguments[1]?1:arguments[1],i=arguments.length<=2||void 0===arguments[2]?1:arguments[2],r=Math.floor(6*t),n=6*t-r,o=Math.floor(i*(1-e)*255),s=Math.floor(i*(1-n*e)*255),a=Math.floor(i*(1-(1-n)*e)*255);i=Math.floor(i*=255);var h=r%6;return 0===h?{r:i,g:a,b:o}:1===h?{r:s,g:i,b:o}:2===h?{r:o,g:i,b:a}:3===h?{r:o,g:s,b:i}:4===h?{r:a,g:o,b:i}:5===h?{r:i,g:o,b:s}:void 0}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=i},162:function(t,e,i){"use strict";"create index";function r(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(e,"__esModule",{value:!0}),e.SinusDots=void 0;var n=i(163),o=r(n);e.SinusDots=o["default"]},163:function(t,e){"use strict";function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var i=0;i<e.length;i++){var r=e[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,i,r){return i&&t(e.prototype,i),r&&t(e,r),e}}(),n=function(){function t(){var e=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],r=e.x,n=void 0===r?0:r,o=e.y,s=void 0===o?0:o,a=e.qty,h=void 0===a?400:a,u=e.xInc,d=void 0===u?10:u,l=e.yInc,f=void 0===l?5:l,c=e.width,v=void 0===c?100:c,y=e.height,p=void 0===y?80:y,_=e.x1,g=void 0===_?0:_,x=e.y1,m=void 0===x?0:x,b=e.x2,w=void 0===b?0:b,M=e.y2,k=void 0===M?0:M,X=e.x3,Y=void 0===X?0:X,O=e.y3,S=void 0===O?0:O,j=e.x4,P=void 0===j?0:j,F=e.y4,I=void 0===F?0:F;i(this,t),this.currentForm=0,this.x=n,this.y=s,this.forms=[],this._x=n,this._y=s,this._x1=0,this._y1=0,this._x2=0,this._y2=0,this._x3=0,this._y3=0,this._x4=0,this._y4=0,this._px1=0,this._py1=0,this._px2=0,this._py2=0,this.dots=[];for(var D=0;h>D;D++)this.dots.push({i:D,x:0,y:0,dx:0,dy:0});this.addForm({xInc:d,yInc:f,width:v,height:p,x1:g,y1:m,x2:w,y2:k,x3:Y,y3:S,x4:P,y4:I})}return r(t,[{key:"addForm",value:function(){var t=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],e=t.xInc,i=void 0===e?10:e,r=t.yInc,n=void 0===r?5:r,o=t.width,s=void 0===o?100:o,a=t.height,h=void 0===a?80:a,u=t.x1,d=void 0===u?0:u,l=t.y1,f=void 0===l?0:l,c=t.x2,v=void 0===c?0:c,y=t.y2,p=void 0===y?0:y,_=t.x3,g=void 0===_?0:_,x=t.y3,m=void 0===x?0:x,b=t.x4,w=void 0===b?0:b,M=t.y4,k=void 0===M?0:M;this.currentForm=this.forms.push({xInc:i,yInc:n,width:s,height:h,x1:d,y1:f,x2:v,y2:p,x3:g,y3:m,x4:w,y4:k})-1}},{key:"loadData",value:function(){var t=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],e=t.xInc,i=void 0===e?10:e,r=t.yInc,n=void 0===r?5:r,o=t.width,s=void 0===o?100:o,a=t.height,h=void 0===a?80:a,u=t.x1,d=void 0===u?0:u,l=t.y1,f=void 0===l?0:l,c=t.x2,v=void 0===c?0:c,y=t.y2,p=void 0===y?0:y,_=t.x3,g=void 0===_?0:_,x=t.y3,m=void 0===x?0:x,b=t.x4,w=void 0===b?0:b,M=t.y4,k=void 0===M?0:M;this._x=this.x,this._y=this.y,this._px1=0,this._py1=0,this._px2=0,this._py2=0,this.xInc=i,this.yInc=n,this.width=s,this.height=h,this.x1=d,this.y1=f,this.x2=v,this.y2=p,this.x3=g,this.y3=m,this.x4=w,this.y4=k}},{key:"update",value:function(){var t=this.forms[this.currentForm],e=1e-5*t.xInc,i=1e-5*t.yInc;this._x1=t.x1*e,this._y1=t.y1*i,this._x2=t.x2*e,this._y2=t.y2*i,this._x3=t.x3*e,this._y3=t.y3*i,this._x4=t.x4*e,this._y4=t.y4*i,this._px1+=this._x3,this._py1+=this._y3,this._px2+=this._x4,this._py2+=this._y4;var r=!0,n=!1,o=void 0;try{for(var s,a=this.dots[Symbol.iterator]();!(r=(s=a.next()).done);r=!0){var h=s.value;h.dx=h.x,h.dy=h.y,h.x=this._x+t.width*Math.sin(h.i*this._x1+this._px1)+t.width*Math.sin(h.i*this._x2+this._px2),h.y=this._y-t.height*Math.sin(h.i*this._y1+this._py1)+t.height*Math.sin(h.i*this._y2+this._py2)}}catch(u){n=!0,o=u}finally{try{!r&&a["return"]&&a["return"]()}finally{if(n)throw o}}}},{key:"render",value:function(t){var e=!0,i=!1,r=void 0;try{for(var n,o=this.dots[Symbol.iterator]();!(e=(n=o.next()).done);e=!0){var s=n.value;t(s)}}catch(a){i=!0,r=a}finally{try{!e&&o["return"]&&o["return"]()}finally{if(i)throw r}}}},{key:"renderDot",value:function(t,e){var i=arguments.length<=2||void 0===arguments[2]?1:arguments[2],r=!0,n=!1,o=void 0;try{for(var s,a=this.dots[Symbol.iterator]();!(r=(s=a.next()).done);r=!0){var h=s.value,u=h.dx+(h.x-h.dx)*t,d=h.dy+(h.y-h.dy)*t;e.fillRect(u,d,i,i)}}catch(l){n=!0,o=l}finally{try{!r&&a["return"]&&a["return"]()}finally{if(n)throw o}}}},{key:"renderImage",value:function(t,e,i){var r=!0,n=!1,o=void 0;try{for(var s,a=this.dots[Symbol.iterator]();!(r=(s=a.next()).done);r=!0){var h=s.value,u=h.dx+(h.x-h.dx)*t,d=h.dy+(h.y-h.dy)*t;e.drawImage(i,u,d)}}catch(l){n=!0,o=l}finally{try{!r&&a["return"]&&a["return"]()}finally{if(n)throw o}}}},{key:"destroy",value:function(){var t=!0,e=!1,i=void 0;try{for(var r,n=this.dots[Symbol.iterator]();!(t=(r=n.next()).done);t=!0){var o=r.value;o=void 0}}catch(s){e=!0,i=s}finally{try{!t&&n["return"]&&n["return"]()}finally{if(e)throw i}}this.dots=[],this.forms=[]}},{key:"xInc",get:function(){return this.forms[this.currentForm].xInc},set:function(t){this.forms[this.currentForm].xInc=t}},{key:"yInc",get:function(){return this.forms[this.currentForm].yInc},set:function(t){this.forms[this.currentForm].yInc=t}},{key:"width",get:function(){return this.forms[this.currentForm].width},set:function(t){this.forms[this.currentForm].width=t}},{key:"height",get:function(){return this.forms[this.currentForm].height},set:function(t){this.forms[this.currentForm].height=t}},{key:"x1",get:function(){return this.forms[this.currentForm].x1},set:function(t){this.forms[this.currentForm].x1=t}},{key:"y1",get:function(){return this.forms[this.currentForm].y1},set:function(t){this.forms[this.currentForm].y1=t}},{key:"x2",get:function(){return this.forms[this.currentForm].x2},set:function(t){this.forms[this.currentForm].x2=t}},{key:"y2",get:function(){return this.forms[this.currentForm].y2},set:function(t){this.forms[this.currentForm].y2=t}},{key:"x3",get:function(){return this.forms[this.currentForm].x3},set:function(t){this.forms[this.currentForm].x3=t}},{key:"y3",get:function(){return this.forms[this.currentForm].y3},set:function(t){this.forms[this.currentForm].y3=t}},{key:"x4",get:function(){return this.forms[this.currentForm].x4},set:function(t){this.forms[this.currentForm].x4=t}},{key:"y4",get:function(){return this.forms[this.currentForm].y4},set:function(t){this.forms[this.currentForm].y4=t}}]),t}();e["default"]=n},164:function(t,e,i){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(e,"__esModule",{value:!0}),e.Starfield2DImage=e.Starfield2DDot=e.Starfield2D=void 0;var n=i(165),o=r(n),s=i(167),a=r(s),h=i(168),u=r(h);e.Starfield2D=o["default"],e.Starfield2DDot=a["default"],e.Starfield2DImage=u["default"]},165:function(t,e,i){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t,e){for(var i=0;i<e.length;i++){var r=e[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,i,r){return i&&t(e.prototype,i),r&&t(e,r),e}}(),s=i(166),a=r(s),h=function(){function t(e,i){var r=arguments.length<=2||void 0===arguments[2]?{}:arguments[2],o=r.speedX,s=void 0===o?0:o,a=r.speedY,h=void 0===a?0:a,u=r.paddingX,d=void 0===u?0:u,l=r.paddingY,f=void 0===l?0:l;n(this,t),this.width=e,this.height=i,this.speedX=s,this.speedY=h,this.paddingX=d,this.paddingY=f,this.layers=[]}return o(t,[{key:"makeStarsArray",value:function(t){var e=[];if("function"==typeof t){var i=-this.paddingX,r=-this.paddingY,n=this.width+this.paddingX,o=this.height+this.paddingY;e=t(i,r,n,o);var s=!0,h=!1,u=void 0;try{for(var d,l=e[Symbol.iterator]();!(s=(d=l.next()).done);s=!0){var f=d.value;void 0===f.dx&&(f.dx=f.x),void 0===f.dy&&(f.dy=f.y)}}catch(c){h=!0,u=c}finally{try{!s&&l["return"]&&l["return"]()}finally{if(h)throw u}}}else for(var v=0;t>v;v++){var y=(0,a["default"])(-this.paddingX,this.width+this.paddingX),p=(0,a["default"])(-this.paddingY,this.height+this.paddingY),_=y,g=p;e.push({x:y,y:p,dx:_,dy:g})}return e}},{key:"addWaveLayer",value:function(){var t=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],e=t.qty,i=void 0===e?0:e,r=t.speedX,n=void 0===r?0:r,o=t.speedY,s=void 0===o?0:o,a=t.color,h=void 0===a?"#fff":a,u=t.image,d=void 0===u?void 0:u,l=t.starWidth,f=void 0===l?2:l,c=t.starHeight,v=void 0===c?2:c,y=t.sinX,p=void 0===y?0:y,_=t.sinY,g=void 0===_?0:_,x=t.cosX,m=void 0===x?0:x,b=t.cosY,w=void 0===b?0:b,M=t.sinAmpX,k=void 0===M?1:M,X=t.sinAmpY,Y=void 0===X?1:X,O=t.cosAmpX,S=void 0===O?1:O,j=t.cosAmpY,P=void 0===j?1:j,F=this.makeStarsArray(i),I=this.layers.length,D=0,A=0,T=0,E=0,C={i:I,speedX:n,speedY:s,stars:F,color:h,image:d,starWidth:f,starHeight:v,wave:!0,_sinX:D,_sinY:A,_cosX:T,_cosY:E,sinX:p,sinY:g,cosX:m,cosY:w,sinAmpX:k,sinAmpY:Y,cosAmpX:S,cosAmpY:P};return this.layers.push(C),C}},{key:"addLayer",value:function(){var t=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],e=t.qty,i=void 0===e?0:e,r=t.speedX,n=void 0===r?0:r,o=t.speedY,s=void 0===o?0:o,a=t.color,h=void 0===a?"#fff":a,u=t.image,d=void 0===u?void 0:u,l=t.starWidth,f=void 0===l?2:l,c=t.starHeight,v=void 0===c?2:c,y=this.makeStarsArray(i),p=this.layers.length,_={i:p,speedX:n,speedY:s,stars:y,color:h,image:d,starWidth:f,starHeight:v,wave:!1};return this.layers.push(_),_}},{key:"update",value:function(){var t=!0,e=!1,i=void 0;try{for(var r,n=this.layers[Symbol.iterator]();!(t=(r=n.next()).done);t=!0){var o=r.value;o.wave&&this.updateWaveLayer(o);var s=!0,a=!1,h=void 0;try{for(var u,d=o.stars[Symbol.iterator]();!(s=(u=d.next()).done);s=!0){var l=u.value;this.wrapX(l,o.speedX+this.speedX),this.wrapY(l,o.speedY+this.speedY)}}catch(f){a=!0,h=f}finally{try{!s&&d["return"]&&d["return"]()}finally{if(a)throw h}}}}catch(f){e=!0,i=f}finally{try{!t&&n["return"]&&n["return"]()}finally{if(e)throw i}}}},{key:"updateWaveLayer",value:function(t){0!==t.sinX?(t.speedX=Math.sin(t._sinX+=t.sinX)*t.sinAmpX,t._sinX>360&&(t._sinX=t._sinX%360)):0!==t.cosX&&(t.speedX=Math.cos(t._cosX+=t.cosX)*t.cosAmpX,t._cosX>360&&(t._cosX=t._cosX%360)),0!==t.sinY?(t.speedY=Math.sin(t._sinY+=t.sinY)*t.sinAmpY,t._sinY>360&&(t._sinY=t._sinY%360)):0!==t.cosY&&(t.speedY=Math.cos(t._cosY+=t.cosY)*t.cosAmpY,t._cosY>360&&(t._cosY=t._cosY%360))}},{key:"wrapX",value:function(t,e){if(0!==e){t.dx=t.x;var i=(t.x+e)%this.width;0>e?i<-this.paddingX&&(i+=this.width+this.paddingX,t.dx=i):i<t.dx&&(i-=this.paddingX,t.dx=i),t.x=i}}},{key:"wrapY",value:function(t,e){if(0!==e){t.dy=t.y;var i=(t.y+e)%this.height;0>e?i<-this.paddingY&&(i+=this.height+this.paddingY,t.dy=i):i<t.dy&&(i-=this.paddingY,t.dy=i),t.y=i}}},{key:"render",value:function(){var t=arguments.length<=0||void 0===arguments[0]?0:arguments[0],e=arguments[1],i=!0,r=!1,n=void 0;try{for(var o,s=this.layers[Symbol.iterator]();!(i=(o=s.next()).done);i=!0){var a=o.value,h=!0,u=!1,d=void 0;try{for(var l,f=a.stars[Symbol.iterator]();!(h=(l=f.next()).done);h=!0){var c=l.value,v=c.dx+(c.x-c.dx)*t,y=c.dy+(c.y-c.dy)*t;e(a.i,v,y)}}catch(p){u=!0,d=p}finally{try{!h&&f["return"]&&f["return"]()}finally{if(u)throw d}}}}catch(p){r=!0,n=p}finally{try{!i&&s["return"]&&s["return"]()}finally{if(r)throw n}}}},{key:"destroy",value:function(){var t=!0,e=!1,i=void 0;try{for(var r,n=this.layers[Symbol.iterator]();!(t=(r=n.next()).done);t=!0){var o=r.value;o.stars=[]}}catch(s){e=!0,i=s}finally{try{!t&&n["return"]&&n["return"]()}finally{if(e)throw i}}this.layers=[]}}]),t}();e["default"]=h},166:function(t,e){"use strict";function i(t,e){return Math.floor(Math.random()*(e-t+1)+t)}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=i},167:function(t,e,i){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0});var a=function(){function t(t,e){for(var i=0;i<e.length;i++){var r=e[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,i,r){return i&&t(e.prototype,i),r&&t(e,r),e}}(),h=i(165),u=r(h),d=function(t){function e(t,i){var r=arguments.length<=2||void 0===arguments[2]?{}:arguments[2],s=r.speedX,a=void 0===s?0:s,h=r.speedY,u=void 0===h?0:h,d=r.paddingX,l=void 0===d?0:d,f=r.paddingY,c=void 0===f?0:f;return n(this,e),o(this,Object.getPrototypeOf(e).call(this,t,i,{speedX:a,speedY:u,paddingX:l,paddingY:c}))}return s(e,t),a(e,[{key:"render",value:function(t,e){var i=!0,r=!1,n=void 0;try{for(var o,s=this.layers[Symbol.iterator]();!(i=(o=s.next()).done);i=!0){var a=o.value;e.fillStyle=a.color;var h=!0,u=!1,d=void 0;try{for(var l,f=a.stars[Symbol.iterator]();!(h=(l=f.next()).done);h=!0){var c=l.value,v=c.dx+(c.x-c.dx)*t,y=c.dy+(c.y-c.dy)*t;e.fillRect(v,y,a.starWidth,a.starHeight)}}catch(p){u=!0,d=p}finally{try{!h&&f["return"]&&f["return"]()}finally{if(u)throw d}}}}catch(p){r=!0,n=p}finally{try{!i&&s["return"]&&s["return"]()}finally{if(r)throw n}}}}]),e}(u["default"]);e["default"]=d},168:function(t,e,i){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0});var a=function(){function t(t,e){for(var i=0;i<e.length;i++){var r=e[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,i,r){return i&&t(e.prototype,i),r&&t(e,r),e}}(),h=i(165),u=r(h),d=i(10),l=r(d),f=function(t){function e(t,i){var r=arguments.length<=2||void 0===arguments[2]?{}:arguments[2],s=r.speedX,a=void 0===s?0:s,h=r.speedY,u=void 0===h?0:h,d=r.paddingX,l=void 0===d?0:d,f=r.paddingY,c=void 0===f?0:f;return n(this,e),o(this,Object.getPrototypeOf(e).call(this,t,i,{speedX:a,speedY:u,paddingX:l,paddingY:c}))}return s(e,t),a(e,[{key:"render",value:function(t,e){var i=!0,r=!1,n=void 0;try{for(var o,s=this.layers[Symbol.iterator]();!(i=(o=s.next()).done);i=!0){var a=o.value,h=!0,u=!1,d=void 0;try{for(var f,c=a.stars[Symbol.iterator]();!(h=(f=c.next()).done);h=!0){var v=f.value,y=v.dx+(v.x-v.dx)*t,p=v.dy+(v.y-v.dy)*t;(0,l["default"])(e,a.image,{x:y,y:p})}}catch(_){u=!0,d=_}finally{try{!h&&c["return"]&&c["return"]()}finally{if(u)throw d}}}}catch(_){r=!0,n=_}finally{try{!i&&s["return"]&&s["return"]()}finally{if(r)throw n}}}}]),e}(u["default"]);e["default"]=f}})});
//# sourceMappingURL=data:application/json;base64,