!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("math",[],e):"object"==typeof exports?exports.math=e():(t.lazer=t.lazer||{},t.lazer.math=e())}(this,function(){return function(t){function e(r){if(n[r])return n[r].exports;var u=n[r]={exports:{},id:r,loaded:!1};return t[r].call(u.exports,u,u.exports,e),u.loaded=!0,u.exports}var n={};return e.m=t,e.c=n,e.p="",e(0)}([function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function u(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}Object.defineProperty(e,"__esModule",{value:!0}),e.vector=e.transform=e.quaternion=e.matrix=e.interpolation=e.easing=e.distance=e.Wrap=e.SnapTo=e.SmootherStep=e.SmoothStep=e.SinCosTableGenerator=e.RoundTo=e.RoundAwayFromZero=e.RotateAround=e.Rotate=e.RandomDataGenerator=e.RadToDeg=e.Percent=e.MinSub=e.MaxAdd=e.Math=e.Linear=e.IsPow2=e.GetPow2=e.Fuzzy=e.FloorTo=e.FloatBetween=e.Factorial=e.Difference=e.DegToRad=e.Constants=e.Clamp=e.CeilTo=e.CatmullRom=e.Between=e.Bernstein=e.Average=e.Angle=void 0;var i=n(409),a=u(i),o=n(410),l=r(o),s=n(411),f=r(s),c=n(166),d=r(c),h=n(413),v=r(h),y=n(414),p=r(y),M=n(28),_=r(M),b=n(198),g=u(b),P=n(104),O=r(P),j=n(415),m=r(j),w=n(412),A=r(w),F=n(416),S=r(F),k=n(417),x=r(k),T=n(418),I=u(T),B=n(419),q=r(B),R=n(420),C=r(R),D=n(279),E=r(D),V=n(421),z=r(V),L=n(424),Y=r(L),X=n(425),U=r(X),N=n(426),Z=r(N),Q=n(105),G=r(Q),W=n(427),H=r(W),J=n(428),K=r(J),$=n(429),tt=r($),et=n(430),nt=r(et),rt=n(423),ut=r(rt),it=n(431),at=r(it),ot=n(432),lt=r(ot),st=n(433),ft=r(st),ct=n(422),dt=u(ct),ht=n(106),vt=r(ht),yt=n(434),pt=u(yt),Mt=n(437),_t=u(Mt),bt=n(449),gt=u(bt),Pt=n(453),Ot=u(Pt),jt=n(561),mt=u(jt),wt=n(589),At=u(wt),Ft=n(601),St=u(Ft);e.Angle=a,e.Average=l["default"],e.Bernstein=f["default"],e.Between=d["default"],e.CatmullRom=v["default"],e.CeilTo=p["default"],e.Clamp=_["default"],e.Constants=g,e.DegToRad=O["default"],e.Difference=m["default"],e.Factorial=A["default"],e.FloatBetween=S["default"],e.FloorTo=x["default"],e.Fuzzy=I,e.GetPow2=q["default"],e.IsPow2=C["default"],e.Linear=E["default"],e.Math=z["default"],e.MaxAdd=Y["default"],e.MinSub=U["default"],e.Percent=Z["default"],e.RadToDeg=G["default"],e.RandomDataGenerator=H["default"],e.Rotate=K["default"],e.RotateAround=tt["default"],e.RoundAwayFromZero=nt["default"],e.RoundTo=ut["default"],e.SinCosTableGenerator=at["default"],e.SmoothStep=lt["default"],e.SmootherStep=ft["default"],e.SnapTo=dt,e.Wrap=vt["default"],e.distance=pt,e.easing=_t,e.interpolation=gt,e.matrix=Ot,e.quaternion=mt,e.transform=At,e.vector=St},,,,,,,,,,,,,,,,,,,,,,,,,,,,function(t,e){"use strict";function n(t,e,n){return e>t?e:t>n?n:t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(t,e){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),u=function(){function t(){var e=arguments.length<=0||void 0===arguments[0]?0:arguments[0],r=arguments.length<=1||void 0===arguments[1]?0:arguments[1];n(this,t),this[0]=e,this[1]=r}return r(t,[{key:"set",value:function(t){var e=arguments.length<=1||void 0===arguments[1]?t:arguments[1];return this[0]=t,this[1]=e,this}},{key:"setTo",value:function(t){var e=arguments.length<=1||void 0===arguments[1]?t:arguments[1];return this[0]=t,this[1]=e,this}},{key:"zero",value:function(){return this[0]=0,this[1]=0,this}},{key:"add",value:function(t){return this[0]+=t[0],this[1]+=t[1],this}},{key:"addScalar",value:function(t){return this[0]+=t,this[1]+=t,this}},{key:"addVectors",value:function(t,e){return this[0]=t[0]+e[0],this[1]=t[1]+e[1],this}},{key:"addScaledVector",value:function(t,e){return this[0]+=t[0]*e,this[1]+=t[1]*e,this}},{key:"sub",value:function(t){return this[0]-=t[0],this[1]-=t[1],this}},{key:"subScalar",value:function(t){return this[0]-=t,this[1]-=t,this}},{key:"subVectors",value:function(t,e){return this[0]=t[0]-e[0],this[1]=t[1]-e[1],this}},{key:"multiply",value:function(t){return this[0]*=t[0],this[1]*=t[1],this}},{key:"multiplyScalar",value:function(t){return isFinite(t)?(this[0]*=t,this[1]*=t):(this[0]=0,this[1]=0),this}},{key:"scale",value:function(t){var e=arguments.length<=1||void 0===arguments[1]?t:arguments[1];return this[0]*=t,this[1]*=e,this}},{key:"scaleV",value:function(t){return this[0]*=t[0],this[1]*=t[1],this}},{key:"divide",value:function(t){return this[0]/=t,this[1]/=t,this}},{key:"divideScalar",value:function(t){var e=1/t;return isFinite(e)?(this[0]*=e,this[1]*=e):(this[0]=0,this[1]=0),this}},{key:"min",value:function(t){return this[0]=Math.min(this[0],t[0]),this[1]=Math.min(this[1],t[1]),this}},{key:"max",value:function(t){return this[0]=Math.max(this[0],t[0]),this[1]=Math.max(this[1],t[1]),this}},{key:"clamp",value:function(t,e){return this[0]=Math.max(t[0],Math.min(e[0],this[0])),this[1]=Math.max(t[1],Math.min(e[1],this[1])),this}},{key:"floor",value:function(){return this[0]=Math.floor(this[0]),this[1]=Math.floor(this[1]),this}},{key:"ceil",value:function(){return this[0]=Math.ceil(this[0]),this[1]=Math.ceil(this[1]),this}},{key:"round",value:function(){return this[0]=Math.round(this[0]),this[1]=Math.round(this[1]),this}},{key:"roundToZero",value:function(){return this[0]<0?this[0]=Math.ceil(this[0]):this[0]=Math.floor(this[0]),this[1]<1?this[1]=Math.ceil(this[1]):this[1]=Math.floor(this[1]),this}},{key:"negate",value:function(){return this[0]=-this[0],this[1]=-this[1],this}},{key:"normalize",value:function(){var t=this.length();return t>0&&(this[0]/=t,this[1]/=t),this}},{key:"perp",value:function(){var t=this[0],e=this[1];return this[0]=e,this[1]=-t,this}},{key:"dot",value:function(t){return this[0]*t[0]+this[1]*t[1]}},{key:"lengthSq",value:function(){return this[0]*this[0]+this[1]*this[1]}},{key:"lengthManhattan",value:function(){return Math.abs(this[0])+Math.abs(this[1])}},{key:"toString",value:function(){return"[Vec2 (x="+this[0]+", y="+this[1]+")]"}},{key:"x",get:function(){return this[0]},set:function(t){this[0]=t}},{key:"y",get:function(){return this[1]},set:function(t){this[1]=t}},{key:"length",set:function(t){var e=Math.atan2(this[1],this[0]);this[0]=Math.cos(e)*t,this[1]=Math.sin(e)*t},get:function(){return Math.sqrt(this[0]*this[0]+this[1]*this[1])}}]),t}();e["default"]=u},,,,function(t,e){"use strict";function n(t){return t*r}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Math.PI/180},function(t,e){"use strict";function n(t){return t*r}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=180/Math.PI},function(t,e){"use strict";function n(t,e,n){var r=n-e;if(0>=r)return 0;var u=(t-e)%r;return 0>u&&(u+=r),u+e}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},,,,,,,,,function(t,e){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),u=function(){function t(){var e=arguments.length<=0||void 0===arguments[0]?0:arguments[0],r=arguments.length<=1||void 0===arguments[1]?0:arguments[1],u=arguments.length<=2||void 0===arguments[2]?0:arguments[2];n(this,t),this[0]=e,this[1]=r,this[2]=u}return r(t,[{key:"zero",value:function(){return this[0]=0,this[1]=0,this[2]=0,this}},{key:"add",value:function(t){return this[0]+=t[0],this[1]+=t[1],this[2]+=t[2],this}},{key:"sub",value:function(t){return this[0]-=t[0],this[1]-=t[1],this[2]-=t[2],this}},{key:"scale",value:function(t){var e=arguments.length<=1||void 0===arguments[1]?t:arguments[1],n=arguments.length<=2||void 0===arguments[2]?t:arguments[2];return this[0]*=t,this[1]*=e,this[2]*=n,this}},{key:"scaleV",value:function(t){return this[0]*=t[0],this[1]*=t[1],this[2]*=t[2],this}},{key:"div",value:function(t){return this[0]/=t,this[1]/=t,this[2]/=t,this}},{key:"floor",value:function(){return this[0]=Math.floor(this[0]),this[1]=Math.floor(this[1]),this[2]=Math.floor(this[2]),this}},{key:"ceil",value:function(){return this[0]=Math.ceil(this[0]),this[1]=Math.ceil(this[1]),this[2]=Math.ceil(this[2]),this}},{key:"negate",value:function(){return this[0]=-this[0],this[1]=-this[1],this[2]=-this[2],this}},{key:"normalize",value:function(){var t=this.length();return t>0&&(this[0]/=t,this[1]/=t,this[2]/=t),this}},{key:"perp",value:function(){var t=this[0],e=this[1];return this[0]=e,this[1]=-t,this}},{key:"dot",value:function(t){return this[0]*t[0]+this[1]*t[1]+this[2]*(t[2]||1)}},{key:"lengthSq",value:function(){return this[0]*this[0]+this[1]*this[1]+this[2]*this[2]}},{key:"lengthManhattan",value:function(){return Math.abs(this[0])+Math.abs(this[1])+Math.abs(this[2])}},{key:"toString",value:function(){return"[Vec2 (x="+this[0]+", y="+this[1]+")]"}},{key:"x",get:function(){return this[0]},set:function(t){this[0]=t}},{key:"y",get:function(){return this[1]},set:function(t){this[1]=t}},{key:"z",get:function(){return this[2]},set:function(t){this[2]=t}},{key:"length",set:function(t){var e=t/Math.sqrt(this[0]*this[0]+this[1]*this[1]+this[2]*this[2]);this[0]*=e,this[1]*=e,this[2]*=e},get:function(){return Math.sqrt(this[0]*this[0]+this[1]*this[1]+this[2]*this[2])}}]),t}();e["default"]=u},function(t,e){"use strict";function n(t,e,n,u){var i=arguments.length<=4||void 0===arguments[4]?new r(4):arguments[4];return i[0]=t,i[1]=e,i[2]=n,i[3]=u,i}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},,function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(2):arguments[2];return n[0]=t,n[1]=e,n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),u=function(){function t(){var e=arguments.length<=0||void 0===arguments[0]?1:arguments[0],r=arguments.length<=1||void 0===arguments[1]?0:arguments[1],u=arguments.length<=2||void 0===arguments[2]?0:arguments[2],i=arguments.length<=3||void 0===arguments[3]?1:arguments[3],a=arguments.length<=4||void 0===arguments[4]?0:arguments[4],o=arguments.length<=5||void 0===arguments[5]?0:arguments[5];n(this,t),this[0]=e,this[1]=r,this[2]=0,this[3]=u,this[4]=i,this[5]=0,this[6]=a,this[7]=o,this[8]=1,this.rotationDirection=-1}return r(t,[{key:"transform",value:function(){var t=arguments.length<=0||void 0===arguments[0]?0:arguments[0],e=arguments.length<=1||void 0===arguments[1]?0:arguments[1],n=arguments.length<=2||void 0===arguments[2]?0:arguments[2],r=arguments.length<=3||void 0===arguments[3]?1:arguments[3],u=arguments.length<=4||void 0===arguments[4]?1:arguments[4],i=Math.cos(n),a=Math.sin(n)*this.rotationDirection;return this[0]=i*r,this[1]=-a*u,this[2]=0,this[3]=a*r,this[4]=i*u,this[5]=0,this[6]=t,this[7]=e,this[8]=1,this}},{key:"multiply",value:function(t){var e=this[0],n=this[1],r=this[3],u=this[4],i=this[6],a=this[7];return this[0]=t[0]*e+t[1]*r,this[1]=t[0]*n+t[1]*u,this[2]=0,this[3]=t[3]*e+t[4]*r,this[4]=t[3]*n+t[4]*u,this[5]=0,this[6]=i*t[0]+a*t[3]+t[6],this[7]=i*t[1]+a*t[4]+t[7],this[8]=1,this}},{key:"a",get:function(){return this[0]}},{key:"b",get:function(){return this[1]}},{key:"c",get:function(){return this[3]}},{key:"d",get:function(){return this[4]}},{key:"tx",get:function(){return this[6]}},{key:"ty",get:function(){return this[7]}}]),t}();e["default"]=u},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(t,e){"use strict";function n(t,e){return Math.floor(Math.random()*(e-t+1)+t)}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},,,,,,,,,,,,,,,,,,,,,,,,,function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function u(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),a=n(192),o=r(a),l=function(){function t(){var e=arguments.length<=0||void 0===arguments[0]?0:arguments[0],n=arguments.length<=1||void 0===arguments[1]?0:arguments[1],r=arguments.length<=2||void 0===arguments[2]?0:arguments[2],i=arguments.length<=3||void 0===arguments[3]?1:arguments[3],a=arguments.length<=4||void 0===arguments[4]?1:arguments[4];u(this,t),this.transform=new o["default"](e,n,r,i,a),this.position=this.transform.position,this.scale=this.transform.scale,this.rotationAnchor=this.transform.rotationAnchor}return i(t,[{key:"x",get:function(){return this.position.getX()},set:function(t){return this.position.setX(t)}},{key:"y",get:function(){return this.position.getY()},set:function(t){return this.position.setY(t)}},{key:"rotation",get:function(){return this.transform.rotation.getValue()},set:function(t){return this.transform.rotation.setValue(t)}}]),t}();e["default"]=l},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function u(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),a=n(193),o=r(a),l=n(194),s=r(l),f=n(196),c=r(f),d=n(197),h=r(d),v=n(199),y=r(v),p=function(){function t(){var e=arguments.length<=0||void 0===arguments[0]?0:arguments[0],n=arguments.length<=1||void 0===arguments[1]?0:arguments[1],r=arguments.length<=2||void 0===arguments[2]?0:arguments[2],i=arguments.length<=3||void 0===arguments[3]?1:arguments[3],a=arguments.length<=4||void 0===arguments[4]?1:arguments[4];u(this,t),this.position=new c["default"](this,e,n),this.scale=new s["default"](this,i,a),this.rotation=new h["default"](this,r),this.rotationAnchor=new y["default"](this,0,0),this.local=(0,o["default"])(i,0,0,a,e,n),this.interpolate=!1,this.immediate=!1,this.dirty=!0}return i(t,[{key:"addProperties",value:function(t){return this.position.addProperties(t),this.rotation.addProperties(t),t.position=this.position,t.scale=this.scale,t.rotationAnchor=this.rotationAnchor,t}},{key:"enableImmediateUpdates",value:function(){return this.immediate=!0,this}},{key:"disableImmediateUpdates",value:function(){return this.immediate=!1,this.dirty=!0,this}},{key:"enableInterpolation",value:function(){return this.interpolate=!0,this.position.reset(this.position.x,this.position.y),this.scale.reset(this.scale.x,this.scale.y),this}},{key:"disableInterpolation",value:function(){return this.interpolate=!1,this}},{key:"setDirty",value:function(){return this.immediate?this.updateTransform():this.dirty=!0,this}},{key:"updateTransform",value:function(){var t=arguments.length<=0||void 0===arguments[0]?1:arguments[0];return this.rotation.isFast?(this.local[0]=this.scale[0],this.local[1]=0,this.local[2]=0,this.local[3]=this.scale[1]):(this.local[0]=this.rotation.cr*this.scale[0],this.local[1]=this.rotation.sr*this.scale[0],this.local[2]=-this.rotation.sr*this.scale[1],this.local[3]=this.rotation.cr*this.scale[1]),this.interpolate?(this.local[4]=this.position.getDeltaX(t),this.local[5]=this.position.getDeltaY(t)):(this.local[4]=this.position[0],this.local[5]=this.position[1]),this.dirty=!1,this}},{key:"destroy",value:function(){this.position.destroy(),this.scale.destroy(),this.rotation.destroy(),this.rotationAnchor.destroy(),this.local=void 0}}]),t}();e["default"]=p},function(t,e){"use strict";function n(){var t=arguments.length<=0||void 0===arguments[0]?1:arguments[0],e=arguments.length<=1||void 0===arguments[1]?0:arguments[1],n=arguments.length<=2||void 0===arguments[2]?0:arguments[2],u=arguments.length<=3||void 0===arguments[3]?1:arguments[3],i=arguments.length<=4||void 0===arguments[4]?0:arguments[4],a=arguments.length<=5||void 0===arguments[5]?0:arguments[5],o=arguments.length<=6||void 0===arguments[6]?new r(6):arguments[6];return o[0]=t,o[1]=e,o[2]=n,o[3]=u,o[4]=i,o[5]=a,o}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function u(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function a(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),l=n(195),s=r(l),f=function(t){function e(t){var n=arguments.length<=1||void 0===arguments[1]?0:arguments[1],r=arguments.length<=2||void 0===arguments[2]?0:arguments[2];return u(this,e),i(this,Object.getPrototypeOf(e).call(this,t,n,r))}return a(e,t),o(e,[{key:"addProperties",value:function(t){var e=this;t.hasOwnProperty("scale")||(t.scale={}),Object.defineProperties(t.scale,{x:{enumerable:!0,get:function(){return e.getX()},set:function(t){return e.setX(t)}},y:{enumerable:!0,get:function(){return e.getY()},set:function(t){return e.setY(t)}}})}}]),e}(s["default"]);e["default"]=f},function(t,e){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),u=function(){function t(e){var r=arguments.length<=1||void 0===arguments[1]?0:arguments[1],u=arguments.length<=2||void 0===arguments[2]?0:arguments[2];n(this,t),this.transform=e,this[0]=r,this[1]=u,this[2]=r,this[3]=u}return r(t,[{key:"getX",value:function(){return this[0]}},{key:"getY",value:function(){return this[1]}},{key:"getDeltaX",value:function(){var t=arguments.length<=0||void 0===arguments[0]?0:arguments[0];return this[2]+(this[0]-this[2])*t}},{key:"getDeltaY",value:function(){var t=arguments.length<=0||void 0===arguments[0]?0:arguments[0];return this[3]+(this[1]-this[3])*t}},{key:"setX",value:function(t){this[0]!==t&&(this[2]=this[0],this[0]=t,this.transform.setDirty())}},{key:"setY",value:function(t){this[1]!==t&&(this[3]=this[1],this[1]=t,this.transform.setDirty())}},{key:"set",value:function(t){var e=arguments.length<=1||void 0===arguments[1]?t:arguments[1];this[2]=this[0],this[3]=this[1],this[0]=t,this[1]=e,this.transform.setDirty()}},{key:"resetX",value:function(t){this[0]=t,this[2]=t,this.transform.setDirty()}},{key:"resetY",value:function(t){this[1]=t,this[3]=t,this.transform.setDirty()}},{key:"reset",value:function(t){var e=arguments.length<=1||void 0===arguments[1]?t:arguments[1];this[0]=t,this[1]=e,this[2]=t,this[3]=e,this.transform.setDirty()}},{key:"setTransform",value:function(t){this.transform=t}},{key:"destroy",value:function(){this.transform=void 0}},{key:"x",get:function(){return this[0]},set:function(t){this.setX(t)}},{key:"y",get:function(){return this[1]},set:function(t){this.setY(t)}}]),t}();e["default"]=u},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function u(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function a(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),l=n(195),s=r(l),f=function(t){function e(t){var n=arguments.length<=1||void 0===arguments[1]?0:arguments[1],r=arguments.length<=2||void 0===arguments[2]?0:arguments[2];return u(this,e),i(this,Object.getPrototypeOf(e).call(this,t,n,r))}return a(e,t),o(e,[{key:"addProperties",value:function(t){var e=this;Object.defineProperties(t,{x:{enumerable:!0,get:function(){return e.getX()},set:function(t){return e.setX(t)}},y:{enumerable:!0,get:function(){return e.getY()},set:function(t){return e.setY(t)}}})}}]),e}(s["default"]);e["default"]=f},function(t,e,n){"use strict";function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var u=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=n(198),a=function(){function t(e){var n=arguments.length<=1||void 0===arguments[1]?0:arguments[1];r(this,t),this.transform=e,this[0]=n,this[1]=n%i.PI2,this.sr=0,this.cr=0}return u(t,[{key:"getValue",value:function(){return this[0]}},{key:"setValue",value:function(t){this[0]!==t&&(this[0]=t,this[1]=t%i.PI2,this[1]&&(this.sr=Math.sin(t),this.cr=Math.cos(t)),this.transform.setDirty())}},{key:"setTransform",value:function(t){this.transform=t}},{key:"addProperties",value:function(t){var e=this;Object.defineProperties(t,{rotation:{enumerable:!0,get:function(){return e.getValue()},set:function(t){return e.setValue(t)}}})}},{key:"destroy",value:function(){this.transform=void 0}},{key:"isFast",get:function(){return 0===this[1]}}]),t}();e["default"]=a},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.PI2=2*Math.PI,e.HALFPI=.5*Math.PI,e.EPSILON=1e-6},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function u(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function a(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),l=n(195),s=r(l),f=function(t){function e(t){var n=arguments.length<=1||void 0===arguments[1]?0:arguments[1],r=arguments.length<=2||void 0===arguments[2]?0:arguments[2];return u(this,e),i(this,Object.getPrototypeOf(e).call(this,t,n,r))}return a(e,t),o(e,[{key:"addProperties",value:function(t){var e=this;t.hasOwnProperty("rotationAnchor")||(t.rotationAnchor={}),Object.defineProperties(t.rotationAnchor,{x:{enumerable:!0,get:function(){return e.getX()},set:function(t){return e.setX(t)}},y:{enumerable:!0,get:function(){return e.getY()},set:function(t){return e.setY(t)}}})}}]),e}(s["default"]);e["default"]=f},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?1:arguments[2];t.dirty&&t.updateTransform(n),e.setTransform(t.local[0],t.local[1],t.local[2],t.local[3],t.local[4],t.local[5])}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},,,,,,,,,,,,,,,function(t,e){"use strict";function n(t,e,n,r){var u=t-n,i=e-r;return Math.sqrt(u*u+i*i)}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(t,e){"use strict";function n(t,e,n){return(e-t)*n+t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function u(t,e,n,r){return Math.atan2(r-e,n-t)}function i(t,e,n,r){return Math.atan2(n-t,r-e)}function a(t,e){return Math.atan2(e.y-t.y,e.x-t.x)}function o(t,e){return Math.atan2(e.x-t.x,e.y-t.y)}function l(t){return this.normalize(t+Math.PI)}function s(t){return t%=2*Math.PI,t>=0?t:t+2*Math.PI}function f(t){return(0,h["default"])(t,-Math.PI,Math.PI)}function c(t){return(0,h["default"])(t,-180,180)}Object.defineProperty(e,"__esModule",{value:!0}),e.between=u,e.betweenY=i,e.betweenPoints=a,e.betweenPointsY=o,e.reverse=l,e.normalize=s,e.wrap=f,e.wrapDeg=c;var d=n(106),h=r(d)},function(t,e){"use strict";function n(){for(var t=0,e=arguments.length,n=0;e>n;n++)t+=+arguments[n];return t/e}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function u(t,e){return(0,a["default"])(t)/(0,a["default"])(e)/(0,a["default"])(t-e)}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=u;var i=n(412),a=r(i)},function(t,e){"use strict";function n(t){if(0===t)return 1;for(var e=t;--t;)e*=t;return e}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e,n,r,u){var i=.5*(n-t),a=.5*(r-e),o=u*u,l=u*o;return(2*e-2*n+i+a)*l+(-3*e+3*n-2*i-a)*o+i*u+e}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?0:arguments[1],n=arguments.length<=2||void 0===arguments[2]?10:arguments[2],r=Math.pow(n,-e);return Math.ceil(t*r)/r}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e){return Math.abs(t-e)}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e){return Math.random()*(e-t+1)+t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?0:arguments[1],n=arguments.length<=2||void 0===arguments[2]?10:arguments[2],r=Math.pow(n,-e);return Math.floor(t*r)/r}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?1e-4:arguments[2];return Math.abs(t-e)<n}function r(t,e){var n=arguments.length<=2||void 0===arguments[2]?1e-4:arguments[2];return e+n>t}function u(t,e){var n=arguments.length<=2||void 0===arguments[2]?1e-4:arguments[2];return t>e-n}function i(t){var e=arguments.length<=1||void 0===arguments[1]?1e-4:arguments[1];return Math.ceil(t-e)}function a(t){var e=arguments.length<=1||void 0===arguments[1]?1e-4:arguments[1];return Math.floor(t+e)}Object.defineProperty(e,"__esModule",{value:!0}),e.equal=n,e.lessThan=r,e.greaterThan=u,e.ceil=i,e.floor=a},function(t,e){"use strict";function n(t){var e=Math.log(t)/.6931471805599453;return 1<<Math.ceil(e)}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t){return t>0&&0===(t&t-1)}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function u(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var a=n(418),o=u(a),l=n(422),s=u(l),f=n(409),c=u(f),d=n(423),h=r(d),v=n(417),y=r(v),p=n(414),M=r(p),_=function b(){i(this,b),this.fuzzy=o,this.snap=s,this.roundTo=h["default"],this.floorTo=y["default"],this.ceilTo=M["default"],this.angle=c};e["default"]=_},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?0:arguments[2];return 0===e?t:(t-=n,t=e*Math.round(t/e),n+t)}function r(t,e){var n=arguments.length<=2||void 0===arguments[2]?0:arguments[2];return 0===e?t:(t-=n,t=e*Math.floor(t/e),n+t)}function u(t,e){var n=arguments.length<=2||void 0===arguments[2]?0:arguments[2];return 0===e?t:(t-=n,t=e*Math.ceil(t/e),n+t)}Object.defineProperty(e,"__esModule",{value:!0}),e.to=n,e.floor=r,e.ceil=u},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?0:arguments[1],n=arguments.length<=2||void 0===arguments[2]?10:arguments[2],r=Math.pow(n,-e);return Math.round(t*r)/r}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e,n){return Math.min(t+e,n)}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e,n){return Math.max(t-e,n)}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?0:arguments[2];return t>e||n>e?1:n>t||n>t?0:(t-n)/e}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),u=function(){function t(){var e=arguments.length<=0||void 0===arguments[0]?[]:arguments[0];n(this,t),this.c=1,this.s0=0,this.s1=0,this.s2=0,"string"==typeof e?this.state(e):this.sow(e)}return r(t,[{key:"sow",value:function(t){if(this.s0=this.hash(" "),this.s1=this.hash(this.s0),this.s2=this.hash(this.s1),this.c=1,t)for(var e=0;e<t.length&&null!=t[e];e++){var n=t[e];this.s0-=this.hash(n),this.s0+=~~(this.s0<0),this.s1-=this.hash(n),this.s1+=~~(this.s1<0),this.s2-=this.hash(n),this.s2+=~~(this.s2<0)}}},{key:"hash",value:function(t){var e,n=4022871197;t=t.toString();for(var r=0;r<t.length;r++)n+=t.charCodeAt(r),e=.02519603282416938*n,n=e>>>0,e-=n,e*=n,n=e>>>0,e-=n,n+=4294967296*e;return 2.3283064365386963e-10*(n>>>0)}},{key:"integerInRange",value:function(t,e){
return Math.floor(this.realInRange(0,e-t+1)+t)}},{key:"between",value:function(t,e){return Math.floor(this.realInRange(0,e-t+1)+t)}},{key:"realInRange",value:function(t,e){return this.frac*(e-t)+t}},{key:"pick",value:function(t){return t[this.between(0,t.length-1)]}},{key:"weightedPick",value:function(t){return t[~~(Math.pow(this.frac,2)*(t.length-1)+.5)]}},{key:"timestamp",value:function(){var t=arguments.length<=0||void 0===arguments[0]?9466848e5:arguments[0],e=arguments.length<=1||void 0===arguments[1]?1577862e6:arguments[1];return this.realInRange(t,e)}},{key:"state",value:function(t){return"string"==typeof t&&t.match(/^!rnd/)&&(t=t.split(","),this.c=parseFloat(t[1]),this.s0=parseFloat(t[2]),this.s1=parseFloat(t[3]),this.s2=parseFloat(t[4])),["!rnd",this.c,this.s0,this.s1,this.s2].join(",")}},{key:"rnd",get:function(){var t=2091639*this.s0+2.3283064365386963e-10*this.c;return this.c=0|t,this.s0=this.s1,this.s1=this.s2,this.s2=t-this.c,this.s2}},{key:"integer",get:function(){return 4294967296*this.rnd}},{key:"frac",get:function(){return this.rnd+1.1102230246251565e-16*(2097152*this.rnd|0)}},{key:"real",get:function(){return this.integer+this.frac}},{key:"normal",get:function(){return 1-2*this.frac}},{key:"uuid",get:function(){var t="",e="";for(e=t="";t++<36;e+=~t%5|3*t&4?(15^t?8^this.frac*(20^t?16:4):4).toString(16):"-");return e}},{key:"angle",get:function(){return this.between(-180,180)}}]),t}();e["default"]=u},function(t,e){"use strict";function n(t,e){var n=t.x,r=t.y;return t.x=n*Math.cos(e)-r*Math.sin(e),t.y=n*Math.sin(e)+r*Math.cos(e),t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e,n,r){var u=Math.cos(r),i=Math.sin(r),a=t.x-e,o=t.y-n;return t.x=a*u-o*i+e,t.y=a*i+o*u+n,t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t){return t>0?Math.ceil(t):Math.floor(t)}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?1:arguments[1],n=arguments.length<=2||void 0===arguments[2]?1:arguments[2],r=arguments.length<=3||void 0===arguments[3]?1:arguments[3];r*=Math.PI/t;for(var u=[],i=[],a=0;t>a;a++)n-=e*r,e+=n*r,u[a]=n,i[a]=e;return{sin:i,cos:u,length:t}}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e,n){return t=Math.max(0,Math.min(1,(t-e)/(n-e))),t*t*(3-2*t)}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e,n){return t=Math.max(0,Math.min(1,(t-e)/(n-e))),t*t*t*(t*(6*t-15)+10)}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(e,"__esModule",{value:!0}),e.DistanceSquared=e.DistancePower=e.DistanceBetween=void 0;var u=n(215),i=r(u),a=n(435),o=r(a),l=n(436),s=r(l);e.DistanceBetween=i["default"],e.DistancePower=o["default"],e.DistanceSquared=s["default"]},function(t,e){"use strict";function n(t,e,n,r){var u=arguments.length<=4||void 0===arguments[4]?2:arguments[4];return Math.sqrt(Math.pow(n-t,u)+Math.pow(r-e,u))}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e,n,r){var u=t-n,i=e-r;return u*u+i*i}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e,n){"use strict";"create index";function r(t){return t&&t.__esModule?t:{"default":t}}function u(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}Object.defineProperty(e,"__esModule",{value:!0}),e.Sine=e.Quintic=e.Quartic=e.Quadratic=e.Linear=e.Expo=e.Elastic=e.Cubic=e.Circular=e.Bounce=e.Back=void 0;var i=n(438),a=u(i),o=n(439),l=u(o),s=n(440),f=u(s),c=n(441),d=u(c),h=n(442),v=u(h),y=n(443),p=u(y),M=n(444),_=r(M),b=n(445),g=u(b),P=n(446),O=u(P),j=n(447),m=u(j),w=n(448),A=u(w);e.Back=a,e.Bounce=l,e.Circular=f,e.Cubic=d,e.Elastic=v,e.Expo=p,e.Linear=_["default"],e.Quadratic=g,e.Quartic=O,e.Quintic=m,e.Sine=A},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?1.70158:arguments[1];return t*t*((e+1)*t-e)}function r(t){var e=arguments.length<=1||void 0===arguments[1]?1.70158:arguments[1];return--t*t*((e+1)*t+e)+1}function u(t){var e=arguments.length<=1||void 0===arguments[1]?1.70158:arguments[1],n=1.525*e;return(t*=2)<1?.5*(t*t*((n+1)*t-n)):.5*((t-=2)*t*((n+1)*t+n)+2)}Object.defineProperty(e,"__esModule",{value:!0}),e.In=n,e.Out=r,e.InOut=u},function(t,e){"use strict";function n(t){return t=1-t,1/2.75>t?1-7.5625*t*t:2/2.75>t?1-(7.5625*(t-=1.5/2.75)*t+.75):2.5/2.75>t?1-(7.5625*(t-=2.25/2.75)*t+.9375):1-(7.5625*(t-=2.625/2.75)*t+.984375)}function r(t){return 1/2.75>t?7.5625*t*t:2/2.75>t?7.5625*(t-=1.5/2.75)*t+.75:2.5/2.75>t?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375}function u(t){var e=!1;return.5>t?(t=1-2*t,e=!0):t=2*t-1,t=1/2.75>t?7.5625*t*t:2/2.75>t?7.5625*(t-=1.5/2.75)*t+.75:2.5/2.75>t?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375,e?.5*(1-t):.5*t+.5}Object.defineProperty(e,"__esModule",{value:!0}),e.In=n,e.Out=r,e.InOut=u},function(t,e){"use strict";function n(t){return 1-Math.sqrt(1-t*t)}function r(t){return Math.sqrt(1- --t*t)}function u(t){return(t*=2)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)}Object.defineProperty(e,"__esModule",{value:!0}),e.In=n,e.Out=r,e.InOut=u},function(t,e){"use strict";function n(t){return t*t*t}function r(t){return--t*t*t+1}function u(t){return(t*=2)<1?.5*t*t*t:.5*((t-=2)*t*t+2)}Object.defineProperty(e,"__esModule",{value:!0}),e.In=n,e.Out=r,e.InOut=u},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?.1:arguments[1],n=arguments.length<=2||void 0===arguments[2]?.4:arguments[2];if(0===t)return 0;if(1===t)return 1;var r=n/4;return 1>e?e=1:r=n*Math.asin(1/e)/(2*Math.PI),-(e*Math.pow(2,10*(t-=1))*Math.sin((t-r)*(2*Math.PI)/n))}function r(t){var e=arguments.length<=1||void 0===arguments[1]?.1:arguments[1],n=arguments.length<=2||void 0===arguments[2]?.4:arguments[2];if(0===t)return 0;if(1===t)return 1;var r=n/4;return 1>e?e=1:r=n*Math.asin(1/e)/(2*Math.PI),e*Math.pow(2,-10*t)*Math.sin((t-r)*(2*Math.PI)/n)+1}function u(t){var e=arguments.length<=1||void 0===arguments[1]?.1:arguments[1],n=arguments.length<=2||void 0===arguments[2]?.4:arguments[2];if(0===t)return 0;if(1===t)return 1;var r=n/4;return 1>e?e=1:r=n*Math.asin(1/e)/(2*Math.PI),(t*=2)<1?-.5*(e*Math.pow(2,10*(t-=1))*Math.sin((t-r)*(2*Math.PI)/n)):e*Math.pow(2,-10*(t-=1))*Math.sin((t-r)*(2*Math.PI)/n)*.5+1}Object.defineProperty(e,"__esModule",{value:!0}),e.In=n,e.Out=r,e.InOut=u},function(t,e){"use strict";function n(t){return Math.pow(2,10*(t-1))-.001}function r(t){return 1-Math.pow(2,-10*t)}function u(t){return(t*=2)<1?.5*Math.pow(2,10*(t-1)):.5*(2-Math.pow(2,-10*(t-1)))}Object.defineProperty(e,"__esModule",{value:!0}),e.In=n,e.Out=r,e.InOut=u},function(t,e){"use strict";function n(t){return t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t){return t*t}function r(t){return t*(2-t)}function u(t){return(t*=2)<1?.5*t*t:-.5*(--t*(t-2)-1)}Object.defineProperty(e,"__esModule",{value:!0}),e.In=n,e.Out=r,e.InOut=u},function(t,e){"use strict";function n(t){return t*t*t*t}function r(t){return 1- --t*t*t*t}function u(t){return(t*=2)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2)}Object.defineProperty(e,"__esModule",{value:!0}),e.In=n,e.Out=r,e.InOut=u},function(t,e){"use strict";function n(t){return t*t*t*t*t}function r(t){return--t*t*t*t*t+1}function u(t){return(t*=2)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2)}Object.defineProperty(e,"__esModule",{value:!0}),e.In=n,e.Out=r,e.InOut=u},function(t,e){"use strict";function n(t){return 0===t?0:1===t?1:1-Math.cos(t*Math.PI/2)}function r(t){return 0===t?0:1===t?1:Math.sin(t*Math.PI/2)}function u(t){return 0===t?0:1===t?1:.5*(1-Math.cos(Math.PI*t))}Object.defineProperty(e,"__esModule",{value:!0}),e.In=n,e.Out=r,e.InOut=u},function(t,e,n){"use strict";"create index";function r(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(e,"__esModule",{value:!0}),e.Linear=e.CatmullRom=e.Bezier=void 0;var u=n(450),i=r(u),a=n(451),o=r(a),l=n(452),s=r(l);e.Bezier=i["default"],e.CatmullRom=o["default"],e.Linear=s["default"]},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function u(t,e){for(var n=0,r=t.length-1,u=0;r>=u;u++)n+=Math.pow(1-e,r-u)*Math.pow(e,u)*t[u]*(0,a["default"])(r,u);return n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=u;var i=n(411),a=r(i)},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function u(t,e){var n=t.length-1,r=n*e,u=Math.floor(r);return t[0]===t[n]?(0>e&&(u=Math.floor(r=n*(1+e))),(0,a["default"])(t[(u-1+n)%n],t[u],t[(u+1)%n],t[(u+2)%n],r-u)):0>e?t[0]-((0,a["default"])(t[0],t[0],t[1],t[1],-r)-t[0]):e>1?t[n]-((0,a["default"])(t[n],t[n],t[n-1],t[n-1],r-n)-t[n]):(0,a["default"])(t[u?u-1:0],t[u],t[u+1>n?n:u+1],t[u+2>n?n:u+2],r-u)}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=u;var i=n(413),a=r(i)},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function u(t,e){var n=t.length-1,r=n*e,u=Math.floor(r);return 0>e?(0,a["default"])(t[0],t[1],r):e>1?(0,a["default"])(t[n],t[n-1],n-r):(0,a["default"])(t[u],t[u+1>n?n:u+1],r-u)}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=u;var i=n(279),a=r(i)},function(t,e,n){"use strict";function r(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}Object.defineProperty(e,"__esModule",{value:!0}),e.mat44=e.mat43=e.mat34=e.mat33=e.mat23=void 0;var u=n(454),i=r(u),a=n(473),o=r(a),l=n(496),s=r(l),f=n(500),c=r(f),d=n(540),h=r(d);e.mat23=i,e.mat33=o,e.mat34=s,e.mat43=c,e.mat44=h},function(t,e,n){"use strict";"create index";function r(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(e,"__esModule",{value:!0}),e.Translate=e.Transform=e.Subtract=e.SetIdentity=e.Set=e.Scale=e.ScalarSubtract=e.ScalarMultiply=e.ScalarAdd=e.Rotate=e.Multiply=e.IsIdentity=e.Invert=e.Determinant=e.Copy=e.Clone=e.BuildIdentity=e.Build=e.Add=void 0;var u=n(455),i=r(u),a=n(193),o=r(a),l=n(456),s=r(l),f=n(457),c=r(f),d=n(458),h=r(d),v=n(459),y=r(v),p=n(460),M=r(p),_=n(461),b=r(_),g=n(462),P=r(g),O=n(463),j=r(O),m=n(464),w=r(m),A=n(465),F=r(A),S=n(466),k=r(S),x=n(467),T=r(x),I=n(468),B=r(I),q=n(469),R=r(q),C=n(470),D=r(C),E=n(471),V=r(E),z=n(472),L=r(z);e.Add=i["default"],e.Build=o["default"],e.BuildIdentity=s["default"],e.Clone=c["default"],e.Copy=h["default"],e.Determinant=y["default"],e.Invert=M["default"],e.IsIdentity=b["default"],e.Multiply=P["default"],e.Rotate=j["default"],e.ScalarAdd=w["default"],e.ScalarMultiply=F["default"],e.ScalarSubtract=k["default"],e.Scale=T["default"],e.Set=B["default"],e.SetIdentity=R["default"],e.Subtract=D["default"],e.Transform=V["default"],e.Translate=L["default"]},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(6):arguments[2];return n[0]=t[0]+e[0],n[1]=t[1]+e[1],n[2]=t[2]+e[2],n[3]=t[3]+e[3],n[4]=t[4]+e[4],n[5]=t[5]+e[5],n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(){var t=arguments.length<=0||void 0===arguments[0]?new r(6):arguments[0];return t[0]=1,t[1]=0,t[2]=0,t[3]=1,t[4]=0,t[5]=0,t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t){var e=new r(6);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?new r(6):arguments[1];return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t){return t[0]*t[3]-t[1]*t[2]}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?new r(6):arguments[1],n=t[0],u=t[1],i=t[2],a=t[3],o=t[4],l=t[5],s=n*a-u*i;return s?(s=1/s,e[0]=a*s,e[1]=-u*s,e[2]=-i*s,e[3]=n*s,e[4]=(i*l-a*o)*s,void(e[5]=(n*l-u*o)*s)):null}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t){return 1===t[0]&&0===t[1]&&0===t[2]&&1===t[3]&&0===t[4]&&0===t[5]}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(6):arguments[2],u=t[0],i=t[1],a=t[2],o=t[3],l=t[4],s=t[5],f=e[0],c=e[1],d=e[2],h=e[3],v=e[4],y=e[5];return n[0]=u*f+a*c,n[1]=i*f+o*c,n[2]=u*d+a*h,n[3]=i*d+o*h,n[4]=u*v+a*y+l,n[5]=i*v+o*y+s,n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(6):arguments[2],u=Math.sin(e),i=Math.cos(e);return n[0]=t[0]*i+t[2]*u,n[1]=t[1]*i+t[3]*u,n[2]=t[0]*-u+t[2]*i,n[3]=t[1]*-u+t[3]*i,n[4]=t[4],n[5]=t[5],n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(6):arguments[2];return n[0]=t[0]+e,n[1]=t[1]+e,n[2]=t[2]+e,n[3]=t[3]+e,n[4]=t[4]+e,n[5]=t[5]+e,n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(6):arguments[2];return n[0]=t[0]*e,n[1]=t[1]*e,n[2]=t[2]*e,n[3]=t[3]*e,n[4]=t[4]*e,n[5]=t[5]*e,n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(6):arguments[2];return n[0]=t[0]-e,n[1]=t[1]-e,n[2]=t[2]-e,n[3]=t[3]-e,n[4]=t[4]-e,n[5]=t[5]-e,n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(6):arguments[2];return n[0]=t[0]*e[0],n[1]=t[1]*e[0],n[2]=t[0]*e[1],n[3]=t[1]*e[1],n[4]=t[4],n[5]=t[5],n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?1:arguments[1],n=arguments.length<=2||void 0===arguments[2]?0:arguments[2],r=arguments.length<=3||void 0===arguments[3]?0:arguments[3],u=arguments.length<=4||void 0===arguments[4]?1:arguments[4],i=arguments.length<=5||void 0===arguments[5]?0:arguments[5],a=arguments.length<=6||void 0===arguments[6]?0:arguments[6];return t[0]=e,t[1]=n,t[2]=r,t[3]=u,t[4]=i,t[5]=a,t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;Float32Array},function(t,e){"use strict";function n(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=1,t[4]=0,t[5]=0,t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;Float32Array},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(6):arguments[2];return n[0]=t[0]-e[0],n[1]=t[1]-e[1],n[2]=t[2]-e[2],n[3]=t[3]-e[3],n[4]=t[4]-e[4],n[5]=t[5]-e[5],n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e,n,r,u,i,a){var o=t[0],l=t[1],s=t[2],f=t[3],c=t[4],d=t[5];return t[0]=o*e+s*n,t[1]=l*e+f*n,t[2]=o*r+s*u,t[3]=l*r+f*u,t[4]=o*i+s*a+c,t[5]=l*i+f*a+d,t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(6):arguments[2];return n[0]=t[0],n[1]=t[1],n[2]=t[0],n[3]=t[1],n[4]=t[0]*e[0]+t[2]*e[1]+t[4],n[5]=t[1]*e[0]+t[3]*e[1]+t[5],n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e,n){"use strict";"create index";function r(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function u(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(e,"__esModule",{value:!0}),e.Up=e.Transpose=e.TransformByVector=e.Transform=e.SetUp=e.SetRight=e.SetAt=e.ScalarSub=e.ScalarMultiply=e.ScalarAdd=e.Right=e.Multiply=e.Mat33=e.InverseTranspose=e.Inverse=e.FromQuaternion=e.FromAxisRotation=e.Equal=e.Determinant=e.Copy=e.BuildIdentity=e.Build=e.At=void 0;var i=n(474),a=u(i),o=n(475),l=u(o),s=n(476),f=u(s),c=n(477),d=u(c),h=n(478),v=u(h),y=n(479),p=u(y),M=n(480),_=u(M),b=n(481),g=u(b),P=n(482),O=u(P),j=n(483),m=u(j),w=n(119),A=u(w),F=n(484),S=r(F),k=n(485),x=u(k),T=n(486),I=u(T),B=n(487),q=u(B),R=n(488),C=u(R),D=n(489),E=u(D),V=n(490),z=u(V),L=n(491),Y=u(L),X=n(492),U=u(X),N=n(493),Z=u(N),Q=n(494),G=u(Q),W=n(495),H=u(W);e.At=a["default"],e.Build=l["default"],e.BuildIdentity=f["default"],e.Copy=d["default"],e.Determinant=v["default"],e.Equal=p["default"],e.FromAxisRotation=_["default"],e.FromQuaternion=g["default"],e.Inverse=O["default"],e.InverseTranspose=m["default"],e.Mat33=A["default"],e.Multiply=S,e.Right=x["default"],e.ScalarAdd=I["default"],e.ScalarMultiply=q["default"],e.ScalarSub=C["default"],e.SetAt=E["default"],e.SetRight=z["default"],e.SetUp=Y["default"],e.Transform=U["default"],e.TransformByVector=Z["default"],e.Transpose=G["default"],e.Up=H["default"]},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?new r(9):arguments[1];return e[0]=t[6],e[1]=t[7],e[2]=t[8],e}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e,n,u){var i=arguments.length<=4||void 0===arguments[4]?null:arguments[4],a=arguments.length<=5||void 0===arguments[5]?null:arguments[5],o=arguments.length<=6||void 0===arguments[6]?null:arguments[6],l=arguments.length<=7||void 0===arguments[7]?null:arguments[7],s=arguments.length<=8||void 0===arguments[8]?null:arguments[8],f=arguments.length<=9||void 0===arguments[9]?new r(9):arguments[9];return null!==i?(f[0]=t,f[1]=e,f[2]=n,f[3]=u,f[4]=i,f[5]=a,f[6]=o,f[7]=l,f[8]=s):(f[0]=t[0],f[1]=t[1],f[2]=t[2],f[3]=e[0],f[4]=e[1],f[5]=e[2],f[6]=n[0],f[7]=n[1],f[8]=n[2]),f}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(){var t=arguments.length<=0||void 0===arguments[0]?new r(9):arguments[0];return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?new r(9):arguments[1];return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t){var e=t[0],n=t[1],r=t[2],u=t[3],i=t[4],a=t[5],o=t[6],l=t[7],s=t[8];return e*(i*s-a*l)+n*(a*o-u*s)+r*(u*l-i*o)}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?1e-6:arguments[2];return Math.abs(t[0]-e[0])<=n&&Math.abs(t[1]-e[1])<=n&&Math.abs(t[2]-e[2])<=n&&Math.abs(t[3]-e[3])<=n&&Math.abs(t[4]-e[4])<=n&&Math.abs(t[5]-e[5])<=n&&Math.abs(t[6]-e[6])<=n&&Math.abs(t[7]-e[7])<=n&&Math.abs(t[8]-e[8])<=n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(9):arguments[2],u=Math.sin(e),i=Math.cos(e),a=1-i,o=t[0],l=t[1],s=t[2],f=a*o,c=a*l,d=a*s,h=u*o,v=u*l,y=u*s;return n[0]=f*o+i,n[1]=f*l-y,n[2]=f*s+v,n[3]=c*o+y,n[4]=c*l+i,n[5]=c*s-h,n[6]=d*o-v,n[7]=d*l+h,n[8]=d*s+i,n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?new r(9):arguments[1],n=t[0],u=t[1],i=t[2],a=t[3],o=2*n*n,l=2*u*u,s=2*i*i,f=2*n*u,c=2*i*a,d=2*n*i,h=2*u*a,v=2*u*i,y=2*n*a;return e[0]=1-l-s,e[1]=f-c,e[2]=d+h,e[3]=f+c,e[4]=1-o-s,e[5]=v-y,e[6]=d-h,e[7]=v+y,e[8]=1-o-l,e}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?new r(9):arguments[1],n=t[0],u=t[1],i=t[2],a=t[3],o=t[4],l=t[5],s=t[6],f=t[7],c=t[8],d=o*c-l*f,h=l*s-a*c,v=a*f-o*s,y=n*d+u*h+i*v;if(0===y)e[0]=e[1]=e[2]=0,e[3]=e[4]=e[5]=0,e[6]=e[7]=e[8]=0;else{var p=1/y;e[0]=d*p,e[1]=(f*i-c*u)*p,e[2]=(u*l-i*o)*p,e[3]=h*p,e[4]=(c*n-s*i)*p,e[5]=(a*i-n*l)*p,e[6]=v*p,e[7]=(s*u-f*n)*p,e[8]=(n*o-a*u)*p}return e}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?new r(9):arguments[1],n=t[0],u=t[1],i=t[2],a=t[3],o=t[4],l=t[5],s=t[6],f=t[7],c=t[8],d=o*c-l*f,h=l*s-a*c,v=a*f-o*s,y=n*d+u*h+i*v;if(0===y)e[0]=e[1]=e[2]=0,e[3]=e[4]=e[5]=0,e[6]=e[7]=e[8]=0;else{var p=1/y;e[0]=d*p,e[3]=(f*i-c*u)*p,e[6]=(u*l-i*o)*p,e[1]=h*p,e[4]=(c*n-s*i)*p,e[7]=(a*i-n*l)*p,e[2]=v*p,e[5]=(s*u-f*n)*p,e[8]=(n*o-a*u)*p}return e}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new i(9):arguments[2],r=t[0],u=t[1],a=t[2],o=t[3],l=t[4],s=t[5],f=t[6],c=t[7],d=t[8],h=e[0],v=e[1],y=e[2],p=e[3],M=e[4],_=e[5],b=e[6],g=e[7],P=e[8];return n[0]=h*r+p*u+b*a,n[1]=v*r+M*u+g*a,n[2]=y*r+_*u+P*a,n[3]=h*o+p*l+b*s,n[4]=v*o+M*l+g*s,n[5]=y*o+_*l+P*s,n[6]=h*f+p*c+b*d,n[7]=v*f+M*c+g*d,n[8]=y*f+_*c+P*d,n}function r(t,e){var n=arguments.length<=2||void 0===arguments[2]?new i(12):arguments[2],r=t[0],u=t[1],a=t[2],o=t[3],l=t[4],s=t[5],f=t[6],c=t[7],d=t[8],h=e[0],v=e[1],y=e[2],p=e[3],M=e[4],_=e[5],b=e[6],g=e[7],P=e[8];return n[0]=h*r+p*u+b*a,n[1]=v*r+M*u+g*a,n[2]=y*r+_*u+P*a,n[3]=h*o+p*l+b*s,n[4]=v*o+M*l+g*s,n[5]=y*o+_*l+P*s,n[6]=h*f+p*c+b*d,n[7]=v*f+M*c+g*d,n[8]=y*f+_*c+P*d,n[9]=e[9],n[10]=e[10],n[11]=e[11],n}function u(t,e){var n=arguments.length<=2||void 0===arguments[2]?new i(16):arguments[2],r=t[0],u=t[1],a=t[2],o=t[3],l=t[4],s=t[5],f=t[6],c=t[7],d=t[8],h=e[0],v=e[1],y=e[2],p=e[3],M=e[4],_=e[5],b=e[6],g=e[7],P=e[8],O=e[9],j=e[10],m=e[11];return n[0]=h*r+M*u+P*a,n[1]=v*r+_*u+O*a,n[2]=y*r+b*u+j*a,n[3]=p*r+g*u+m*a,n[4]=h*o+M*l+P*s,n[5]=v*o+_*l+O*s,n[6]=y*o+b*l+j*s,n[7]=p*o+g*l+m*s,n[8]=h*f+M*c+P*d,n[9]=v*f+_*c+O*d,n[10]=y*f+b*c+j*d,n[11]=p*f+g*c+m*d,n[12]=e[12],n[13]=e[13],n[14]=e[14],n[15]=e[15],n}Object.defineProperty(e,"__esModule",{value:!0}),e.Multiply=n,e.mat43=r,e.mat44=u;var i=Float32Array},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?new r(9):arguments[1];return e[0]=t[0],e[1]=t[1],e[2]=t[2],e}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(9):arguments[2];return n[0]=t[0]+e,n[1]=t[1]+e,n[2]=t[2]+e,n[3]=t[3]+e,n[4]=t[4]+e,n[5]=t[5]+e,n[6]=t[6]+e,n[7]=t[7]+e,n[8]=t[8]+e,n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(9):arguments[2];return n[0]=t[0]*e,n[1]=t[1]*e,n[2]=t[2]*e,n[3]=t[3]*e,n[4]=t[4]*e,n[5]=t[5]*e,n[6]=t[6]*e,n[7]=t[7]*e,n[8]=t[8]*e,n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(9):arguments[2];return n[0]=t[0]-e,n[1]=t[1]-e,n[2]=t[2]-e,n[3]=t[3]-e,n[4]=t[4]-e,n[5]=t[5]-e,n[6]=t[6]-e,n[7]=t[7]-e,n[8]=t[8]-e,n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){return t[6]=e[0],t[7]=e[1],t[8]=e[2],t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e){return t[3]=e[0],t[4]=e[1],t[5]=e[2],t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?0:arguments[2],r=arguments.length<=3||void 0===arguments[3]?0:arguments[3],u=arguments.length<=4||void 0===arguments[4]?0:arguments[4],i=arguments.length<=5||void 0===arguments[5]?1:arguments[5],a=arguments.length<=6||void 0===arguments[6]?1:arguments[6],o=Math.cos(u),l=Math.sin(u)*e;return t[0]=o*i,t[1]=-l*a,t[2]=0,t[3]=l*i,t[4]=o*a,t[5]=0,t[6]=n,t[7]=r,t[8]=1,t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(9):arguments[2],u=e[0],i=e[1],a=e[2];return n[0]=t[0]*u+t[3]*i+t[6]*a,n[1]=t[1]*u+t[4]*i+t[7]*a,n[2]=t[2]*u+t[5]*i+t[8]*a,n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?new r(9):arguments[1];return e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8],e}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?new r(9):arguments[1];return e[0]=t[3],e[1]=t[4],e[2]=t[5],e}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e,n){"use strict";"create index";function r(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(e,"__esModule",{value:!0}),e.Scale=e.Pos=e.BuildIdentity=void 0;var u=n(497),i=r(u),a=n(498),o=r(a),l=n(499),s=r(l);e.BuildIdentity=i["default"],e.Pos=o["default"],e.Scale=s["default"]},function(t,e){"use strict";function n(){var t=arguments.length<=0||void 0===arguments[0]?new r(12):arguments[0];return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?new r(12):arguments[1];return e[0]=t[3],e[1]=t[7],e[2]=t[11],e}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(12):arguments[2],u=e[0],i=e[1],a=e[2];return n[0]=t[0]*u,n[1]=t[1]*u,n[2]=t[2]*u,n[3]=t[3],n[4]=t[4]*i,n[5]=t[5]*i,n[6]=t[6]*i,n[7]=t[7],n[8]=t[8]*a,n[9]=t[9]*a,n[10]=t[10]*a,n[11]=t[11],n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e,n){"use strict";"create index";function r(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function u(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(e,"__esModule",{value:!0}),e.Up=e.Transpose=e.Translate=e.TransformVector=e.TransformPoint=e.SetUp=e.SetRight=e.SetPos=e.SetAxisRotation=e.SetAt=e.Scale=e.ScalarSub=e.ScalarMultiply=e.ScalarAdd=e.Right=e.Pos=e.Orthonormalize=e.Offset=e.NegOffset=e.MultiplyTranspose=e.Multiply=e.InverseTransposeProjection=e.InverseOrthonormal=e.Inverse=e.FromRTS=e.FromRT=e.FromQuaternionPos=e.FromM33V3=e.FromAxisRotation=e.Determinant=e.Copy=e.BuildTranslation=e.BuildIdentity=e.Build=e.At=void 0;var i=n(501),a=u(i),o=n(502),l=u(o),s=n(503),f=u(s),c=n(504),d=u(c),h=n(505),v=u(h),y=n(506),p=u(y),M=n(507),_=u(M),b=n(508),g=u(b),P=n(509),O=u(P),j=n(510),m=u(j),w=n(511),A=u(w),F=n(512),S=u(F),k=n(513),x=u(k),T=n(514),I=u(T),B=n(515),q=r(B),R=n(516),C=u(R),D=n(517),E=u(D),V=n(518),z=u(V),L=n(519),Y=u(L),X=n(526),U=u(X),N=n(524),Z=u(N),Q=n(527),G=u(Q),W=n(528),H=u(W),J=n(529),K=u(J),$=n(530),tt=u($),et=n(531),nt=u(et),rt=n(532),ut=u(rt),it=n(533),at=u(it),ot=n(534),lt=u(ot),st=n(535),ft=u(st),ct=n(536),dt=u(ct),ht=n(537),vt=u(ht),yt=n(538),pt=u(yt),Mt=n(539),_t=u(Mt),bt=n(525),gt=u(bt);e.At=a["default"],e.Build=l["default"],e.BuildIdentity=f["default"],e.BuildTranslation=d["default"],e.Copy=v["default"],e.Determinant=p["default"],e.FromAxisRotation=_["default"],e.FromM33V3=g["default"],e.FromQuaternionPos=O["default"],e.FromRT=m["default"],e.FromRTS=A["default"],e.Inverse=S["default"],e.InverseOrthonormal=x["default"],e.InverseTransposeProjection=I["default"],e.Multiply=q,e.MultiplyTranspose=C["default"],e.NegOffset=E["default"],e.Offset=z["default"],e.Orthonormalize=Y["default"],e.Pos=U["default"],e.Right=Z["default"],e.ScalarAdd=G["default"],e.ScalarMultiply=H["default"],e.ScalarSub=K["default"],e.Scale=tt["default"],e.SetAt=nt["default"],e.SetAxisRotation=ut["default"],e.SetPos=at["default"],e.SetRight=lt["default"],e.SetUp=ft["default"],e.TransformPoint=dt["default"],e.TransformVector=vt["default"],e.Translate=pt["default"],e.Transpose=_t["default"],e.Up=gt["default"]},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?new r(12):arguments[1];return e[0]=t[6],e[1]=t[7],e[2]=t[8],e}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e,n,u){var i=arguments.length<=4||void 0===arguments[4]?null:arguments[4],a=arguments.length<=5||void 0===arguments[5]?null:arguments[5],o=arguments.length<=6||void 0===arguments[6]?null:arguments[6],l=arguments.length<=7||void 0===arguments[7]?null:arguments[7],s=arguments.length<=8||void 0===arguments[8]?null:arguments[8],f=arguments.length<=9||void 0===arguments[9]?null:arguments[9],c=arguments.length<=10||void 0===arguments[10]?null:arguments[10],d=arguments.length<=11||void 0===arguments[11]?null:arguments[11],h=arguments.length<=12||void 0===arguments[12]?new r(12):arguments[12];return null!==a?(h[0]=t,h[1]=e,h[2]=n,h[3]=u,h[4]=i,h[5]=a,h[6]=o,h[7]=l,h[8]=s,h[9]=f,h[10]=c,h[11]=d):(h[0]=t[0],h[1]=t[1],h[2]=t[2],h[3]=e[0],h[4]=e[1],h[5]=e[2],h[6]=n[0],h[7]=n[1],h[8]=n[2],h[9]=u[0],h[10]=u[1],h[11]=u[2]),h}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(){var t=arguments.length<=0||void 0===arguments[0]?new r(12):arguments[0];return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t[9]=0,t[10]=0,t[11]=0,t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?null:arguments[1],n=arguments.length<=2||void 0===arguments[2]?null:arguments[2],u=arguments.length<=3||void 0===arguments[3]?new r(12):arguments[3];return null!==n?(u[9]=t,u[10]=e,u[11]=n):(u[9]=t[0],u[10]=t[1],u[11]=t[2]),u[0]=1,u[1]=0,u[2]=0,u[3]=0,u[4]=1,u[5]=0,u[6]=0,u[7]=0,u[8]=1,u}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?new r(12):arguments[1];return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t){return t[0]*(t[4]*t[8]-t[5]*t[7])+t[1]*(t[5]*t[6]-t[3]*t[8])+t[2]*(t[3]*t[7]-t[4]*t[6])}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(12):arguments[2],u=Math.sin(e),i=Math.cos(e),a=1-i,o=t[0],l=t[1],s=t[2],f=a*o,c=a*l,d=a*s,h=u*o,v=u*l,y=u*s;
return n[0]=f*o+i,n[1]=f*l-y,n[2]=f*s+v,n[3]=c*o+y,n[4]=c*l+i,n[5]=c*s-h,n[6]=d*o-v,n[7]=d*l+h,n[8]=d*s+i,n[9]=0,n[10]=0,n[11]=0,n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(12):arguments[2];return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n[4]=t[4],n[5]=t[5],n[6]=t[6],n[7]=t[7],n[8]=t[8],n[9]=e[0],n[10]=e[1],n[11]=e[2],n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?new r(12):arguments[1],n=t[0],u=t[1],i=t[2],a=t[3],o=t[4],l=t[5],s=t[6],f=2*n*n,c=2*u*u,d=2*i*i,h=2*n*u,v=2*i*a,y=2*n*i,p=2*u*a,M=2*u*i,_=2*n*a;return e[0]=1-c-d,e[1]=h-v,e[2]=y+p,e[3]=h+v,e[4]=1-f-d,e[5]=M-_,e[6]=y-p,e[7]=M+_,e[8]=1-f-c,e[9]=o,e[10]=l,e[11]=s,e}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(12):arguments[2],u=t[0],i=t[1],a=t[2],o=t[3],l=2*u*u,s=2*i*i,f=2*a*a,c=2*u*i,d=2*a*o,h=2*u*a,v=2*i*o,y=2*i*a,p=2*u*o;return n[0]=1-s-f,n[1]=c-d,n[2]=h+v,n[3]=c+d,n[4]=1-l-f,n[5]=y-p,n[6]=h-v,n[7]=y+p,n[8]=1-l-s,n[9]=e[0],n[10]=e[1],n[11]=e[2],n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e,n){var u=arguments.length<=3||void 0===arguments[3]?new r(12):arguments[3],i=t[0],a=t[1],o=t[2],l=t[3],s=2*i*i,f=2*a*a,c=2*o*o,d=2*i*a,h=2*o*l,v=2*i*o,y=2*a*l,p=2*a*o,M=2*i*l,_=n[0],b=n[1],g=n[2];return u[0]=_*(1-f-c),u[1]=_*(d-h),u[2]=_*(v+y),u[3]=b*(d+h),u[4]=b*(1-s-c),u[5]=b*(p-M),u[6]=g*(v-y),u[7]=g*(p+M),u[8]=g*(1-s-f),u[9]=e[0],u[10]=e[1],u[11]=e[2],u}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?new r(12):arguments[1],n=t[0],u=t[1],i=t[2],a=t[3],o=t[4],l=t[5],s=t[6],f=t[7],c=t[8],d=t[9],h=t[10],v=t[11],y=o*c-l*f,p=l*s-a*c,M=a*f-o*s,_=n*y+u*p+i*M;if(0!==_){var b=1/_;e[0]=y*b,e[1]=(f*i-c*u)*b,e[2]=(u*l-i*o)*b,e[3]=p*b,e[4]=(c*n-s*i)*b,e[5]=(a*i-n*l)*b,e[6]=M*b,e[7]=(s*u-f*n)*b,e[8]=(n*o-a*u)*b,e[9]=(a*(h*c-f*v)+o*(s*v-d*c)+l*(d*f-s*h))*b,e[10]=(s*(i*h-u*v)+f*(n*v-d*i)+c*(d*u-n*h))*b,e[11]=(d*(i*o-u*l)+h*(n*l-a*i)+v*(a*u-n*o))*b}return e}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?new r(12):arguments[1],n=t[0],u=t[1],i=t[2],a=t[3],o=t[4],l=t[5],s=t[6],f=t[7],c=t[8],d=t[9],h=t[10],v=t[11];return e[0]=n,e[1]=a,e[2]=s,e[3]=u,e[4]=o,e[5]=f,e[6]=i,e[7]=l,e[8]=c,e[9]=-(d*n+h*u+v*i),e[10]=-(d*a+h*o+v*l),e[11]=-(d*s+h*f+v*c),e}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(12):arguments[2],u=.5/e[0],i=.5/e[1],a=.5/e[2],o=t[0]*u,l=t[1]*u,s=t[2]*u,f=t[3]*i,c=t[4]*i,d=t[5]*i,h=t[6]*a,v=t[7]*a,y=t[8]*a,p=t[9],M=t[10],_=t[11];return n[0]=o,n[1]=l,n[2]=s,n[3]=.5-(p*o+M*l+_*s),n[4]=f,n[5]=c,n[6]=d,n[7]=.5-(p*f+M*c+_*d),n[8]=h,n[9]=v,n[10]=y,n[11]=.5-(p*h+M*v+_*y),n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new i(12):arguments[2],r=t[0],u=t[1],a=t[2],o=t[3],l=t[4],s=t[5],f=t[6],c=t[7],d=t[8],h=t[9],v=t[10],y=t[11],p=e[0],M=e[1],_=e[2],b=e[3],g=e[4],P=e[5],O=e[6],j=e[7],m=e[8];return n[0]=p*r+b*u+O*a,n[1]=M*r+g*u+j*a,n[2]=_*r+P*u+m*a,n[3]=p*o+b*l+O*s,n[4]=M*o+g*l+j*s,n[5]=_*o+P*l+m*s,n[6]=p*f+b*c+O*d,n[7]=M*f+g*c+j*d,n[8]=_*f+P*c+m*d,n[9]=p*h+b*v+O*y+e[9],n[10]=M*h+g*v+j*y+e[10],n[11]=_*h+P*v+m*y+e[11],n}function r(t,e){var n=arguments.length<=2||void 0===arguments[2]?new i(12):arguments[2],r=t[0],u=t[1],a=t[2],o=t[3],l=t[4],s=t[5],f=t[6],c=t[7],d=t[8],h=t[9],v=t[10],y=t[11],p=e[0],M=e[1],_=e[2],b=e[3],g=e[4],P=e[5],O=e[6],j=e[7],m=e[8];return n[0]=p*r+b*u+O*a,n[1]=M*r+g*u+j*a,n[2]=_*r+P*u+m*a,n[3]=p*o+b*l+O*s,n[4]=M*o+g*l+j*s,n[5]=_*o+P*l+m*s,n[6]=p*f+b*c+O*d,n[7]=M*f+g*c+j*d,n[8]=_*f+P*c+m*d,n[9]=p*h+b*v+O*y,n[10]=M*h+g*v+j*y,n[11]=_*h+P*v+m*y,n}function u(t,e){var n=arguments.length<=2||void 0===arguments[2]?new i(12):arguments[2],r=t[0],u=t[1],a=t[2],o=t[3],l=t[4],s=t[5],f=t[6],c=t[7],d=t[8],h=t[9],v=t[10],y=t[11],p=e[0],M=e[1],_=e[2],b=e[3],g=e[4],P=e[5],O=e[6],j=e[7],m=e[8],w=e[9],A=e[10],F=e[11];return n[0]=p*r+g*u+m*a,n[1]=M*r+P*u+w*a,n[2]=_*r+O*u+A*a,n[3]=b*r+j*u+F*a,n[4]=p*o+g*l+m*s,n[5]=M*o+P*l+w*s,n[6]=_*o+O*l+A*s,n[7]=b*o+j*l+F*s,n[8]=p*f+g*c+m*d,n[9]=M*f+P*c+w*d,n[10]=_*f+O*c+A*d,n[11]=b*f+j*c+F*d,n[12]=p*h+g*v+m*y+e[12],n[13]=M*h+P*v+w*y+e[13],n[14]=_*h+O*v+A*y+e[14],n[15]=b*h+j*v+F*y+e[15],n}Object.defineProperty(e,"__esModule",{value:!0}),e.Multiply=n,e.mat33=r,e.mat44=u;var i=Float32Array},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(12):arguments[2],u=t[0],i=t[1],a=t[2],o=t[3],l=t[4],s=t[5],f=t[6],c=t[7],d=t[8],h=t[9],v=t[10],y=t[11],p=e[0],M=e[1],_=e[2],b=e[3],g=e[4],P=e[5],O=e[6],j=e[7],m=e[8],w=e[9],A=e[10],F=e[11];return n[0]=p*u+b*i+O*a,n[1]=p*o+b*l+O*s,n[2]=p*f+b*c+O*d,n[3]=p*h+b*v+O*y+w,n[4]=M*u+g*i+j*a,n[5]=M*o+g*l+j*s,n[6]=M*f+g*c+j*d,n[7]=M*h+g*v+j*y+A,n[8]=_*u+P*i+m*a,n[9]=_*o+P*l+m*s,n[10]=_*f+P*c+m*d,n[11]=_*h+P*v+m*y+F,n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(12):arguments[2],u=t[0],i=t[1],a=t[2],o=t[3],l=t[4],s=t[5],f=t[6],c=t[7],d=t[8],h=t[9],v=t[10],y=t[11],p=-e[0],M=-e[1],_=-e[2];return n[0]=u,n[1]=i,n[2]=a,n[3]=o,n[4]=l,n[5]=s,n[6]=f,n[7]=c,n[8]=d,n[9]=u*p+o*M+f*_+h,n[10]=i*p+l*M+c*_+v,n[11]=a*p+s*M+d*_+y,n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(12):arguments[2],u=t[0],i=t[1],a=t[2],o=t[3],l=t[4],s=t[5],f=t[6],c=t[7],d=t[8],h=t[9],v=t[10],y=t[11],p=e[0],M=e[1],_=e[2];return n[0]=u,n[1]=i,n[2]=a,n[3]=o,n[4]=l,n[5]=s,n[6]=f,n[7]=c,n[8]=d,n[9]=u*p+o*M+f*_+h,n[10]=i*p+l*M+c*_+v,n[11]=a*p+s*M+d*_+y,n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=function(t){var e=arguments.length<=1||void 0===arguments[1]?new g(12):arguments[1],n=(0,h["default"])(t),r=(0,y["default"])(t),u=(0,M["default"])(t),a=(0,b["default"])(t),l=(0,o["default"])(n),f=(0,o["default"])(r),d=(0,o["default"])(u);(0,i["default"])(n,n),(0,i["default"])(r,r),(0,i["default"])(u,u);var v=void 0,p=void 0,_=void 0;if(l>0)if(f>0)if(d>0){var P=Math.abs((0,s["default"])(r,u)),O=Math.abs((0,s["default"])(u,n)),j=Math.abs((0,s["default"])(n,r));O>P?j>P?(v=r,p=u,_=n):(v=n,p=r,_=u):j>O?(v=u,p=n,_=r):(v=n,p=r,_=u)}else v=n,p=r,_=u;else v=u,p=n,_=r;else v=r,p=u,_=n;return(0,c["default"])(v,p,_),(0,i["default"])(_,_),(0,c["default"])(_,v,p),(0,i["default"])(p,p),e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=r[0],e[4]=r[1],e[5]=r[2],e[6]=u[0],e[7]=u[1],e[8]=u[2],e[9]=a[0],e[10]=a[1],e[11]=a[2],e};var u=n(520),i=r(u),a=n(521),o=r(a),l=n(522),s=r(l),f=n(523),c=r(f),d=n(524),h=r(d),v=n(525),y=r(v),p=n(501),M=r(p),_=n(526),b=r(_),g=Float32Array},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?new r(3):arguments[1],n=t[0],u=t[1],i=t[2],a=n*n+u*u+i*i;if(a>0){var o=1/Math.sqrt(a);e[0]=n*o,e[1]=u*o,e[2]=i*o}else e[0]=0,e[1]=0,e[2]=0;return e}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t){var e=t[0],n=t[1],r=t[2];return Math.sqrt(e*e+n*n+r*r)}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e){return t[0]*e[0]+t[1]*e[1]+(t[2]+e[2])}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(3):arguments[2],u=t[0],i=t[1],a=t[2],o=e[0],l=e[1],s=e[2];return n[0]=i*s-a*l,n[1]=a*o-u*s,n[2]=u*l-i*o,n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?new r(12):arguments[1];return e[0]=t[0],e[1]=t[1],e[2]=t[2],e}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?new r(12):arguments[1];return e[0]=t[3],e[1]=t[4],e[2]=t[5],e}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?new r(12):arguments[1];return e[0]=t[9],e[1]=t[10],e[2]=t[11],e}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(12):arguments[2];return n[0]=t[0]+e,n[1]=t[1]+e,n[2]=t[2]+e,n[3]=t[3]+e,n[4]=t[4]+e,n[5]=t[5]+e,n[6]=t[6]+e,n[7]=t[7]+e,n[8]=t[8]+e,n[9]=t[9]+e,n[10]=t[10]+e,n[11]=t[11]+e,n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(12):arguments[2];return n[0]=t[0]*e,n[1]=t[1]*e,n[2]=t[2]*e,n[3]=t[3]*e,n[4]=t[4]*e,n[5]=t[5]*e,n[6]=t[6]*e,n[7]=t[7]*e,n[8]=t[8]*e,n[9]=t[9]*e,n[10]=t[10]*e,n[11]=t[11]*e,n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(12):arguments[2];return n[0]=t[0]-e,n[1]=t[1]-e,n[2]=t[2]-e,n[3]=t[3]-e,n[4]=t[4]-e,n[5]=t[5]-e,n[6]=t[6]-e,n[7]=t[7]-e,n[8]=t[8]-e,n[9]=t[9]-e,n[10]=t[10]-e,n[11]=t[11]-e,n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(12):arguments[2],u=e[0],i=e[1],a=e[2];return n[0]=t[0]*u,n[1]=t[1]*u,n[2]=t[2]*u,n[3]=t[3]*i,n[4]=t[4]*i,n[5]=t[5]*i,n[6]=t[6]*a,n[7]=t[7]*a,n[8]=t[8]*a,n[9]=t[9],n[10]=t[10],n[11]=t[11],n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){return t[6]=e[0],t[7]=e[1],t[8]=e[2],t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e,n){var r=Math.sin(n),u=Math.cos(n),i=1-u,a=e[0],o=e[1],l=e[2],s=i*a,f=i*o,c=i*l,d=r*a,h=r*o,v=r*l;return t[0]=s*a+u,t[1]=s*o-v,t[2]=s*l+h,t[3]=f*a+v,t[4]=f*o+u,t[5]=f*l-d,t[6]=c*a-h,t[7]=c*o+d,t[8]=c*l+u,t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e){return t[9]=e[0],t[10]=e[1],t[11]=e[2],t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e){return t[3]=e[0],t[4]=e[1],t[5]=e[2],t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(12):arguments[2],u=e[0],i=e[1],a=e[2];return n[0]=t[0]*u+t[3]*i+t[6]*a+t[9],n[1]=t[1]*u+t[4]*i+t[7]*a+t[10],n[2]=t[2]*u+t[5]*i+t[8]*a+t[11],n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(12):arguments[2],u=e[0],i=e[1],a=e[2];return n[0]=t[0]*u+t[3]*i+t[6]*a,n[1]=t[1]*u+t[4]*i+t[7]*a,n[2]=t[2]*u+t[5]*i+t[8]*a,n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){t[9]+=e[0],t[10]+=e[1],t[11]+=e[2]}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?new r(12):arguments[1];return e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[9],e[4]=t[1],e[5]=t[4],e[6]=t[7],e[7]=t[10],e[8]=t[2],e[9]=t[5],e[10]=t[8],e[11]=t[11],e}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(e,"__esModule",{value:!0}),e.Up=e.Transpose=e.Translate=e.TransformVector=e.SetUp=e.SetRight=e.SetPos=e.SetAt=e.Scale=e.ScalarSub=e.ScalarMultiply=e.ScalarAdd=e.Right=e.Pos=e.Multiply=e.Inverse=e.Copy=e.BuildIdentity=e.Build=e.At=void 0;var u=n(541),i=r(u),a=n(542),o=r(a),l=n(543),s=r(l),f=n(544),c=r(f),d=n(545),h=r(d),v=n(546),y=r(v),p=n(547),M=r(p),_=n(548),b=r(_),g=n(549),P=r(g),O=n(550),j=r(O),m=n(551),w=r(m),A=n(552),F=r(A),S=n(553),k=r(S),x=n(554),T=r(x),I=n(555),B=r(I),q=n(556),R=r(q),C=n(557),D=r(C),E=n(558),V=r(E),z=n(559),L=r(z),Y=n(560),X=r(Y);e.At=i["default"],e.Build=o["default"],e.BuildIdentity=s["default"],e.Copy=c["default"],e.Inverse=h["default"],e.Multiply=y["default"],e.Pos=M["default"],e.Right=b["default"],e.ScalarAdd=P["default"],e.ScalarMultiply=j["default"],e.ScalarSub=w["default"],e.Scale=F["default"],e.SetAt=k["default"],e.SetPos=T["default"],e.SetRight=B["default"],e.SetUp=R["default"],e.TransformVector=D["default"],e.Translate=V["default"],e.Transpose=L["default"],e.Up=X["default"]},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?new r(16):arguments[1];return e[0]=t[8],e[1]=t[9],e[2]=t[10],e[3]=t[11],e}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e,n,u){var i=arguments.length<=4||void 0===arguments[4]?null:arguments[4],a=arguments.length<=5||void 0===arguments[5]?null:arguments[5],o=arguments.length<=6||void 0===arguments[6]?null:arguments[6],l=arguments.length<=7||void 0===arguments[7]?null:arguments[7],s=arguments.length<=8||void 0===arguments[8]?null:arguments[8],f=arguments.length<=9||void 0===arguments[9]?null:arguments[9],c=arguments.length<=10||void 0===arguments[10]?null:arguments[10],d=arguments.length<=11||void 0===arguments[11]?null:arguments[11],h=arguments.length<=12||void 0===arguments[12]?null:arguments[12],v=arguments.length<=13||void 0===arguments[13]?null:arguments[13],y=arguments.length<=14||void 0===arguments[14]?null:arguments[14],p=arguments.length<=15||void 0===arguments[15]?null:arguments[15],M=arguments.length<=16||void 0===arguments[16]?new r(16):arguments[16];return null!==a?(M[0]=t,M[1]=e,M[2]=n,M[3]=u,M[4]=i,M[5]=a,M[6]=o,M[7]=l,M[8]=s,M[9]=f,M[10]=c,M[11]=d,M[12]=h,M[13]=v,M[14]=y,M[15]=p):(M[0]=t[0],M[1]=t[1],M[2]=t[2],M[3]=t[3],M[4]=e[0],M[5]=e[1],M[6]=e[2],M[7]=e[3],M[8]=n[0],M[9]=n[1],M[10]=n[2],M[11]=n[3],M[12]=u[0],M[13]=u[1],M[14]=u[2],M[15]=u[3]),M}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(){var t=arguments.length<=0||void 0===arguments[0]?new r(16):arguments[0];return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t[9]=0,t[10]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?new r(16):arguments[1];return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?new r(16):arguments[1],n=t[0],u=t[1],i=t[2],a=t[3],o=t[4],l=t[5],s=t[6],f=t[7],c=t[8],d=t[9],h=t[10],v=t[11],y=t[12],p=t[13],M=t[14],_=t[15],b=n*l-u*o,g=n*s-i*o,P=n*f-a*o,O=u*s-i*l,j=u*f-a*l,m=i*f-a*s,w=c*p-d*y,A=c*M-h*y,F=c*_-v*y,S=d*M-h*p,k=d*_-v*p,x=h*_-v*M,T=b*x-g*k+P*S+O*F-j*A+m*w;if(0===T)e[0]=0,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=0,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=0;else{var I=1/T;e[0]=(+(l*x)-s*k+f*S)*I,e[4]=(-(o*x)+s*F-f*A)*I,e[8]=(+(o*k)-l*F+f*w)*I,e[12]=(-(o*S)+l*A-s*w)*I,e[1]=(-(u*x)+i*k-a*S)*I,e[5]=(+(n*x)-i*F+a*A)*I,e[9]=(-(n*k)+u*F-a*w)*I,e[13]=(+(n*S)-u*A+i*w)*I,e[2]=(+(p*m)-M*j+_*O)*I,e[6]=(-(y*m)+M*P-_*g)*I,e[10]=(+(y*j)-p*P+_*b)*I,e[14]=(-(y*O)+p*g-M*b)*I,e[3]=(-(d*m)+h*j-v*O)*I,e[7]=(+(c*m)-h*P+v*g)*I,e[11]=(-(c*j)+d*P-v*b)*I,e[15]=(+(c*O)-d*g+h*b)*I}return e}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(16):arguments[2],u=t[0],i=t[1],a=t[2],o=t[3],l=t[4],s=t[5],f=t[6],c=t[7],d=t[8],h=t[9],v=t[10],y=t[11],p=t[12],M=t[13],_=t[14],b=t[15],g=e[0],P=e[1],O=e[2],j=e[3],m=e[4],w=e[5],A=e[6],F=e[7],S=e[8],k=e[9],x=e[10],T=e[11],I=e[12],B=e[13],q=e[14],R=e[15];return n[0]=g*u+m*i+S*a+I*o,n[1]=P*u+w*i+k*a+B*o,n[2]=O*u+A*i+x*a+q*o,n[3]=j*u+F*i+T*a+R*o,n[4]=g*l+m*s+S*f+I*c,n[5]=P*l+w*s+k*f+B*c,n[6]=O*l+A*s+x*f+q*c,n[7]=j*l+F*s+T*f+R*c,n[8]=g*d+m*h+S*v+I*y,n[9]=P*d+w*h+k*v+B*y,n[10]=O*d+A*h+x*v+q*y,n[11]=j*d+F*h+T*v+R*y,n[12]=g*p+m*M+S*_+I*b,n[13]=P*p+w*M+k*_+B*b,n[14]=O*p+A*M+x*_+q*b,n[15]=j*p+F*M+T*_+R*b,n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?new r(16):arguments[1];return e[0]=t[12],e[1]=t[13],e[2]=t[14],e[3]=t[15],e}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?new r(16):arguments[1];return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(16):arguments[2];return n[0]=t[0]+e,n[1]=t[1]+e,n[2]=t[2]+e,n[3]=t[3]+e,n[4]=t[4]+e,n[5]=t[5]+e,n[6]=t[6]+e,n[7]=t[7]+e,n[8]=t[8]+e,n[9]=t[9]+e,n[10]=t[10]+e,n[11]=t[11]+e,n[12]=t[12]+e,n[13]=t[13]+e,n[14]=t[14]+e,n[15]=t[15]+e,n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(16):arguments[2];return n[0]=t[0]*e,n[1]=t[1]*e,n[2]=t[2]*e,n[3]=t[3]*e,n[4]=t[4]*e,n[5]=t[5]*e,n[6]=t[6]*e,n[7]=t[7]*e,n[8]=t[8]*e,n[9]=t[9]*e,n[10]=t[10]*e,n[11]=t[11]*e,n[12]=t[12]*e,n[13]=t[13]*e,n[14]=t[14]*e,n[15]=t[15]*e,n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(16):arguments[2];return n[0]=t[0]-e,n[1]=t[1]-e,n[2]=t[2]-e,n[3]=t[3]-e,n[4]=t[4]-e,n[5]=t[5]-e,n[6]=t[6]-e,n[7]=t[7]-e,n[8]=t[8]-e,n[9]=t[9]-e,n[10]=t[10]-e,n[11]=t[11]-e,n[12]=t[12]-e,n[13]=t[13]-e,n[14]=t[14]-e,n[15]=t[15]-e,n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(16):arguments[2];return n[0]=t[0]*e[0],n[1]=t[1]*e[0],n[2]=t[2]*e[0],n[3]=t[3],n[4]=t[4]*e[1],n[5]=t[5]*e[1],n[6]=t[6]*e[1],n[7]=t[7],n[8]=t[8]*e[2],n[9]=t[9]*e[2],n[10]=t[10]*e[2],n[11]=t[11],n[12]=t[12],n[13]=t[13],n[14]=t[14],n[15]=t[15],n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){return t[8]=e[0],t[9]=e[1],t[10]=e[2],t[11]=e[3],t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e){return t[12]=e[0],t[13]=e[1],t[14]=e[2],t[15]=e[3],t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e){return t[4]=e[0],t[5]=e[1],t[6]=e[2],t[7]=e[3],t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(16):arguments[2],u=e[0],i=e[1],a=e[2],o=e[3];return 1!==o?(n[0]=t[0]*u+t[4]*i+t[8]*a+t[12]*o,n[1]=t[1]*u+t[5]*i+t[9]*a+t[13]*o,n[2]=t[2]*u+t[6]*i+t[10]*a+t[14]*o,n[3]=t[3]*u+t[7]*i+t[11]*a+t[15]*o):(n[0]=t[0]*u+t[4]*i+t[8]*a+t[12],n[1]=t[1]*u+t[5]*i+t[9]*a+t[13],n[2]=t[2]*u+t[6]*i+t[10]*a+t[14],n[3]=t[3]*u+t[7]*i+t[11]*a+t[15]),n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){t[12]+=v[0],t[13]+=v[1],t[14]+=v[2],t[15]+=v[3]}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?new r(16):arguments[1];return e[0]=t[0],e[1]=t[4],e[2]=t[8],e[3]=t[12],e[4]=t[1],e[5]=t[5],e[6]=t[9],e[7]=t[13],e[8]=t[2],e[9]=t[6],e[10]=t[10],e[11]=t[14],e[12]=t[3],e[13]=t[7],e[14]=t[11],e[15]=t[15],e}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?new r(16):arguments[1];return e[0]=t[4],e[1]=t[5],e[2]=t[6],e[3]=t[7],e}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(e,"__esModule",{value:!0}),e.TransformVector=e.ToAxisRotation=e.Slerp=e.PosTransformVector=e.PosTransformPoint=e.PosMultiply=e.PosBuild=e.Normalize=e.MultiplyTranslate=e.Multiply=e.Lerp=e.Length=e.IsSimilar=e.FromM43=e.FromAxisRotation=e.Equal=e.Dot=e.Copy=e.Conjugate=e.Build=void 0;var u=n(116),i=r(u),a=n(562),o=r(a),l=n(563),s=r(l),f=n(564),c=r(f),d=n(566),h=r(d),v=n(567),y=r(v),p=n(571),M=r(p),_=n(572),b=r(_),g=n(576),P=r(g),O=n(578),j=r(O),m=n(579),w=r(m),A=n(580),F=r(A),S=n(568),k=r(S),x=n(581),T=r(x),I=n(582),B=r(I),q=n(583),R=r(q),C=n(586),D=r(C),E=n(587),V=r(E),z=n(588),L=r(z),Y=n(585),X=r(Y);e.Build=i["default"],e.Conjugate=o["default"],e.Copy=s["default"],e.Dot=c["default"],e.Equal=h["default"],e.FromAxisRotation=y["default"],e.FromM43=M["default"],e.IsSimilar=b["default"],e.Length=P["default"],e.Lerp=j["default"],e.Multiply=w["default"],e.MultiplyTranslate=F["default"],e.Normalize=k["default"],e.PosBuild=T["default"],e.PosMultiply=B["default"],e.PosTransformPoint=R["default"],e.PosTransformVector=D["default"],e.Slerp=V["default"],e.ToAxisRotation=L["default"],e.TransformVector=X["default"]},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?new r(4):arguments[1];return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e[3]=t[3],e}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?new r(4):arguments[1];return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function u(t,e){return(0,a["default"])(t,e)}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=u;var i=n(565),a=r(i)},function(t,e){"use strict";function n(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]+t[3]*e[3]}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;Float32Array},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?1e-6:arguments[2];return Math.abs(t[0]-e[0])<=n&&Math.abs(t[1]-e[1])<=n&&Math.abs(t[2]-e[2])<=n&&Math.abs(t[3]-e[3])<=n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function u(t,e){var n=arguments.length<=2||void 0===arguments[2]?new o(4):arguments[2],r=.5*e,u=Math.sin(r),i=Math.cos(r);return n[0]=t[0]*u,n[1]=t[1]*u,n[2]=t[2]*u,n[3]=i,(0,a["default"])(n,n)}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=u;var i=n(568),a=r(i),o=Float32Array},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function u(t){var e=arguments.length<=1||void 0===arguments[1]?new c(4):arguments[1],n=(0,f["default"])(t,t);return 0===n?(0,a["default"])(e):(0,l["default"])(t,1/Math.sqrt(n),e)}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=u;var i=n(569),a=r(i),o=n(570),l=r(o),s=n(564),f=r(s),c=Float32Array},function(t,e){"use strict";function n(){var t=arguments.length<=0||void 0===arguments[0]?new r(4):arguments[0];return t[0]=0,t[1]=0,t[2]=0,t[3]=0,t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(4):arguments[2];return 0===e?(n[0]=0,n[1]=0,n[2]=0,n[3]=0):(n[0]=t[0]*e,n[1]=t[1]*e,n[2]=t[2]*e,n[3]=t[3]*e),n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function u(t){var e=arguments.length<=1||void 0===arguments[1]?new s(4):arguments[1],n=t[0],r=t[1],u=t[2],i=t[3],o=t[4],f=t[5],c=t[6],d=t[7],h=t[8],v=void 0,y=void 0,p=void 0,M=void 0,_=void 0,b=n+o+h+1;b>1e-6?(M=Math.sqrt(b)/2,v=(f-d)/(4*M),y=(c-u)/(4*M),p=(r-i)/(4*M)):n>o&&n>h?(_=2*Math.sqrt(1+n-o-h),M=(f-d)/_,v=.25*_,y=(i+r)/_,p=(c+u)/_):o>h?(_=2*Math.sqrt(1+o-n-h),M=(c-u)/_,v=(i+r)/_,y=.25*_,p=(d+f)/_):(_=2*Math.sqrt(1+h-n-o),M=(r-i)/_,v=(c+u)/_,y=(d+f)/_,p=.25*_);var g=(0,a["default"])([v,y,p,M],e);return(0,l["default"])(g,e)}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=u;var i=n(568),a=r(i),o=n(562),l=r(o),s=Float32Array},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function u(t,e){var n=arguments.length<=2||void 0===arguments[2]?1e-6:arguments[2],r=t;t[3]*e[3]<0&&(r=(0,a["default"])(t));var u=(0,l["default"])((0,f["default"])(r,e)),i=n*n;return i>u}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=u;var i=n(573),a=r(i),o=n(574),l=r(o),s=n(575),f=r(s)},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?new r(4):arguments[1];return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e[3]=-t[3],e}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t){var e=t[0],n=t[1],r=t[2],u=t[3];return e*e+n*n+r*r+u*u}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(4):arguments[2];return n[0]=t[0]-e[0],n[1]=t[1]-e[1],n[2]=t[2]-e[2],n[3]=t[3]-e[3],n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=function(t){return(0,i["default"])(t)};var u=n(577),i=r(u)},function(t,e){"use strict";function n(t){var e=t[0],n=t[1],r=t[2],u=t[3];return Math.sqrt(e*e+n*n+r*r+u*u)}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e,n){var u=arguments.length<=3||void 0===arguments[3]?new r(4):arguments[3],i=t[0],a=t[1],o=t[2],l=t[3],s=e[0],f=e[1],c=e[2],d=e[3];return u[0]=(s-i)*n+i,u[1]=(f-a)*n+a,u[2]=(c-o)*n+o,u[3]=(d-l)*n+l,u}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(4):arguments[2],u=t[0],i=t[1],a=t[2],o=t[3],l=e[0],s=e[1],f=e[2],c=e[3],d=f*i-s*a,h=l*a-f*u,v=s*u-l*i;return n[0]=u*c+l*o+d,n[1]=i*c+s*o+h,n[2]=a*c+f*o+v,n[3]=c*o-(l*u+s*i+f*a),n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e,n,r,u,i){var a=t[0],o=t[1],l=t[2],s=t[3],f=n[0],c=n[1],d=n[2],h=n[3],v=l*c-o*d,y=a*d-l*f,p=o*f-a*c;u[0]=f*s+a*h+v,u[1]=c*s+o*h+y,u[2]=d*s+l*h+p,u[3]=s*h-(a*f+o*c+l*d);var M=e[0],_=e[1],b=e[2],g=r[0],P=r[1],O=r[2],j=s*s-(a*a+o*o+l*l),m=g*j,w=P*j,A=O*j;j=a*g+o*P+l*O;var F=j+j;m+=a*F,w+=o*F,A+=l*F,v=l*P-o*O,y=a*O-l*g,p=o*g-a*P;var S=s+s;m+=v*S,w+=y*S,A+=p*S,i[0]=m+M,i[1]=w+_,i[2]=A+b}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?null:arguments[2],u=arguments.length<=3||void 0===arguments[3]?null:arguments[3],i=arguments.length<=4||void 0===arguments[4]?null:arguments[4],a=arguments.length<=5||void 0===arguments[5]?null:arguments[5],o=arguments.length<=6||void 0===arguments[6]?null:arguments[6],l=arguments.length<=7||void 0===arguments[7]?new r(7):arguments[7];return null!==u?(l[0]=t,l[1]=e,l[2]=n,l[3]=u,l[4]=i,l[5]=a,l[6]=o):(l[0]=t[0],l[1]=t[1],l[2]=t[2],l[3]=t[3],l[4]=e[0],l[5]=e[1],l[6]=e[2]),l}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function u(t,e){var n=qp2.slice(4,7),r=(0,a["default"])(qp1,qp2),u=(0,l["default"])(qp1,n);return r[4]=u[0],r[5]=u[1],r[6]=u[2],r}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=u;var i=n(579),a=r(i),o=n(583),l=r(o)},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function u(t,e){var n=t.slice(4,7),r=(0,l["default"])(t,e);return(0,a["default"])(r,n)}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=u;var i=n(584),a=r(i),o=n(585),l=r(o)},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(3):arguments[2];return n[0]=t[0]+e[0],n[1]=t[1]+e[1],n[2]=t[2]+e[2],n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(3):arguments[2],u=t[0],i=t[1],a=t[2],o=t[3],l=e[0],s=e[1],f=e[2],c=o*o-(u*u+i*i+a*a),d=l*c,h=s*c,v=f*c;c=u*l+i*s+a*f;var y=c+c;d+=u*y,h+=i*y,v+=a*y;var p=a*s-i*f,M=u*f-a*l,_=i*l-u*s,b=o+o;return d+=p*b,h+=M*b,v+=_*b,n[0]=d,n[1]=h,n[2]=v,n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function u(t,e){var n=arguments.length<=2||void 0===arguments[2]?new o(3):arguments[2];return(0,a["default"])(t,e,n)}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=u;var i=n(585),a=r(i),o=Float32Array},function(t,e){"use strict";function n(t,e,n){var u=arguments.length<=3||void 0===arguments[3]?new r(4):arguments[3],i=t[0],a=t[1],o=t[2],l=t[3],s=e[0],f=e[1],c=e[2],d=e[3],h=i*s+a*f+o*c+l*d,v=h;if(0>v&&(i=-i,a=-a,o=-o,l=-l,v=-v),v>this.cosMinSlerpAngle){if(v>1-1e-6)return u[0]=i,u[1]=a,u[2]=o,u[3]=l,u;var y=n;0>=h&&(y=-n);var p=(s-i)*y+i,M=(f-a)*y+a,_=(c-o)*y+o,b=(d-l)*y+l,g=Math.sqrt(p*p+M*M+_*_+b*b),P=1/g;return u[0]=p*P,u[1]=M*P,u[2]=_*P,u[3]=b*P,u}var O=Math.acos(v),j=1/Math.sin(O),m=Math.sin((1-n)*O)*j;return i*=m,a*=m,o*=m,l*=m,m=Math.sin(n*O)*j,s*=m,f*=m,c*=m,d*=m,u[0]=i+s,u[1]=a+f,u[2]=o+c,u[3]=l+d,u}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=(Math.cos(Math.PI/40),Float32Array)},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?new r(4):arguments[1],n=t[3],u=2*Math.acos(n),i=1-n*n;if(1e-6>i)e[0]=1,
e[1]=0,e[2]=0,e[3]=u;else{var a=1/Math.sqrt(i);e[0]=t[0]*a,e[1]=t[1]*a,e[2]=t[2]*a,e[3]=u}return e}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e,n){"use strict";"create index";function r(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}Object.defineProperty(e,"__esModule",{value:!0}),e.twoDimensional=void 0;var u=n(590),i=r(u);e.twoDimensional=i},function(t,e,n){"use strict";"create index";function r(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function u(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(e,"__esModule",{value:!0}),e.standard=e.minimal=e.components=e.basic=e.SetTransformToContext=e.SetTransformToCSS=void 0;var i=n(591),a=u(i),o=n(200),l=u(o),s=n(592),f=r(s),c=n(593),d=r(c),h=n(595),v=r(h),y=n(598),p=r(y);e.SetTransformToCSS=a["default"],e.SetTransformToContext=l["default"],e.basic=f,e.components=d,e.minimal=v,e.standard=p},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?1:arguments[2];t.dirty&&t.updateTransform(n);var r=t.local,u=100*t.rotationAnchor.x,i=100*t.rotationAnchor.y;e.style["transform-origin"]=u+"% "+i+"% 0px",e.style.transform="matrix("+r[0]+", "+r[1]+", "+r[2]+", "+r[3]+", "+r[4]+", "+r[5]+")"}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(e,"__esModule",{value:!0}),e.Transform=e.BaseTransform=void 0;var u=n(191),i=r(u),a=n(192),o=r(a);e.BaseTransform=i["default"],e.Transform=o["default"]},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(e,"__esModule",{value:!0}),e.Scale=e.RotationAnchor=e.Rotation=e.Position=e.Pivot=e.BaseTransformComponent=void 0;var u=n(195),i=r(u),a=n(594),o=r(a),l=n(196),s=r(l),f=n(197),c=r(f),d=n(199),h=r(d),v=n(194),y=r(v);e.BaseTransformComponent=i["default"],e.Pivot=o["default"],e.Position=s["default"],e.Rotation=c["default"],e.RotationAnchor=h["default"],e.Scale=y["default"]},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function u(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function a(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),l=n(195),s=r(l),f=function(t){function e(t){var n=arguments.length<=1||void 0===arguments[1]?0:arguments[1],r=arguments.length<=2||void 0===arguments[2]?0:arguments[2];return u(this,e),i(this,Object.getPrototypeOf(e).call(this,t,n,r))}return a(e,t),o(e,[{key:"addProperties",value:function(t){var e=this;t.hasOwnProperty("pivot")||(t.pivot={}),Object.defineProperties(t.pivot,{x:{enumerable:!0,get:function(){return e.getX()},set:function(t){return e.setX(t)}},y:{enumerable:!0,get:function(){return e.getY()},set:function(t){return e.setY(t)}}})}}]),e}(s["default"]);e["default"]=f},function(t,e,n){"use strict";"create index";function r(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(e,"__esModule",{value:!0}),e.Transform=e.BaseTransform=void 0;var u=n(596),i=r(u),a=n(597),o=r(a);e.BaseTransform=i["default"],e.Transform=o["default"]},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function u(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),a=n(597),o=r(a),l=function(){function t(){var e=arguments.length<=0||void 0===arguments[0]?0:arguments[0],n=arguments.length<=1||void 0===arguments[1]?0:arguments[1],r=arguments.length<=2||void 0===arguments[2]?1:arguments[2],i=arguments.length<=3||void 0===arguments[3]?1:arguments[3];u(this,t),this.transform=new o["default"](e,n,r,i),this.position=this.transform.position,this.scale=this.transform.scale}return i(t,[{key:"x",get:function(){return this.position.getX()},set:function(t){return this.position.setX(t)}},{key:"y",get:function(){return this.position.getY()},set:function(t){return this.position.setY(t)}}]),t}();e["default"]=l},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function u(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),a=n(193),o=r(a),l=n(194),s=r(l),f=n(196),c=r(f),d=function(){function t(){var e=arguments.length<=0||void 0===arguments[0]?0:arguments[0],n=arguments.length<=1||void 0===arguments[1]?0:arguments[1],r=arguments.length<=2||void 0===arguments[2]?1:arguments[2],i=arguments.length<=3||void 0===arguments[3]?1:arguments[3];u(this,t),this.position=new c["default"](this,e,n),this.scale=new s["default"](this,r,i),this.local=(0,o["default"])(r,0,0,i,e,n),this.interpolate=!1,this.immediate=!1,this.dirty=!0}return i(t,[{key:"addProperties",value:function(t){return this.position.addProperties(t),t.position=this.position,t.scale=this.scale,t}},{key:"enableImmediateUpdates",value:function(){return this.immediate=!0,this}},{key:"disableImmediateUpdates",value:function(){return this.immediate=!1,this.dirty=!0,this}},{key:"enableInterpolation",value:function(){return this.interpolate=!0,this.position.reset(this.position.x,this.position.y),this.scale.reset(this.scale.x,this.scale.y),this}},{key:"disableInterpolation",value:function(){return this.interpolate=!1,this}},{key:"setDirty",value:function(){return this.immediate?this.updateTransform():this.dirty=!0,this}},{key:"updateTransform",value:function(){var t=arguments.length<=0||void 0===arguments[0]?1:arguments[0];return this.local[0]=this.scale[0],this.local[1]=0,this.local[2]=0,this.local[3]=this.scale[1],this.interpolate?(this.local[4]=this.position.getDeltaX(t),this.local[5]=this.position.getDeltaY(t)):(this.local[4]=this.position[0],this.local[5]=this.position[1]),this.dirty=!1,this}},{key:"destroy",value:function(){this.position.destroy(),this.scale.destroy(),this.local=void 0}}]),t}();e["default"]=d},function(t,e,n){"use strict";"create index";function r(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(e,"__esModule",{value:!0}),e.Transform=e.BaseTransform=void 0;var u=n(599),i=r(u),a=n(600),o=r(a);e.BaseTransform=i["default"],e.Transform=o["default"]},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function u(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),a=n(600),o=r(a),l=function(){function t(){var e=arguments.length<=0||void 0===arguments[0]?0:arguments[0],n=arguments.length<=1||void 0===arguments[1]?0:arguments[1],r=arguments.length<=2||void 0===arguments[2]?0:arguments[2],i=arguments.length<=3||void 0===arguments[3]?1:arguments[3],a=arguments.length<=4||void 0===arguments[4]?1:arguments[4];u(this,t),this.transform=new o["default"](e,n,r,i,a),this.position=this.transform.position,this.scale=this.transform.scale,this.pivot=this.transform.pivot,this.rotationAnchor=this.transform.rotationAnchor}return i(t,[{key:"x",get:function(){return this.position.getX()},set:function(t){return this.position.setX(t)}},{key:"y",get:function(){return this.position.getY()},set:function(t){return this.position.setY(t)}},{key:"rotation",get:function(){return this.transform.rotation.getValue()},set:function(t){return this.transform.rotation.setValue(t)}}]),t}();e["default"]=l},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function u(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),a=n(193),o=r(a),l=n(194),s=r(l),f=n(594),c=r(f),d=n(196),h=r(d),v=n(197),y=r(v),p=n(199),M=r(p),_=function(){function t(){var e=arguments.length<=0||void 0===arguments[0]?0:arguments[0],n=arguments.length<=1||void 0===arguments[1]?0:arguments[1],r=arguments.length<=2||void 0===arguments[2]?0:arguments[2],i=arguments.length<=3||void 0===arguments[3]?1:arguments[3],a=arguments.length<=4||void 0===arguments[4]?1:arguments[4];u(this,t),this.position=new h["default"](this,e,n),this.scale=new s["default"](this,i,a),this.pivot=new c["default"](this,0,0),this.rotation=new y["default"](this,r),this.rotationAnchor=new M["default"](this,0,0),this.local=(0,o["default"])(i,0,0,a,e,n),this.interpolate=!1,this.immediate=!1,this.dirty=!0}return i(t,[{key:"addProperties",value:function(t){return this.position.addProperties(t),this.rotation.addProperties(t),t.position=this.position,t.pivot=this.pivot,t.scale=this.scale,t.rotationAnchor=this.rotationAnchor,t}},{key:"enableImmediateUpdates",value:function(){return this.immediate=!0,this}},{key:"disableImmediateUpdates",value:function(){return this.immediate=!1,this.dirty=!0,this}},{key:"enableInterpolation",value:function(){return this.interpolate=!0,this.position.reset(this.position.x,this.position.y),this.scale.reset(this.scale.x,this.scale.y),this}},{key:"disableInterpolation",value:function(){return this.interpolate=!1,this}},{key:"setDirty",value:function(){return this.immediate?this.updateTransform():this.dirty=!0,this}},{key:"updateTransform",value:function(){var t=arguments.length<=0||void 0===arguments[0]?1:arguments[0],e=this.interpolate?this.position.getDeltaX(t):this.position[0],n=this.interpolate?this.position.getDeltaY(t):this.position[1];return this.rotation.isFast?(this.local[0]=this.scale[0],this.local[1]=0,this.local[2]=0,this.local[3]=this.scale[1],this.local[4]=e-this.pivot[0]*this.scale[0],this.local[5]=n-this.pivot[1]*this.scale[1]):(this.local[0]=this.rotation.cr*this.scale[0],this.local[1]=this.rotation.sr*this.scale[0],this.local[2]=-this.rotation.sr*this.scale[1],this.local[3]=this.rotation.cr*this.scale[1],this.local[4]=e-this.pivot[0]*this.local[0]+this.pivot[1]*this.local[2],this.local[5]=n-this.pivot[0]*this.local[1]+this.pivot[1]*this.local[3]),this.dirty=!1,this}},{key:"destroy",value:function(){this.position.destroy(),this.scale.destroy(),this.pivot.destroy(),this.rotation.destroy(),this.rotationAnchor.destroy(),this.local=void 0}}]),t}();e["default"]=_},function(t,e,n){"use strict";"create index";function r(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}Object.defineProperty(e,"__esModule",{value:!0}),e.vec4=e.vec3=e.vec2=e.common=void 0;var u=n(602),i=r(u),a=n(605),o=r(a),l=n(647),s=r(l),f=n(683),c=r(f);e.common=i,e.vec2=o,e.vec3=s,e.vec4=c},function(t,e,n){"use strict";"create index";function r(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(e,"__esModule",{value:!0}),e.RotateAround=e.Rotate=void 0;var u=n(603),i=r(u),a=n(604),o=r(a);e.Rotate=i["default"],e.RotateAround=o["default"]},function(t,e){"use strict";function n(t,e){var n=t[0],r=t[1];return t[0]=n*Math.cos(e)-r*Math.sin(e),t[1]=n*Math.sin(e)+r*Math.cos(e),t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e,n,r){var u=Math.cos(r),i=Math.sin(r),a=t[0]-e,o=t[1]-n;return t[0]=a*u-o*i+e,t[1]=a*i+o*u+n,t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e,n){"use strict";"create index";function r(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function u(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(e,"__esModule",{value:!0}),e.Vec2=e.Sub=e.Set=e.Select=e.ScalarSub=e.ScalarMultiplyAdd=e.ScalarMultiply=e.ScalarMin=e.ScalarMax=e.ScalarMask=e.ScalarBuild=e.ScalarAdd=e.Reciprocal=e.Project=e.PerpDot=e.ObservableVec2=e.Normalize=e.Neg=e.MultiplyAdd=e.Multiply=e.Min=e.Max=e.Mask=e.Lerp=e.LengthSq=e.Length=e.Floor=e.Equal=e.Dot=e.DistanceSq=e.Distance=e.Copy=e.Ceil=e.BuildZero=e.BuildYAxis=e.BuildXAxis=e.BuildOne=e.Build=e.Angle=e.Add4=e.Add3=e.Add=e.Abs=void 0;var i=n(606),a=u(i),o=n(607),l=u(o),s=n(608),f=u(s),c=n(609),d=u(c),h=n(610),v=u(h),y=n(118),p=u(y),M=n(611),_=u(M),b=n(612),g=u(b),P=n(613),O=u(P),j=n(614),m=u(j),w=n(615),A=u(w),F=n(616),S=u(F),k=n(617),x=u(k),T=n(618),I=u(T),B=n(619),q=u(B),R=n(620),C=u(R),D=n(621),E=u(D),V=n(622),z=u(V),L=n(623),Y=u(L),X=n(624),U=u(X),N=n(625),Z=r(N),Q=n(626),G=u(Q),W=n(627),H=u(W),J=n(628),K=u(J),$=n(629),tt=u($),et=n(630),nt=u(et),rt=n(631),ut=u(rt),it=n(632),at=u(it),ot=n(633),lt=u(ot),st=n(634),ft=u(st),ct=n(635),dt=u(ct),ht=n(636),vt=u(ht),yt=n(637),pt=u(yt),Mt=n(638),_t=r(Mt),bt=n(639),gt=u(bt),Pt=n(640),Ot=u(Pt),jt=n(641),mt=u(jt),wt=n(642),At=u(wt),Ft=n(643),St=u(Ft),kt=n(644),xt=u(kt),Tt=n(645),It=u(Tt),Bt=n(646),qt=u(Bt),Rt=n(100),Ct=u(Rt);e.Abs=a["default"],e.Add=l["default"],e.Add3=f["default"],e.Add4=d["default"],e.Angle=v["default"],e.Build=p["default"],e.BuildOne=_["default"],e.BuildXAxis=g["default"],e.BuildYAxis=O["default"],e.BuildZero=m["default"],e.Ceil=A["default"],e.Copy=S["default"],e.Distance=x["default"],e.DistanceSq=I["default"],e.Dot=q["default"],e.Equal=C["default"],e.Floor=E["default"],e.Length=z["default"],e.LengthSq=Y["default"],e.Lerp=U["default"],e.Mask=Z,e.Max=G["default"],e.Min=H["default"],e.Multiply=K["default"],e.MultiplyAdd=tt["default"],e.Neg=nt["default"],e.Normalize=ut["default"],e.ObservableVec2=at["default"],e.PerpDot=lt["default"],e.Project=ft["default"],e.Reciprocal=dt["default"],e.ScalarAdd=vt["default"],e.ScalarBuild=pt["default"],e.ScalarMask=_t,e.ScalarMax=gt["default"],e.ScalarMin=Ot["default"],e.ScalarMultiply=mt["default"],e.ScalarMultiplyAdd=At["default"],e.ScalarSub=St["default"],e.Select=xt["default"],e.Set=It["default"],e.Sub=qt["default"],e.Vec2=Ct["default"]},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?new r(2):arguments[1];return e[0]=Math.abs(t[0]),e[1]=Math.abs(t[1]),e}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(2):arguments[2];return n[0]=t[0]+e[0],n[1]=t[1]+e[1],n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e,n){var u=arguments.length<=3||void 0===arguments[3]?new r(2):arguments[3];return u[0]=t[0]+e[0]+n[0],u[1]=t[1]+e[1]+n[1],u}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e,n,u){var i=arguments.length<=4||void 0===arguments[4]?new r(2):arguments[4];return i[0]=t[0]+e[0]+n[0]+u[0],i[1]=t[1]+e[1]+n[1]+u[1],i}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function u(t,e){var n=t[0]*e[0]+t[1]*e[1],r=Math.sqrt(t[0]*t[0]+t[1]*t[1]),u=Math.sqrt(e[0]*e[0]+e[1]*e[1]);return Math.acos((0,a["default"])(n/(r*u),-1,1))}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=u;var i=n(28),a=r(i)},function(t,e){"use strict";function n(){var t=arguments.length<=0||void 0===arguments[0]?new r(2):arguments[0];return t[0]=1,t[1]=1,t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(){var t=arguments.length<=0||void 0===arguments[0]?new r(2):arguments[0];return t[0]=1,t[1]=0,t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(){var t=arguments.length<=0||void 0===arguments[0]?new r(2):arguments[0];return t[0]=0,t[1]=1,t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(){var t=arguments.length<=0||void 0===arguments[0]?new r(2):arguments[0];return t[0]=0,t[1]=0,t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?new r(2):arguments[1];return e[0]=Math.ceil(t[0]),e[1]=Math.ceil(t[1]),e}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?new r(2):arguments[1];return e[0]=t[0],e[1]=t[1],e}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){var n=t[0]-e[0],r=t[1]-e[1];return Math.sqrt(n*n+r*r)}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e){var n=t[0]-e[0],r=t[1]-e[1];return n*n+r*r}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e){return t[0]*e[0]+t[1]*e[1]}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?1e-6:arguments[2];return Math.abs(t[0]-e[0])<=n&&Math.abs(t[1]-e[1])<=n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?new r(2):arguments[1];return e[0]=Math.floor(t[0]),e[1]=Math.floor(t[1]),e}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t){var e=t[0],n=t[1];return Math.sqrt(e*e+n*n)}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t){var e=t[0],n=t[1];return e*e+n*n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e,n){var u=arguments.length<=3||void 0===arguments[3]?new r(2):arguments[3];return u[0]=t[0]+(e[0]-t[0])*n,u[1]=t[1]+(e[1]-t[1])*n,u}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?1e-6:arguments[2];return Math.abs(t[0]-e[0])<=n&&Math.abs(t[1]-e[1])<=n}function r(t,e){return[t[0]<e[0],t[1]<e[1]]}function u(t,e){return[t[0]>e[0],t[1]>e[1]]}function i(t,e){return[t[0]>=e[0],t[1]>=e[1]]}function a(t){return[!t[0],!t[1]]}function o(t,e){return[t[0]||e[0],t[1]||e[1]]}function l(t,e){return[t[0]&&e[0],t[1]&&e[1]]}Object.defineProperty(e,"__esModule",{value:!0}),e.equal=n,e.less=r,e.greater=u,e.greaterEq=i,e.not=a,e.or=o,e.and=l},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(2):arguments[2];return n[0]=Math.max(t[0],e[0]),n[1]=Math.max(t[1],e[1]),n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(2):arguments[2];return n[0]=Math.min(t[0],e[0]),n[1]=Math.min(t[1],e[1]),n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(2):arguments[2];return n[0]=t[0]*e[0],n[1]=t[1]*e[1],n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e,n){var u=arguments.length<=3||void 0===arguments[3]?new r(2):arguments[3];return u[0]=t[0]*e[0]+n[0],u[1]=t[1]*e[1]+n[1],u}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?new r(2):arguments[1];return e[0]=-t[0],e[1]=-t[1],e}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?new r(2):arguments[1],n=t[0],u=t[1],i=n*n+u*u;if(i>0){var a=1/Math.sqrt(i);e[0]=n*a,e[1]=u*a}else e[0]=0,e[1]=0;return e}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),u=function(){function t(e){var r=arguments.length<=1||void 0===arguments[1]?0:arguments[1],u=arguments.length<=2||void 0===arguments[2]?0:arguments[2];n(this,t),this.onUpdate=e,this[0]=r,this[1]=u}return r(t,[{key:"set",value:function(t){var e=arguments.length<=1||void 0===arguments[1]?t:arguments[1];return this.onUpdate(t,e,this[0],this[1]),this[0]=t,this[1]=e,this}},{key:"setTo",value:function(t){var e=arguments.length<=1||void 0===arguments[1]?t:arguments[1];return this.onUpdate(t,e,this[0],this[1]),this[0]=t,this[1]=e,this}},{key:"zero",value:function(){return this.onUpdate(0,0,this[0],this[1]),this[0]=0,this[1]=0,this}},{key:"add",value:function(t){return this.onUpdate(x,y,this[0],this[1]),this[0]+=t[0],this[1]+=t[1],this}},{key:"addScalar",value:function(t){return this[0]+=t,this[1]+=t,this}},{key:"addVectors",value:function(t,e){return this[0]=t[0]+e[0],this[1]=t[1]+e[1],this}},{key:"addScaledVector",value:function(t,e){return this[0]+=t[0]*e,this[1]+=t[1]*e,this}},{key:"sub",value:function(t){return this[0]-=t[0],this[1]-=t[1],this}},{key:"subScalar",value:function(t){return this[0]-=t,this[1]-=t,this}},{key:"subVectors",value:function(t,e){return this[0]=t[0]-e[0],this[1]=t[1]-e[1],this}},{key:"multiply",value:function(t){return this[0]*=t[0],this[1]*=t[1],this}},{key:"multiplyScalar",value:function(t){return isFinite(t)?(this[0]*=t,this[1]*=t):(this[0]=0,this[1]=0),this}},{key:"scale",value:function(t){var e=arguments.length<=1||void 0===arguments[1]?t:arguments[1];return this[0]*=t,this[1]*=e,this}},{key:"scaleV",value:function(t){return this[0]*=t[0],this[1]*=t[1],this}},{key:"divide",value:function(t){return this[0]/=t,this[1]/=t,this}},{key:"divideScalar",value:function(t){var e=1/t;return isFinite(e)?(this[0]*=e,this[1]*=e):(this[0]=0,this[1]=0),this}},{key:"min",value:function(t){return this[0]=Math.min(this[0],t[0]),this[1]=Math.min(this[1],t[1]),this}},{key:"max",value:function(t){return this[0]=Math.max(this[0],t[0]),this[1]=Math.max(this[1],t[1]),this}},{key:"clamp",value:function(t,e){return this[0]=Math.max(t[0],Math.min(e[0],this[0])),this[1]=Math.max(t[1],Math.min(e[1],this[1])),this}},{key:"floor",value:function(){return this[0]=Math.floor(this[0]),this[1]=Math.floor(this[1]),this}},{key:"ceil",value:function(){return this[0]=Math.ceil(this[0]),this[1]=Math.ceil(this[1]),this}},{key:"round",value:function(){return this[0]=Math.round(this[0]),this[1]=Math.round(this[1]),this}},{key:"roundToZero",value:function(){return this[0]<0?this[0]=Math.ceil(this[0]):this[0]=Math.floor(this[0]),this[1]<1?this[1]=Math.ceil(this[1]):this[1]=Math.floor(this[1]),this}},{key:"negate",value:function(){return this[0]=-this[0],this[1]=-this[1],this}},{key:"normalize",value:function(){var t=this.length();return t>0&&(this[0]/=t,this[1]/=t),this}},{key:"perp",value:function(){var t=this[0],e=this[1];return this[0]=e,this[1]=-t,this}},{key:"dot",value:function(t){return this[0]*t[0]+this[1]*t[1]}},{key:"lengthSq",value:function(){return this[0]*this[0]+this[1]*this[1]}},{key:"lengthManhattan",value:function(){return Math.abs(this[0])+Math.abs(this[1])}},{key:"toString",value:function(){return"[Vec2 (x="+this[0]+", y="+this[1]+")]"}},{key:"x",get:function(){return this[0]},set:function(t){this.onUpdate(t,this[1],this[0],this[1]),this[0]=t}},{key:"y",get:function(){return this[1]},set:function(t){this.onUpdate(this[0],t,this[0],this[1]),this[1]=t}},{key:"length",set:function(t){var e=Math.atan2(this[1],this[0]);this[0]=Math.cos(e)*t,this[1]=Math.sin(e)*t},get:function(){return Math.sqrt(this[0]*this[0]+this[1]*this[1])}}]),t}();e["default"]=u},function(t,e){"use strict";function n(t,e){return t[0]*e[1]-t[1]*e[0]}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e){var n=t[0]*e[0]+t[1]*e[1],r=e[0]*e[0]+e[1]*e[1],u=n/r;return t[0]*=u,t[1]*=u,t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?new r(2):arguments[1];return e}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(2):arguments[2];return n[0]=t[0]+e,n[1]=t[1]+e,n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?new r(2):arguments[1];return e[0]=t,e[1]=t,e}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?1e-6:arguments[2];return[Math.abs(t[0]-e)<=n,Math.abs(t[1]-e)<=n]}function r(t,e){return[t[0]<e,t[1]<e]}function u(t,e){return[t[0]>e,t[1]>e]}function i(t,e){return[t[0]>=e,t[1]>=e]}Object.defineProperty(e,"__esModule",{value:!0}),e.equal=n,e.less=r,e.greater=u,e.greaterEq=i},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(2):arguments[2];return n[0]=Math.max(t[0],e),n[1]=Math.max(t[1],e),n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(2):arguments[2];return n[0]=Math.min(t[0],e),n[1]=Math.min(t[1],e),n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(2):arguments[2];return 0===e?(n[0]=0,n[1]=0):(n[0]=t[0]*e,n[1]=t[1]*e),n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e,n){var u=arguments.length<=3||void 0===arguments[3]?new r(2):arguments[3];return u[0]=t[0]+e[0]*n,u[1]=t[1]+e[1]*n,u}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(2):arguments[2];return n[0]=t[0]-e,n[1]=t[1]-e,n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e,n){var u=arguments.length<=3||void 0===arguments[3]?new r(2):arguments[3];return u[0]=t[0]?e[0]:n[0],u[1]=t[1]?e[1]:n[1],u}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){return t[0]=e[0],t[1]=e[1],t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;Float32Array},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(2):arguments[2];return n[0]=t[0]-e[0],n[1]=t[1]-e[1],n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e,n){"use strict";function r(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function u(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(e,"__esModule",{value:!0}),e.Vec3=e.Sub=e.Set=e.Select=e.ScalarSub=e.ScalarMultiplyAdd=e.ScalarMultiply=e.ScalarMin=e.ScalarMax=e.ScalarMask=e.ScalarBuild=e.ScalarAdd=e.Reciprocal=e.Project=e.Normalize=e.Neg=e.MultiplyAdd=e.Multiply=e.Min=e.Max=e.Mask=e.Lerp=e.LengthSq=e.Length=e.Equal=e.Dot=e.DistanceSq=e.Distance=e.Cross=e.Copy=e.BuildZero=e.BuildZAxis=e.BuildYAxis=e.BuildXAxis=e.BuildOne=e.Build=e.Angle=e.Add4=e.Add3=e.Add=e.Abs=void 0;var i=n(648),a=u(i),o=n(584),l=u(o),s=n(649),f=u(s),c=n(650),d=u(c),h=n(651),v=u(h),y=n(652),p=u(y),M=n(653),_=u(M),b=n(654),g=u(b),P=n(655),O=u(P),j=n(656),m=u(j),w=n(657),A=u(w),F=n(658),S=u(F),k=n(523),x=u(k),T=n(659),I=u(T),B=n(660),q=u(B),R=n(522),C=u(R),D=n(661),E=u(D),V=n(521),z=u(V),L=n(662),Y=u(L),X=n(663),U=u(X),N=n(664),Z=r(N),Q=n(665),G=u(Q),W=n(666),H=u(W),J=n(667),K=u(J),$=n(668),tt=u($),et=n(669),nt=u(et),rt=n(520),ut=u(rt),it=n(670),at=u(it),ot=n(671),lt=u(ot),st=n(672),ft=u(st),ct=n(673),dt=u(ct),ht=n(674),vt=r(ht),yt=n(675),pt=u(yt),Mt=n(676),_t=u(Mt),bt=n(677),gt=u(bt),Pt=n(678),Ot=u(Pt),jt=n(679),mt=u(jt),wt=n(680),At=u(wt),Ft=n(681),St=u(Ft),kt=n(682),xt=u(kt),Tt=n(115),It=u(Tt);e.Abs=a["default"],e.Add=l["default"],e.Add3=f["default"],e.Add4=d["default"],e.Angle=v["default"],e.Build=p["default"],e.BuildOne=_["default"],e.BuildXAxis=g["default"],e.BuildYAxis=O["default"],e.BuildZAxis=m["default"],e.BuildZero=A["default"],e.Copy=S["default"],e.Cross=x["default"],e.Distance=I["default"],e.DistanceSq=q["default"],e.Dot=C["default"],e.Equal=E["default"],e.Length=z["default"],e.LengthSq=Y["default"],e.Lerp=U["default"],e.Mask=Z,e.Max=G["default"],e.Min=H["default"],e.Multiply=K["default"],e.MultiplyAdd=tt["default"],e.Neg=nt["default"],e.Normalize=ut["default"],e.Project=at["default"],e.Reciprocal=lt["default"],e.ScalarAdd=ft["default"],e.ScalarBuild=dt["default"],e.ScalarMask=vt,e.ScalarMax=pt["default"],e.ScalarMin=_t["default"],e.ScalarMultiply=gt["default"],e.ScalarMultiplyAdd=Ot["default"],e.ScalarSub=mt["default"],e.Select=At["default"],e.Set=St["default"],e.Sub=xt["default"],e.Vec3=It["default"]},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?new r(3):arguments[1];return e[0]=Math.abs(t[0]),e[1]=Math.abs(t[1]),e[2]=Math.abs(t[2]),e}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e,n){var u=arguments.length<=3||void 0===arguments[3]?new r(3):arguments[3];return u[0]=t[0]+e[0]+n[0],u[1]=t[1]+e[1]+n[1],u[2]=t[2]+e[2]+n[2],u}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e,n,u){var i=arguments.length<=4||void 0===arguments[4]?new r(3):arguments[4];return i[0]=t[0]+e[0]+n[0]+u[0],i[1]=t[1]+e[1]+n[1]+u[1],i[2]=t[2]+e[2]+n[2]+u[2],i}Object.defineProperty(e,"__esModule",{
value:!0}),e["default"]=n;var r=Float32Array},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function u(t,e){var n=t[0]*e[0]+t[1]*e[1]+t[2]*(e[2]||1),r=Math.sqrt(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]),u=Math.sqrt(e[0]*e[0]+e[1]*e[1]+e[2]*e[2]);return Math.acos((0,a["default"])(n/(r*u),-1,1))}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=u;var i=n(28),a=r(i)},function(t,e){"use strict";function n(t,e,n){var u=arguments.length<=3||void 0===arguments[3]?new r(3):arguments[3];return u[0]=t,u[1]=e,u[2]=n,u}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(){var t=arguments.length<=0||void 0===arguments[0]?new r(3):arguments[0];return t[0]=1,t[1]=1,t[2]=1,t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(){var t=arguments.length<=0||void 0===arguments[0]?new r(3):arguments[0];return t[0]=1,t[1]=0,t[2]=0,t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(){var t=arguments.length<=0||void 0===arguments[0]?new r(3):arguments[0];return t[0]=0,t[1]=1,t[2]=0,t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(){var t=arguments.length<=0||void 0===arguments[0]?new r(3):arguments[0];return t[0]=0,t[1]=0,t[2]=1,t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(){var t=arguments.length<=0||void 0===arguments[0]?new r(3):arguments[0];return t[0]=0,t[1]=0,t[2]=0,t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?new r(3):arguments[1];return e[0]=t[0],e[1]=t[1],e[2]=t[2],e}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){var n=t[0]-e[0],r=t[1]-e[1],u=t[2]-e[2];return Math.sqrt(n*n+r*r+u*u)}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e){var n=t[0]-e[0],r=t[1]-e[1],u=t[2]-e[2];return n*n+r*r+u*u}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?1e-6:arguments[2];return Math.abs(t[0]-e[0])<=n&&Math.abs(t[1]-e[1])<=n&&Math.abs(t[2]-e[2])<=n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t){var e=t[0],n=t[1],r=t[2];return e*e+n*n+r*r}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e,n){return t[0]+=(e[0]-t[0])*n,t[1]+=(e[1]-t[1])*n,t[2]+=(e[2]-t[2])*n,t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?1e-6:arguments[2];return Math.abs(t[0]-e[0])<=n&&Math.abs(t[1]-e[1])<=n&&Math.abs(t[2]-e[2])<=n}function r(t,e){return[t[0]<e[0],t[1]<e[1],t[2]<e[2]]}function u(t,e){return[t[0]>e[0],t[1]>e[1],t[2]>e[2]]}function i(t,e){return[t[0]>=e[0],t[1]>=e[1],t[2]>=e[2]]}function a(t){return[!t[0],!t[1],!t[2]]}function o(t,e){return[t[0]||e[0],t[1]||e[1],t[2]||e[2]]}function l(t,e){return[t[0]&&e[0],t[1]&&e[1],t[2]&&e[2]]}Object.defineProperty(e,"__esModule",{value:!0}),e.equal=n,e.less=r,e.greater=u,e.greaterEq=i,e.not=a,e.or=o,e.and=l},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(3):arguments[2];return n[0]=Math.max(t[0],e[0]),n[1]=Math.max(t[1],e[1]),n[2]=Math.max(t[2],e[2]),n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(3):arguments[2];return n[0]=Math.min(t[0],e[0]),n[1]=Math.min(t[1],e[1]),n[2]=Math.min(t[2],e[2]),n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(3):arguments[2];return n[0]=t[0]*e[0],n[1]=t[1]*e[1],n[2]=t[2]*e[2],n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e,n){var u=arguments.length<=3||void 0===arguments[3]?new r(3):arguments[3];return u[0]=t[0]*e[0]+n[0],u[1]=t[1]*e[1]+n[1],u[2]=t[2]*e[2]+n[2],u}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?new r(3):arguments[1];return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){var n=t[0]*e[0]+t[1]*e[1]+t[2]*e[2],r=e[0]*e[0]+e[1]*e[1]+e[2]*e[2],u=n/r;return t[0]*=u,t[1]*=u,t[2]*=u,t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?new r(3):arguments[1];return e}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(3):arguments[2];return n[0]=t[0]+e,n[1]=t[1]+e,n[2]=t[2]+e,n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?new r(3):arguments[1];return e[0]=t,e[1]=t,e[2]=t,e}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?1e-6:arguments[2];return[Math.abs(t[0]-e)<=n,Math.abs(t[1]-e)<=n,Math.abs(t[2]-e)<=n]}function r(t,e){return[t[0]<e,t[1]<e,t[2]<e]}function u(t,e){return[t[0]>e,t[1]>e,t[2]>e]}function i(t,e){return[t[0]>=e,t[1]>=e,t[2]>=e]}Object.defineProperty(e,"__esModule",{value:!0}),e.equal=n,e.less=r,e.greater=u,e.greaterEq=i},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(3):arguments[2];return n[0]=Math.max(t[0],e),n[1]=Math.max(t[1],e),n[2]=Math.max(t[2],e),n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(3):arguments[2];return n[0]=Math.min(t[0],e),n[1]=Math.min(t[1],e),n[2]=Math.min(t[2],e),n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(3):arguments[2];return 0===e?(n[0]=0,n[1]=0,n[2]=0):(n[0]=t[0]*e,n[1]=t[1]*e,n[2]=t[2]*e),n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e,n){var u=arguments.length<=3||void 0===arguments[3]?new r(3):arguments[3];return u[0]=t[0]+e[0]*n,u[1]=t[1]+e[1]*n,u[2]=t[2]+e[2]*n,u}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(3):arguments[2];return n[0]=t[0]-e,n[1]=t[1]-e,n[2]=t[2]-e,n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e,n){var u=arguments.length<=3||void 0===arguments[3]?new r(3):arguments[3];return u[0]=t[0]?e[0]:n[0],u[1]=t[1]?e[1]:n[1],u[2]=t[2]?e[2]:n[2],u}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(3):arguments[2];return n[0]=t[0]-e[0],n[1]=t[1]-e[1],n[2]=t[2]-e[2],n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e,n){"use strict";"create index";function r(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function u(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(e,"__esModule",{value:!0}),e.Sub=e.Set=e.Select=e.ScalarSub=e.ScalarMultiplyAdd=e.ScalarMultiply=e.ScalarMin=e.ScalarMax=e.ScalarMask=e.ScalarEqual=e.ScalarBuild=e.ScalarAdd=e.Reciprocal=e.Neg=e.MultiplyAdd=e.Multiply=e.Min=e.Max=e.Mask=e.Many=e.LengthSq=e.Length=e.Equal=e.Dot=e.Copy=e.BuildZero=e.BuildOne=e.Build=e.Add4=e.Add3=e.Add=e.Abs=void 0;var i=n(684),a=u(i),o=n(685),l=u(o),s=n(686),f=u(s),c=n(687),d=u(c),h=n(688),v=u(h),y=n(689),p=u(y),M=n(569),_=u(M),b=n(690),g=u(b),P=n(565),O=u(P),j=n(691),m=u(j),w=n(577),A=u(w),F=n(574),S=u(F),k=n(692),x=u(k),T=n(693),I=r(T),B=n(694),q=u(B),R=n(695),C=u(R),D=n(696),E=u(D),V=n(697),z=u(V),L=n(573),Y=u(L),X=n(698),U=u(X),N=n(699),Z=u(N),Q=n(700),G=u(Q),W=n(701),H=u(W),J=n(702),K=r(J),$=n(703),tt=u($),et=n(704),nt=u(et),rt=n(570),ut=u(rt),it=n(705),at=u(it),ot=n(706),lt=u(ot),st=n(707),ft=u(st),ct=n(708),dt=u(ct),ht=n(575),vt=u(ht);e.Abs=a["default"],e.Add=l["default"],e.Add3=f["default"],e.Add4=d["default"],e.Build=v["default"],e.BuildOne=p["default"],e.BuildZero=_["default"],e.Copy=g["default"],e.Dot=O["default"],e.Equal=m["default"],e.Length=A["default"],e.LengthSq=S["default"],e.Many=x["default"],e.Mask=I,e.Max=q["default"],e.Min=C["default"],e.Multiply=E["default"],e.MultiplyAdd=z["default"],e.Neg=Y["default"],e.Reciprocal=U["default"],e.ScalarAdd=Z["default"],e.ScalarBuild=G["default"],e.ScalarEqual=H["default"],e.ScalarMask=K,e.ScalarMax=tt["default"],e.ScalarMin=nt["default"],e.ScalarMultiply=ut["default"],e.ScalarMultiplyAdd=at["default"],e.ScalarSub=lt["default"],e.Select=ft["default"],e.Set=dt["default"],e.Sub=vt["default"]},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?new r(4):arguments[1];return e[0]=Math.abs(t[0]),e[1]=Math.abs(t[1]),e[2]=Math.abs(t[2]),e[3]=Math.abs(t[3]),e}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(4):arguments[2];return n[0]=t[0]+e[0],n[1]=t[1]+e[1],n[2]=t[2]+e[2],n[3]=t[3]+e[3],n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e,n){var u=arguments.length<=3||void 0===arguments[3]?new r(4):arguments[3];return u[0]=t[0]+e[0]+n[0],u[1]=t[1]+e[1]+n[1],u[2]=t[2]+e[2]+n[2],u[3]=t[3]+e[3]+n[3],u}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e,n,u){var i=arguments.length<=4||void 0===arguments[4]?new r(4):arguments[4];return i[0]=t[0]+e[0]+n[0]+u[0],i[1]=t[1]+e[1]+n[1]+u[1],i[2]=t[2]+e[2]+n[2]+u[2],i[3]=t[3]+e[3]+n[3]+u[3],i}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e,n,u){var i=arguments.length<=4||void 0===arguments[4]?new r(4):arguments[4];return i[0]=t,i[1]=e,i[2]=n,i[3]=u,i}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(){var t=arguments.length<=0||void 0===arguments[0]?new r(4):arguments[0];return t[0]=1,t[1]=1,t[2]=1,t[3]=1,t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?new r(4):arguments[1];return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?1e-6:arguments[2];return Math.abs(t[0]-e[0])<=n&&Math.abs(t[1]-e[1])<=n&&Math.abs(t[2]-e[2])<=n&&Math.abs(t[3]-e[3])<=n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t){return t[0]||t[1]||t[2]||t[3]}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?1e-6:arguments[2];return Math.abs(t[0]-e[0])<=n&&Math.abs(t[1]-e[1])<=n&&Math.abs(t[2]-e[2])<=n&&Math.abs(t[3]-e[3])<=n}function r(t,e){return[t[0]<e[0],t[1]<e[1],t[2]<e[2],t[3]<e[3]]}function u(t,e){return[t[0]>e[0],t[1]>e[1],t[2]>e[2],t[3]>e[3]]}function i(t,e){return[t[0]>=e[0],t[1]>=e[1],t[2]>=e[2],t[3]>=e[3]]}function a(t){return[!t[0],!t[1],!t[2],!t[3]]}function o(t,e){return[t[0]||e[0],t[1]||e[1],t[2]||e[2],t[3]||e[3]]}function l(t,e){return[t[0]&&e[0],t[1]&&e[1],t[2]&&e[2],t[3]&&e[3]]}function s(t){return t[0]&&t[1]&&t[2]&&t[3]}Object.defineProperty(e,"__esModule",{value:!0}),e.equal=n,e.less=r,e.greater=u,e.greaterEq=i,e.not=a,e.or=o,e.and=l,e.all=s},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(4):arguments[2];return n[0]=Math.max(t[0],e[0]),n[1]=Math.max(t[1],e[1]),n[2]=Math.max(t[2],e[2]),n[3]=Math.max(t[3],e[3]),n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(4):arguments[2];return n[0]=Math.min(t[0],e[0]),n[1]=Math.min(t[1],e[1]),n[2]=Math.min(t[2],e[2]),n[3]=Math.min(t[3],e[3]),n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(4):arguments[2];return n[0]=t[0]*e[0],n[1]=t[1]*e[1],n[2]=t[2]*e[2],n[3]=t[3]*e[3],n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?new r(4):arguments[1],n=t[0],u=t[1],i=t[2],a=t[3],o=n*n+u*u+i*i+a*a;if(o>0){var l=1/Math.sqrt(o);e[0]=n*l,e[1]=u*l,e[2]=i*l,e[3]=a*l}else e[0]=0,e[1]=0,e[2]=0,e[3]=0;return e}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?new r(4):arguments[1];return e}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(4):arguments[2];return n[0]=t[0]+e,n[1]=t[1]+e,n[2]=t[2]+e,n[3]=t[3]+e,n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?new r(4):arguments[1];return e[0]=t,e[1]=t,e[2]=t,e[3]=t,e}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?1e-6:arguments[2];return Math.abs(t[0]-e)<=n&&Math.abs(t[1]-e)<=n&&Math.abs(t[2]-e)<=n&&Math.abs(t[3]-e)<=n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;Float32Array},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?1e-6:arguments[2];return[Math.abs(t[0]-e)<=n,Math.abs(t[1]-e)<=n,Math.abs(t[2]-e)<=n,Math.abs(t[3]-e)<=n]}function r(t,e){return[t[0]<e,t[1]<e,t[2]<e,t[3]<e]}function u(t,e){return[t[0]>e,t[1]>e,t[2]>e,t[3]>e]}function i(t,e){return[t[0]>=e,t[1]>=e,t[2]>=e,t[3]>=e]}Object.defineProperty(e,"__esModule",{value:!0}),e.equal=n,e.less=r,e.greater=u,e.greaterEq=i},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(4):arguments[2];return n[0]=Math.max(t[0],e),n[1]=Math.max(t[1],e),n[2]=Math.max(t[2],e),n[3]=Math.max(t[3],e),n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(4):arguments[2];return n[0]=Math.min(t[0],e),n[1]=Math.min(t[1],e),n[2]=Math.min(t[2],e),n[3]=Math.min(t[3],e),n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e,n){var u=arguments.length<=3||void 0===arguments[3]?new r(4):arguments[3];return u[0]=t[0]+e[0]*n,u[1]=t[1]+e[1]*n,u[2]=t[2]+e[2]*n,u[3]=t[3]+e[3]*n,u}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?new r(4):arguments[2];return n[0]=t[0]-e,n[1]=t[1]-e,n[2]=t[2]-e,n[3]=t[3]-e,n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";function n(t,e,n){var u=arguments.length<=3||void 0===arguments[3]?new r(4):arguments[3];return u[0]=t[0]?e[0]:n[0],u[1]=t[1]?e[1]:n[1],u[2]=t[2]?e[2]:n[2],u[3]=t[3]?e[3]:n[3],u}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var r=Float32Array},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=function(t,e){t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3]}}])});
//# sourceMappingURL=data:application/json;base64,