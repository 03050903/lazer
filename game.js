!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("game",[],e):"object"==typeof exports?exports.game=e():(t.lazer=t.lazer||{},t.lazer.game=e())}(this,function(){return function(t){function e(i){if(n[i])return n[i].exports;var r=n[i]={exports:{},id:i,loaded:!1};return t[i].call(r.exports,r,r.exports,e),r.loaded=!0,r.exports}var n={};return e.m=t,e.c=n,e.p="",e(0)}([function(t,e,n){"use strict";function i(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}Object.defineProperty(e,"__esModule",{value:!0}),e.nano=void 0;var r=n(169),o=i(r);e.nano=o},,,,,,,,,function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=function(){var t=arguments.length<=0||void 0===arguments[0]?256:arguments[0],e=arguments.length<=1||void 0===arguments[1]?256:arguments[1],n=arguments.length<=2||void 0===arguments[2]?"":arguments[2],i=document.createElement("canvas");return""!==n&&(i.id=n),i.width=t,i.height=e,i.style.display="block",i}},,,function(t,e){"use strict";function n(t,e){return t.getContext("2d",e)||null}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},,function(t,e){"use strict";function n(t){return t.setTransform(1,0,0,1,0,0),t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?!1:arguments[1],n=arguments.length<=2||void 0===arguments[2]?0:arguments[2],i=arguments.length<=3||void 0===arguments[3]?0:arguments[3],r=arguments.length<=4||void 0===arguments[4]?0:arguments[4],o=arguments.length<=5||void 0===arguments[5]?1:arguments[5],a=t.canvas;if(e){var s=t.fillStyle;t.fillStyle="rgba("+n+","+i+","+r+","+o+")",t.fillRect(0,0,a.width,a.height),t.fillStyle=s}else t.clearRect(0,0,a.width,a.height);return t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(t,e){"use strict";function n(){for(var t=arguments.length,e=Array(t),n=0;t>n;n++)e[n]=arguments[n];var r={add:function(t){i[t.name]=t.hasOwnProperty("value")?t.value:t.properties},remove:function(t){delete i[t]},require:function(){for(var t=arguments.length,e=Array(t),n=0;t>n;n++)e[n]=arguments[n];var o=!0,a=!1,s=void 0;try{for(var u,l=e[Symbol.iterator]();!(o=(u=l.next()).done);o=!0){var f=u.value;i.hasOwnProperty(f.name)||r.add(f)}}catch(c){a=!0,s=c}finally{try{!o&&l["return"]&&l["return"]()}finally{if(a)throw s}}},get:function(t){return t&&i.hasOwnProperty(t)?i[t]:i}},o=!0,a=!1,s=void 0;try{for(var u,l=e[Symbol.iterator]();!(o=(u=l.next()).done);o=!0){var f=u.value;r.add(f)}}catch(c){a=!0,s=c}finally{try{!o&&l["return"]&&l["return"]()}finally{if(a)throw s}}return r}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var i={}},,function(t,e){"use strict";function n(){var t=arguments.length<=0||void 0===arguments[0]?800:arguments[0],e=arguments.length<=1||void 0===arguments[1]?600:arguments[1];return{name:"dimensions",properties:{width:t,height:e}}}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},,,,function(t,e){"use strict";function n(){var t=arguments.length<=0||void 0===arguments[0]?60:arguments[0];return{name:"frameRate",value:t}}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},,function(t,e){"use strict";function n(){var t=arguments.length<=0||void 0===arguments[0]?"":arguments[0];return{name:"parent",value:t}}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},,function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(t){return{name:"state",value:(0,a["default"])(t)}}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=r;var o=n(130),a=i(o)},,,,,,,,,,,,,,,,,,,,,,function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?null:arguments[1],n=arguments.length<=2||void 0===arguments[2]?!0:arguments[2],r=void 0;return e&&("string"==typeof e?r=document.getElementById(e):"object"===("undefined"==typeof e?"undefined":i(e))&&1===e.nodeType&&(r=e)),r||(r=document.body),n&&r.style&&(r.style.overflow="hidden"),r.appendChild(t),t}Object.defineProperty(e,"__esModule",{value:!0});var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol?"symbol":typeof t};e["default"]=n},function(t,e){"use strict";function n(){return i?void 0:new Promise(function(t,e){"complete"===document.readyState||"interactive"===document.readyState?(i=!0,t()):!function(){var e=function n(){document.removeEventListener("deviceready",n,!0),document.removeEventListener("DOMContentLoaded",n,!0),window.removeEventListener("load",n,!0),t()};document.body?(document.addEventListener("DOMContentLoaded",e,!0),window.addEventListener("load",e,!0)):window.setTimeout(e,20)}()})}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var i=!1},,,function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),a=n(157),s=i(a),u=function(){function t(e){var n=arguments.length<=1||void 0===arguments[1]?!1:arguments[1];r(this,t),this.root=e,this.forceSetTimeOut=n,n||(this.forceSetTimeOut=!this.normalizeRaf()),this._running=!1,this._timeOutID=null,this._callback=s["default"]}return o(t,[{key:"start",value:function(t){var e=this;this._running||(this._running=!0,this._callback=t,this.usingSetTimeout?this._timeOutID=this.root.setTimeout(function(t){return e.updateSetTimeout(Date.now())},0):this._timeOutID=this.root.requestAnimationFrame(function(t){return e.updateRAF(t)}))}},{key:"updateRAF",value:function(t){var e=this;this._callback(t),this._timeOutID=this.root.requestAnimationFrame(function(t){return e.updateRAF(t)})}},{key:"updateSetTimeout",value:function(t){var e=this;this._timeOutID=this.root.setTimeout(function(t){return e.updateSetTimeout(Date.now())},0)}},{key:"stop",value:function(){this._running&&(this.usingSetTimeout?this.root.clearTimeout(this._timeOutID):this.root.cancelAnimationFrame(this._timeOutID),this._running=!1)}},{key:"normalizeRaf",value:function(){if(this.root.requestAnimationFrame)return!0;for(var t=["ms","moz","webkit","o"],e=0;e<t.length;e++){var n=t[e];return this.root.requestAnimationFrame=this.root[n]+"RequestAnimationFrame",this.root.cancelAnimationFrame=this.root[n]+"CancelAnimationFrame",!0}return!1}},{key:"usingSetTimeout",get:function(){return this.forceSetTimeOut}},{key:"usingRAF",get:function(){return!this.forceSetTimeOut}},{key:"isRunning",get:function(){return this._running},set:function(t){t?this.start():this.stop()}}]),t}();e["default"]=u},function(t,e){"use strict";function n(){}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},,,,,,,,,,,,function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(e,"__esModule",{value:!0}),e.Sprite=e.Game=void 0;var r=n(170),o=i(r),a=n(190),s=i(a);e.Game=o["default"],e.Sprite=s["default"]},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),a=n(120),s=i(a),u=n(122),l=i(u),f=n(128),c=i(f),h=n(126),d=i(h),v=n(130),p=i(v),y=n(153),g=i(y),m=n(171),b=i(m),_=n(173),O=i(_),w=n(9),P=i(w),k=n(12),j=i(k),M=n(152),T=i(M),E=n(58),D=i(E),S=n(174),x=i(S),L=n(14),F=i(L),C=function(){function t(){var e=this,n=arguments.length<=0||void 0===arguments[0]?(0,s["default"])():arguments[0];r(this,t),this.config=n,this.config.require((0,l["default"])(),(0,c["default"])(),(0,d["default"])(),(0,p["default"])()),this.canvas=null,this.context=null,this.load=null,(0,g["default"])().then(function(){return e.init()})}return o(t,[{key:"init",value:function(){var t=this;(0,b["default"])(this.config.get("gameTitle").name,this.config.get("gameTitle").url);var e=this.config.get("dimensions");this.canvas=(0,P["default"])(e.width,e.height),this.context=(0,j["default"])(this.canvas),(0,T["default"])(this.canvas,this.config.get("parent")),this.state=this.config.get("state"),this.load=new x["default"],this.state.canvas=this.canvas,this.state.context=this.context,this.state.load=this.load,this.state.init(),this.state.preload(),this.load.start().then(function(e){return t.start(e)})}},{key:"start",value:function(t){var e=this;this.state.create(),this.loop=new O["default"](this.config.get("frameRate")),this.loop.begin=function(t){return e.begin(t)},this.loop.update=function(t){return e.update(t)},this.loop.draw=function(t){return e.render(t)},this.loop.start()}},{key:"begin",value:function(){(0,F["default"])(this.context),(0,D["default"])(this.context,!1)}},{key:"update",value:function(t){this.state.update(t)}},{key:"render",value:function(t){this.state.preRender(),this.state.render(t),this.state.postRender()}}]),t}();e["default"]=C},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(t,e){var n="%c %c %c %c %c  ";t&&(n=n.concat(t+" powered by ")),n=n.concat("Lazer v"+a["default"].major+"."+a["default"].minor),void 0===e?n=n.concat(" - https://lazerjs.io"):""!==e&&(n=n.concat(" - "+e)),n=n.concat("  "),console.log.apply(console,[n,"background: #ff0000","background: #ffff00","background: #00ff00","background: #00ffff","color: #ffffff; background: #000;"])}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=r;var o=n(172),a=i(o)},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n={major:1,minor:2,point:3,build:1,date:"12th January 2016"};e["default"]=n},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),a=n(156),s=i(a),u=n(157),l=i(u),f=function(){function t(){var e=arguments.length<=0||void 0===arguments[0]?60:arguments[0];r(this,t),this.getTime=Date.now,window.performance&&(window.performance.now?this.getTime=function(){return window.performance.now()}:window.performance.webkitNow&&(this.getTime=function(){return window.performance.webkitNow()})),this.timestep=1e3/e,this.physicsStep=1/e,this.frameDelta=0,this.lastFrameTimeMs=0,this.fps=60,this.lastFpsUpdate=0,this.framesThisSecond=0,this.numUpdateSteps=0,this.minFrameDelay=0,this.running=!1,this.started=!1,this.panic=!1,this.begin=l["default"],this.update=l["default"],this.draw=l["default"],this.end=l["default"],this.raf=new s["default"](window,!1)}return o(t,[{key:"resetFrameDelta",value:function(){var t=this.frameDelta;return this.frameDelta=0,t}},{key:"start",value:function(){var t=this;return this.started?this:(this.started=!0,this.running=!0,this.lastFrameTimeMs=this.getTime(),this.lastFpsUpdate=this.getTime(),this.framesThisSecond=0,void this.raf.start(function(e){return t.step(e)}))}},{key:"step",value:function(t){if(!(t<this.lastFrameTimeMs+this.minFrameDelay)){for(this.frameDelta+=t-this.lastFrameTimeMs,this.lastFrameTimeMs=t,this.begin(t,this.frameDelta),t>this.lastFpsUpdate+1e3&&(this.fps=.25*this.framesThisSecond+.75*this.fps,this.lastFpsUpdate=t,this.framesThisSecond=0),this.framesThisSecond++,this.numUpdateSteps=0;this.frameDelta>=this.timestep;)if(this.update(this.timestep),this.frameDelta-=this.timestep,++this.numUpdateSteps>=240){this.panic=!0;break}this.draw(this.frameDelta/this.timestep),this.end(this.fps,this.panic),this.panic=!1}}},{key:"stop",value:function(){return this.running=!1,this.started=!1,this.raf.stop(),this}},{key:"maxFPS",get:function(){return 1e3/this.minFrameDelay},set:function(){var t=arguments.length<=0||void 0===arguments[0]?1/0:arguments[0];0===t?this.stop():this.minFrameDelay=1e3/t}},{key:"isRunning",get:function(){return this.running}}]),t}();e["default"]=f},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function a(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0});var s=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),u=n(175),l=i(u),f=n(180),c=i(f),h=n(181),d=i(h),v=n(182),p=i(v),y=n(184),g=i(y),m=n(185),b=i(m),_=n(186),O=i(_),w=n(187),P=i(w),k=n(189),j=i(k),M=function(t){function e(){return r(this,e),o(this,Object.getPrototypeOf(e).call(this))}return a(e,t),s(e,[{key:"image",value:function(t){var e=arguments.length<=1||void 0===arguments[1]?"":arguments[1];return this.addFile((0,c["default"])(t,e))}},{key:"images",value:function(t){var e=arguments.length<=1||void 0===arguments[1]?null:arguments[1];if(Array.isArray(e))for(var n=0;n<t.length;n++)this.image(t[n],e[n]);else for(var i=0;i<t.length;i++)this.image(t[i]);return this}},{key:"json",value:function(t){var e=arguments.length<=1||void 0===arguments[1]?"":arguments[1];return this.addFile((0,d["default"])(t,e))}},{key:"text",value:function(t){var e=arguments.length<=1||void 0===arguments[1]?"":arguments[1];return this.addFile((0,g["default"])(t,e))}},{key:"glsl",value:function(t){var e=arguments.length<=1||void 0===arguments[1]?"":arguments[1];return this.addFile((0,b["default"])(t,e))}},{key:"shader",value:function(t){var e=arguments.length<=1||void 0===arguments[1]?"":arguments[1];return this.addFile((0,b["default"])(t,e))}},{key:"xml",value:function(t){var e=arguments.length<=1||void 0===arguments[1]?"":arguments[1];return this.addFile((0,p["default"])(t,e))}},{key:"binary",value:function(t){var e=arguments.length<=1||void 0===arguments[1]?"":arguments[1],n=arguments.length<=2||void 0===arguments[2]?void 0:arguments[2],i=(0,O["default"])(t,e);return i.processCallback=n,this.addFile(i)}},{key:"atlas",value:function(t){var e=arguments.length<=1||void 0===arguments[1]?"":arguments[1],n=arguments.length<=2||void 0===arguments[2]?"":arguments[2],i=arguments.length<=3||void 0===arguments[3]?void 0:arguments[3];return this.addFile((0,P["default"])(t,e,n,i))}},{key:"atlasXML",value:function(t){var e=arguments.length<=1||void 0===arguments[1]?"":arguments[1],n=arguments.length<=2||void 0===arguments[2]?"":arguments[2],i=arguments.length<=3||void 0===arguments[3]?void 0:arguments[3];return this.addFile((0,j["default"])(t,e,n,i))}}]),e}(l["default"]);e["default"]=M},function(t,e,n){"use strict";function i(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function r(t){return t&&t.__esModule?t:{"default":t}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0}),e.DESTROYED=e.FAILED=e.COMPLETE=e.PROCESSING=e.LOADING=e.PENDING=void 0;var a=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),s=n(176),u=r(s),l=n(177),f=i(l),c=e.PENDING=0,h=e.LOADING=1,d=e.PROCESSING=2,v=e.COMPLETE=3,p=e.FAILED=4,y=e.DESTROYED=5,g=function(){function t(){o(this,t),this.baseURL="",this.path="",this.tag="",this.enableParallel=!0,this.maxParallelDownloads=4,this.xhr=(0,u["default"])(),this.crossOrigin=void 0,this.list=new Set,this.inflight=new Set,this.failed=new Set,this.queue=new Set,this.storage=new Set,this._state=c,this._resolve=void 0,this._reject=void 0}return a(t,[{key:"startFileGroup",value:function(t){this.tag=t}},{key:"stopFileGroup",value:function(){this.tag=""}},{key:"addFile",value:function(t){return this.isReady?(t.multipart?(t.fileA.path=this.path,t.fileB.path=this.path,t.fileA.tag=this.tag,t.fileB.tag=this.tag,this.list.add(t.fileA),this.list.add(t.fileB)):(t.path=this.path,t.tag=this.tag,this.list.add(t)),new Promise(function(e,n){t.resolve=e,t.reject=n})):-1}},{key:"start",value:function(){var t=this;if(this.isReady)return 0===this.list.size?this.finishedLoading():(this.state=h,this.failed.clear(),this.inflight.clear(),this.queue.clear(),this.updateProgress(),this.processLoadQueue()),new Promise(function(e,n){t._resolve=e,t._reject=n})}},{key:"updateProgress",value:function(){}},{key:"processLoadQueue",value:function(){var t=!0,e=!1,n=void 0;try{for(var i,r=this.list[Symbol.iterator]();!(t=(i=r.next()).done);t=!0){var o=i.value;if(o.state===f.PENDING&&this.inflight.size<this.maxParallelDownloads&&(this.inflight.add(o),this.list["delete"](o),this.loadFile(o)),this.inflight.size===this.maxParallelDownloads)break}}catch(a){e=!0,n=a}finally{try{!t&&r["return"]&&r["return"]()}finally{if(e)throw n}}}},{key:"loadFile",value:function(t){var e=this;t.src=this.getURL(t),void 0===t.crossOrigin&&this.crossOrigin&&(t.crossOrigin=this.crossOrigin),t.load(this.xhr).then(function(t){return e.nextFile(t,!0)})["catch"](function(t){return e.nextFile(t,!1)})}},{key:"nextFile",value:function(t,e){e?this.queue.add(t):this.failed.add(t),this.inflight["delete"](t),this.list.size>0?this.processLoadQueue():0===this.inflight.size&&this.finishedLoading()}},{key:"getURL",value:function(t){return t.url?t.url.match(/^(?:blob:|data:|http:\/\/|https:\/\/|\/\/)/)?t.url:this.baseURL+t.path+t.url:!1}},{key:"finishedLoading",value:function(){this.state=d,this.storage.clear();var t=!0,e=!1,n=void 0;try{for(var i,r=this.queue[Symbol.iterator]();!(t=(i=r.next()).done);t=!0){var o=i.value;o.onProcess(),o.processCallback&&o.processCallback(o),o.onComplete(),this.storage.add(o)}}catch(a){e=!0,n=a}finally{try{!t&&r["return"]&&r["return"]()}finally{if(e)throw n}}this.list.clear(),this.inflight.clear(),this.queue.clear(),console.log("Loader Complete. Loaded:",this.storage.size,"Failed:",this.failed.size),this.state=v}},{key:"getLoadedFilesByType",value:function(t){var e=arguments.length<=1||void 0===arguments[1]?"":arguments[1],n=arguments.length<=2||void 0===arguments[2]?[]:arguments[2],i=!0,r=!1,o=void 0;try{for(var a,s=this.storage[Symbol.iterator]();!(i=(a=s.next()).done);i=!0){var u=a.value;u.state===f.COMPLETE&&u.tag===e&&u.type===t&&n.push(u)}}catch(l){r=!0,o=l}finally{try{!i&&s["return"]&&s["return"]()}finally{if(r)throw o}}return n}},{key:"getLoadedFiles",value:function(){var t=arguments.length<=0||void 0===arguments[0]?"":arguments[0],e=arguments.length<=1||void 0===arguments[1]?[]:arguments[1],n=!0,i=!1,r=void 0;try{for(var o,a=this.storage[Symbol.iterator]();!(n=(o=a.next()).done);n=!0){var s=o.value;s.state===f.COMPLETE&&s.tag===t&&""!==type&&s.type===type&&e.push(s)}}catch(u){i=!0,r=u}finally{try{!n&&a["return"]&&a["return"]()}finally{if(i)throw r}}return e}},{key:"reset",value:function(){this.list.clear(),this.inflight.clear(),this.failed.clear(),this.queue.clear(),this.storage.clear(),this.tag="",this.path="",this.baseURL="",this.state=c}},{key:"destroy",value:function(){this.reset(),this.state=y}},{key:"state",get:function(){return this._state},set:function(t){this._state!==t&&(this._state=t,t===v&&this._resolve?this._resolve(this.getLoadedFiles(),this):t===p&&this._reject&&this._reject(this))}},{key:"isLoading",get:function(){return this._state===h||this._state===d}},{key:"isReady",get:function(){return this._state===c||this._state===v||this._state===p}}]),t}();e["default"]=g},function(t,e){"use strict";function n(){var t=arguments.length<=0||void 0===arguments[0]?"":arguments[0],e=arguments.length<=1||void 0===arguments[1]?!0:arguments[1],n=arguments.length<=2||void 0===arguments[2]?"":arguments[2],i=arguments.length<=3||void 0===arguments[3]?"":arguments[3],r=arguments.length<=4||void 0===arguments[4]?0:arguments[4];return{responseType:t,async:e,user:n,password:i,timeout:r,header:void 0,headerValue:void 0,overrideMimeType:void 0}}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(t,e,n){return t?{key:t,url:e,path:"",src:e,tag:"",type:n,state:l,multipart:void 0,linkFile:void 0,data:void 0,crossOrigin:void 0,resolve:void 0,reject:void 0,processCallback:void 0,xhr:(0,u["default"])("text"),onStateChange:function(t){this.state!==t&&(this.state=t,t===v?(this.multipart&&this.linkFile.state===v&&this.multipart.resolve&&this.multipart.resolve(this.multipart),this.resolve&&this.resolve(this)):t===h&&(this.multipart&&this.multipart.reject&&this.multipart.reject(this.multipart,error),this.reject&&this.reject(this)))},load:function(t){return this.onStateChange(f),(0,a["default"])(this,t)},onLoad:function(){this.onStateChange(c)},onError:function(){this.onStateChange(h)},onProcess:function(){this.onStateChange(d)},onComplete:function(){this.onStateChange(v)},onDestroy:function(){this.onStateChange(p)}}:void console.warn("Invalid File key")}Object.defineProperty(e,"__esModule",{value:!0}),e.DESTROYED=e.COMPLETE=e.PROCESSING=e.FAILED=e.LOADED=e.LOADING=e.PENDING=void 0,e["default"]=r;var o=n(178),a=i(o),s=n(176),u=i(s),l=e.PENDING=0,f=e.LOADING=1,c=e.LOADED=2,h=e.FAILED=3,d=e.PROCESSING=4,v=e.COMPLETE=5,p=e.DESTROYED=6},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(t,e){var n=(0,a["default"])(e,t.xhr),i=new XMLHttpRequest;return i.open("GET",t.src,n.async,n.user,n.password),i.responseType=t.xhr.responseType,i.timeout=n.timeout,n.header&&n.headerValue&&i.setRequestHeader(n.header,n.headerValue),n.overrideMimeType&&i.overrideMimeType(n.overrideMimeType),new Promise(function(e,n){i.onload=function(){t.onLoad(i),e(t)},i.onerror=function(){t.onError(i),n(t)},i.send()})}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=r;var o=n(179),a=i(o)},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(t,e){var n=void 0===t?(0,a["default"])():Object.assign(t);if(e)for(var i in e)void 0!==e[i]&&(n[i]=e[i]);return n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=r;var o=n(176),a=i(o)},function(t,e,n){"use strict";function i(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function r(t){var e=arguments.length<=1||void 0===arguments[1]?"":arguments[1],n=arguments.length<=2||void 0===arguments[2]?void 0:arguments[2];""!==e||n||(e=t+".png");var i=(0,a["default"])(t,e,s);return i.load=function(){var e=this;return this.onStateChange(a.LOADING),this.data=new Image,this.crossOrigin&&(this.data.crossOrigin=this.crossOrigin),new Promise(function(n,r){e.data.onload=function(){e.data.onload&&(e.data.onload=null,e.data.onerror=null,e.state=a.LOADED,n(i))},e.data.onerror=function(t){e.data.onload&&(e.data.onload=null,e.data.onerror=null,e.error=t,e.state=a.FAILED,r(i))},e.data.name=t,e.data.src=e.src,e.data.complete&&e.data.width&&e.data.height&&(e.data.onload=null,e.data.onerror=null,e.state=a.LOADED,n(i))})},i}Object.defineProperty(e,"__esModule",{value:!0}),e.TYPE=void 0,e["default"]=r;var o=n(177),a=i(o),s=e.TYPE="image"},function(t,e,n){"use strict";function i(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function r(t){var e=arguments.length<=1||void 0===arguments[1]?"":arguments[1],n=arguments.length<=2||void 0===arguments[2]?void 0:arguments[2];""!==e||n||(e=t+".json");var i=(0,a["default"])(t,e,s);return i.xhr.responseType="text",i.onLoad=function(t){this.data=t.responseText,this.onStateChange(a.LOADED)},i.onProcess=function(){this.onStateChange(a.PROCESSING),this.data=JSON.parse(this.data)},n&&(i.data=n,i.onProcess()),i}Object.defineProperty(e,"__esModule",{value:!0}),e.TYPE=void 0,e["default"]=r;var o=n(177),a=i(o),s=e.TYPE="json"},function(t,e,n){"use strict";function i(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function r(t){return t&&t.__esModule?t:{"default":t}}function o(t){var e=arguments.length<=1||void 0===arguments[1]?"":arguments[1],n=arguments.length<=2||void 0===arguments[2]?void 0:arguments[2];""!==e||n||(e=t+".xml");var i=(0,l["default"])(t,e,f);return i.xhr.responseType="text",i.onLoad=function(t){this.data=t.responseText,this.onStateChange(l.LOADED)},i.onProcess=function(){this.onStateChange(l.PROCESSING);var t=(0,s["default"])(this.data);if(!t)throw new Error("XMLFile: Invalid XML");this.data=t},n&&(i.data=n,i.onProcess()),i}Object.defineProperty(e,"__esModule",{value:!0}),e.TYPE=void 0,e["default"]=o;var a=n(183),s=r(a),u=n(177),l=i(u),f=e.TYPE="xml"},function(t,e){"use strict";function n(t){var e="";try{if(window.DOMParser){var n=new DOMParser;e=n.parseFromString(t,"text/xml")}else e=new ActiveXObject("Microsoft.XMLDOM"),e.loadXML(t)}catch(i){e=null}return e&&e.documentElement&&!e.getElementsByTagName("parsererror").length?e:null}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e,n){"use strict";function i(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function r(t){var e=arguments.length<=1||void 0===arguments[1]?"":arguments[1],n=arguments.length<=2||void 0===arguments[2]?void 0:arguments[2];""!==e||n||(e=t+".txt");var i=(0,a["default"])(t,e,s);return i.xhr.responseType="text",i.onLoad=function(t){this.data=t.responseText,this.onStateChange(a.LOADED)},n&&(i.data=n,i.onProcess()),i}Object.defineProperty(e,"__esModule",{value:!0}),e.TYPE=void 0,e["default"]=r;var o=n(177),a=i(o),s=e.TYPE="text"},function(t,e,n){"use strict";function i(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function r(t){var e=arguments.length<=1||void 0===arguments[1]?"":arguments[1],n=arguments.length<=2||void 0===arguments[2]?void 0:arguments[2];""!==e||n||(e=t+".glsl");var i=(0,a["default"])(t,e,s);return i.xhr.responseType="text",i.onLoad=function(t){this.data=t.responseText,this.onStateChange(a.LOADED)},n&&(i.data=n,i.onProcess()),i}Object.defineProperty(e,"__esModule",{value:!0}),e.TYPE=void 0,e["default"]=r;var o=n(177),a=i(o),s=e.TYPE="glsl"},function(t,e,n){"use strict";function i(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function r(t){var e=arguments.length<=1||void 0===arguments[1]?"":arguments[1],n=arguments.length<=2||void 0===arguments[2]?void 0:arguments[2];""!==e||n||(e=t+".bin");var i=(0,a["default"])(t,e,s);return i.xhr.responseType="arraybuffer",i.onLoad=function(t){this.data=t.response,this.onStateChange(a.LOADED)},n&&(i.data=n,i.onProcess()),i}Object.defineProperty(e,"__esModule",{value:!0}),e.TYPE=void 0,e["default"]=r;var o=n(177),a=i(o),s=e.TYPE="binary"},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(t,e,n,i){return""===n&&null===i&&(n=t+".json"),(0,f["default"])((0,a["default"])(t,e),(0,u["default"])(t,n,i))}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=r;var o=n(180),a=i(o),s=n(181),u=i(s),l=n(188),f=i(l)},function(t,e){"use strict";function n(t,e){t.linkFile=e,e.linkFile=t;var n={multipart:!0,fileA:t,fileB:e,resolve:void 0,reject:void 0,load:function(){var t=this;return new Promise(function(e,n){t.resolve=e,t.reject=n,t.fileA.load().then(function(t){t.onProcess(),t.processCallback&&t.processCallback(t),t.onComplete()})["catch"](function(t){t.onError()}),t.fileB.load().then(function(t){t.onProcess(),t.processCallback&&t.processCallback(t),t.onComplete()})["catch"](function(t){t.onError()})})}};return t.multipart=n,e.multipart=n,n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(t,e,n,i){return""===n&&null===i&&(n=t+".xml"),(0,l["default"])((0,a["default"])(t,e),XMLFile(t,n,i))}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=r;var o=n(180),a=i(o),s=n(181),u=(i(s),n(188)),l=i(u)},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function a(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0});var s=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),u=n(191),l=i(u),f=n(200),c=i(f),h=function(t){function e(t,n,i){r(this,e);var a=o(this,Object.getPrototypeOf(e).call(this,n,i));return a.texture={image:t,width:t.width,height:t.height},a}return a(e,t),s(e,[{key:"render",value:function(t,e){(0,c["default"])(this.transform,t,e);var n=this.rotationAnchor.x*-this.texture.width,i=this.rotationAnchor.y*-this.texture.height;t.drawImage(this.texture.image,n,i)}}]),e}(l["default"]);e["default"]=h},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),a=n(192),s=i(a),u=function(){function t(){var e=arguments.length<=0||void 0===arguments[0]?0:arguments[0],n=arguments.length<=1||void 0===arguments[1]?0:arguments[1],i=arguments.length<=2||void 0===arguments[2]?0:arguments[2],o=arguments.length<=3||void 0===arguments[3]?1:arguments[3],a=arguments.length<=4||void 0===arguments[4]?1:arguments[4];r(this,t),this.transform=new s["default"](e,n,i,o,a),this.position=this.transform.position,this.scale=this.transform.scale,this.rotationAnchor=this.transform.rotationAnchor;
}return o(t,[{key:"x",get:function(){return this.position.getX()},set:function(t){return this.position.setX(t)}},{key:"y",get:function(){return this.position.getY()},set:function(t){return this.position.setY(t)}},{key:"rotation",get:function(){return this.transform.rotation.getValue()},set:function(t){return this.transform.rotation.setValue(t)}}]),t}();e["default"]=u},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),a=n(193),s=i(a),u=n(194),l=i(u),f=n(196),c=i(f),h=n(197),d=i(h),v=n(199),p=i(v),y=function(){function t(){var e=arguments.length<=0||void 0===arguments[0]?0:arguments[0],n=arguments.length<=1||void 0===arguments[1]?0:arguments[1],i=arguments.length<=2||void 0===arguments[2]?0:arguments[2],o=arguments.length<=3||void 0===arguments[3]?1:arguments[3],a=arguments.length<=4||void 0===arguments[4]?1:arguments[4];r(this,t),this.position=new c["default"](this,e,n),this.scale=new l["default"](this,o,a),this.rotation=new d["default"](this,i),this.rotationAnchor=new p["default"](this,0,0),this.local=(0,s["default"])(o,0,0,a,e,n),this.interpolate=!1,this.immediate=!1,this.dirty=!0}return o(t,[{key:"addProperties",value:function(t){return this.position.addProperties(t),this.rotation.addProperties(t),t.position=this.position,t.scale=this.scale,t.rotationAnchor=this.rotationAnchor,t}},{key:"enableImmediateUpdates",value:function(){return this.immediate=!0,this}},{key:"disableImmediateUpdates",value:function(){return this.immediate=!1,this.dirty=!0,this}},{key:"enableInterpolation",value:function(){return this.interpolate=!0,this.position.reset(this.position.x,this.position.y),this.scale.reset(this.scale.x,this.scale.y),this}},{key:"disableInterpolation",value:function(){return this.interpolate=!1,this}},{key:"setDirty",value:function(){return this.immediate?this.updateTransform():this.dirty=!0,this}},{key:"updateTransform",value:function(){var t=arguments.length<=0||void 0===arguments[0]?1:arguments[0];return this.rotation.isFast?(this.local[0]=this.scale[0],this.local[1]=0,this.local[2]=0,this.local[3]=this.scale[1]):(this.local[0]=this.rotation.cr*this.scale[0],this.local[1]=this.rotation.sr*this.scale[0],this.local[2]=-this.rotation.sr*this.scale[1],this.local[3]=this.rotation.cr*this.scale[1]),this.interpolate?(this.local[4]=this.position.getDeltaX(t),this.local[5]=this.position.getDeltaY(t)):(this.local[4]=this.position[0],this.local[5]=this.position[1]),this.dirty=!1,this}},{key:"destroy",value:function(){this.position.destroy(),this.scale.destroy(),this.rotation.destroy(),this.rotationAnchor.destroy(),this.local=void 0}}]),t}();e["default"]=y},function(t,e){"use strict";function n(){var t=arguments.length<=0||void 0===arguments[0]?1:arguments[0],e=arguments.length<=1||void 0===arguments[1]?0:arguments[1],n=arguments.length<=2||void 0===arguments[2]?0:arguments[2],r=arguments.length<=3||void 0===arguments[3]?1:arguments[3],o=arguments.length<=4||void 0===arguments[4]?0:arguments[4],a=arguments.length<=5||void 0===arguments[5]?0:arguments[5],s=arguments.length<=6||void 0===arguments[6]?new i(6):arguments[6];return s[0]=t,s[1]=e,s[2]=n,s[3]=r,s[4]=o,s[5]=a,s}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var i=Float32Array},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function a(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0});var s=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),u=n(195),l=i(u),f=function(t){function e(t){var n=arguments.length<=1||void 0===arguments[1]?0:arguments[1],i=arguments.length<=2||void 0===arguments[2]?0:arguments[2];return r(this,e),o(this,Object.getPrototypeOf(e).call(this,t,n,i))}return a(e,t),s(e,[{key:"addProperties",value:function(t){var e=this;t.hasOwnProperty("scale")||(t.scale={}),Object.defineProperties(t.scale,{x:{enumerable:!0,get:function(){return e.getX()},set:function(t){return e.setX(t)}},y:{enumerable:!0,get:function(){return e.getY()},set:function(t){return e.setY(t)}}})}}]),e}(l["default"]);e["default"]=f},function(t,e){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),r=function(){function t(e){var i=arguments.length<=1||void 0===arguments[1]?0:arguments[1],r=arguments.length<=2||void 0===arguments[2]?0:arguments[2];n(this,t),this.transform=e,this[0]=i,this[1]=r,this[2]=i,this[3]=r}return i(t,[{key:"getX",value:function(){return this[0]}},{key:"getY",value:function(){return this[1]}},{key:"getDeltaX",value:function(){var t=arguments.length<=0||void 0===arguments[0]?0:arguments[0];return this[2]+(this[0]-this[2])*t}},{key:"getDeltaY",value:function(){var t=arguments.length<=0||void 0===arguments[0]?0:arguments[0];return this[3]+(this[1]-this[3])*t}},{key:"setX",value:function(t){this[0]!==t&&(this[2]=this[0],this[0]=t,this.transform.setDirty())}},{key:"setY",value:function(t){this[1]!==t&&(this[3]=this[1],this[1]=t,this.transform.setDirty())}},{key:"set",value:function(t){var e=arguments.length<=1||void 0===arguments[1]?t:arguments[1];this[2]=this[0],this[3]=this[1],this[0]=t,this[1]=e,this.transform.setDirty()}},{key:"resetX",value:function(t){this[0]=t,this[2]=t,this.transform.setDirty()}},{key:"resetY",value:function(t){this[1]=t,this[3]=t,this.transform.setDirty()}},{key:"reset",value:function(t){var e=arguments.length<=1||void 0===arguments[1]?t:arguments[1];this[0]=t,this[1]=e,this[2]=t,this[3]=e,this.transform.setDirty()}},{key:"setTransform",value:function(t){this.transform=t}},{key:"destroy",value:function(){this.transform=void 0}},{key:"x",get:function(){return this[0]},set:function(t){this.setX(t)}},{key:"y",get:function(){return this[1]},set:function(t){this.setY(t)}}]),t}();e["default"]=r},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function a(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0});var s=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),u=n(195),l=i(u),f=function(t){function e(t){var n=arguments.length<=1||void 0===arguments[1]?0:arguments[1],i=arguments.length<=2||void 0===arguments[2]?0:arguments[2];return r(this,e),o(this,Object.getPrototypeOf(e).call(this,t,n,i))}return a(e,t),s(e,[{key:"addProperties",value:function(t){var e=this;Object.defineProperties(t,{x:{enumerable:!0,get:function(){return e.getX()},set:function(t){return e.setX(t)}},y:{enumerable:!0,get:function(){return e.getY()},set:function(t){return e.setY(t)}}})}}]),e}(l["default"]);e["default"]=f},function(t,e,n){"use strict";function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),o=n(198),a=function(){function t(e){var n=arguments.length<=1||void 0===arguments[1]?0:arguments[1];i(this,t),this.transform=e,this[0]=n,this[1]=n%o.PI2,this.sr=0,this.cr=0}return r(t,[{key:"getValue",value:function(){return this[0]}},{key:"setValue",value:function(t){this[0]!==t&&(this[0]=t,this[1]=t%o.PI2,this[1]&&(this.sr=Math.sin(t),this.cr=Math.cos(t)),this.transform.setDirty())}},{key:"setTransform",value:function(t){this.transform=t}},{key:"addProperties",value:function(t){var e=this;Object.defineProperties(t,{rotation:{enumerable:!0,get:function(){return e.getValue()},set:function(t){return e.setValue(t)}}})}},{key:"destroy",value:function(){this.transform=void 0}},{key:"isFast",get:function(){return 0===this[1]}}]),t}();e["default"]=a},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.PI2=2*Math.PI,e.HALFPI=.5*Math.PI,e.EPSILON=1e-6},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function a(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0});var s=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),u=n(195),l=i(u),f=function(t){function e(t){var n=arguments.length<=1||void 0===arguments[1]?0:arguments[1],i=arguments.length<=2||void 0===arguments[2]?0:arguments[2];return r(this,e),o(this,Object.getPrototypeOf(e).call(this,t,n,i))}return a(e,t),s(e,[{key:"addProperties",value:function(t){var e=this;t.hasOwnProperty("rotationAnchor")||(t.rotationAnchor={}),Object.defineProperties(t.rotationAnchor,{x:{enumerable:!0,get:function(){return e.getX()},set:function(t){return e.setX(t)}},y:{enumerable:!0,get:function(){return e.getY()},set:function(t){return e.setY(t)}}})}}]),e}(l["default"]);e["default"]=f},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?1:arguments[2];t.dirty&&t.updateTransform(n),e.setTransform(t.local[0],t.local[1],t.local[2],t.local[3],t.local[4],t.local[5])}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n}])});
//# sourceMappingURL=data:application/json;base64,