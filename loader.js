!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("loader",[],t):"object"==typeof exports?exports.loader=t():(e.lazer=e.lazer||{},e.lazer.loader=t())}(this,function(){return function(e){function t(i){if(r[i])return r[i].exports;var n=r[i]={exports:{},id:i,loaded:!1};return e[i].call(n.exports,n,n.exports,t),n.loaded=!0,n.exports}var r={};return t.m=e,t.c=r,t.p="",t(0)}({0:function(e,t,r){"use strict";"create index";function i(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t["default"]=e,t}function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0}),t.types=t.XHRSettings=t.XHRLoader=t.MultiFile=t.MergeXHRSettings=t.Loader=t.File=t.BaseLoader=void 0;var a=r(175),o=n(a),l=r(177),s=n(l),u=r(174),d=n(u),f=r(179),c=n(f),h=r(188),v=n(h),p=r(178),y=n(p),g=r(176),_=n(g),O=r(408),P=i(O);t.BaseLoader=o["default"],t.File=s["default"],t.Loader=d["default"],t.MergeXHRSettings=c["default"],t.MultiFile=v["default"],t.XHRLoader=y["default"],t.XHRSettings=_["default"],t.types=P},174:function(e,t,r){"use strict";function i(e){return e&&e.__esModule?e:{"default":e}}function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var l=function(){function e(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,r,i){return r&&e(t.prototype,r),i&&e(t,i),t}}(),s=r(175),u=i(s),d=r(180),f=i(d),c=r(181),h=i(c),v=r(182),p=i(v),y=r(184),g=i(y),_=r(185),O=i(_),P=r(186),b=i(P),L=r(187),E=i(L),m=r(189),M=i(m),j=function(e){function t(){return n(this,t),a(this,Object.getPrototypeOf(t).call(this))}return o(t,e),l(t,[{key:"image",value:function(e){var t=arguments.length<=1||void 0===arguments[1]?"":arguments[1];return this.addFile((0,f["default"])(e,t))}},{key:"images",value:function(e){var t=arguments.length<=1||void 0===arguments[1]?null:arguments[1];if(Array.isArray(t))for(var r=0;r<e.length;r++)this.image(e[r],t[r]);else for(var i=0;i<e.length;i++)this.image(e[i]);return this}},{key:"json",value:function(e){var t=arguments.length<=1||void 0===arguments[1]?"":arguments[1];return this.addFile((0,h["default"])(e,t))}},{key:"text",value:function(e){var t=arguments.length<=1||void 0===arguments[1]?"":arguments[1];return this.addFile((0,g["default"])(e,t))}},{key:"glsl",value:function(e){var t=arguments.length<=1||void 0===arguments[1]?"":arguments[1];return this.addFile((0,O["default"])(e,t))}},{key:"shader",value:function(e){var t=arguments.length<=1||void 0===arguments[1]?"":arguments[1];return this.addFile((0,O["default"])(e,t))}},{key:"xml",value:function(e){var t=arguments.length<=1||void 0===arguments[1]?"":arguments[1];return this.addFile((0,p["default"])(e,t))}},{key:"binary",value:function(e){var t=arguments.length<=1||void 0===arguments[1]?"":arguments[1],r=arguments.length<=2||void 0===arguments[2]?void 0:arguments[2],i=(0,b["default"])(e,t);return i.processCallback=r,this.addFile(i)}},{key:"atlas",value:function(e){var t=arguments.length<=1||void 0===arguments[1]?"":arguments[1],r=arguments.length<=2||void 0===arguments[2]?"":arguments[2],i=arguments.length<=3||void 0===arguments[3]?void 0:arguments[3];return this.addFile((0,E["default"])(e,t,r,i))}},{key:"atlasXML",value:function(e){var t=arguments.length<=1||void 0===arguments[1]?"":arguments[1],r=arguments.length<=2||void 0===arguments[2]?"":arguments[2],i=arguments.length<=3||void 0===arguments[3]?void 0:arguments[3];return this.addFile((0,M["default"])(e,t,r,i))}}]),t}(u["default"]);t["default"]=j},175:function(e,t,r){"use strict";function i(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t["default"]=e,t}function n(e){return e&&e.__esModule?e:{"default":e}}function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0}),t.DESTROYED=t.FAILED=t.COMPLETE=t.PROCESSING=t.LOADING=t.PENDING=void 0;var o=function(){function e(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,r,i){return r&&e(t.prototype,r),i&&e(t,i),t}}(),l=r(176),s=n(l),u=r(177),d=i(u),f=t.PENDING=0,c=t.LOADING=1,h=t.PROCESSING=2,v=t.COMPLETE=3,p=t.FAILED=4,y=t.DESTROYED=5,g=function(){function e(){a(this,e),this.baseURL="",this.path="",this.tag="",this.enableParallel=!0,this.maxParallelDownloads=4,this.xhr=(0,s["default"])(),this.crossOrigin=void 0,this.list=new Set,this.inflight=new Set,this.failed=new Set,this.queue=new Set,this.storage=new Set,this._state=f,this._resolve=void 0,this._reject=void 0}return o(e,[{key:"startFileGroup",value:function(e){this.tag=e}},{key:"stopFileGroup",value:function(){this.tag=""}},{key:"addFile",value:function(e){return this.isReady?(e.multipart?(e.fileA.path=this.path,e.fileB.path=this.path,e.fileA.tag=this.tag,e.fileB.tag=this.tag,this.list.add(e.fileA),this.list.add(e.fileB)):(e.path=this.path,e.tag=this.tag,this.list.add(e)),new Promise(function(t,r){e.resolve=t,e.reject=r})):-1}},{key:"start",value:function(){var e=this;if(this.isReady)return 0===this.list.size?this.finishedLoading():(this.state=c,this.failed.clear(),this.inflight.clear(),this.queue.clear(),this.updateProgress(),this.processLoadQueue()),new Promise(function(t,r){e._resolve=t,e._reject=r})}},{key:"updateProgress",value:function(){}},{key:"processLoadQueue",value:function(){var e=!0,t=!1,r=void 0;try{for(var i,n=this.list[Symbol.iterator]();!(e=(i=n.next()).done);e=!0){var a=i.value;if(a.state===d.PENDING&&this.inflight.size<this.maxParallelDownloads&&(this.inflight.add(a),this.list["delete"](a),this.loadFile(a)),this.inflight.size===this.maxParallelDownloads)break}}catch(o){t=!0,r=o}finally{try{!e&&n["return"]&&n["return"]()}finally{if(t)throw r}}}},{key:"loadFile",value:function(e){var t=this;e.src=this.getURL(e),void 0===e.crossOrigin&&this.crossOrigin&&(e.crossOrigin=this.crossOrigin),e.load(this.xhr).then(function(e){return t.nextFile(e,!0)})["catch"](function(e){return t.nextFile(e,!1)})}},{key:"nextFile",value:function(e,t){t?this.queue.add(e):this.failed.add(e),this.inflight["delete"](e),this.list.size>0?this.processLoadQueue():0===this.inflight.size&&this.finishedLoading()}},{key:"getURL",value:function(e){return e.url?e.url.match(/^(?:blob:|data:|http:\/\/|https:\/\/|\/\/)/)?e.url:this.baseURL+e.path+e.url:!1}},{key:"finishedLoading",value:function(){this.state=h,this.storage.clear();var e=!0,t=!1,r=void 0;try{for(var i,n=this.queue[Symbol.iterator]();!(e=(i=n.next()).done);e=!0){var a=i.value;a.onProcess(),a.processCallback&&a.processCallback(a),a.onComplete(),this.storage.add(a)}}catch(o){t=!0,r=o}finally{try{!e&&n["return"]&&n["return"]()}finally{if(t)throw r}}this.list.clear(),this.inflight.clear(),this.queue.clear(),console.log("Loader Complete. Loaded:",this.storage.size,"Failed:",this.failed.size),this.state=v}},{key:"getLoadedFilesByType",value:function(e){var t=arguments.length<=1||void 0===arguments[1]?"":arguments[1],r=arguments.length<=2||void 0===arguments[2]?[]:arguments[2],i=!0,n=!1,a=void 0;try{for(var o,l=this.storage[Symbol.iterator]();!(i=(o=l.next()).done);i=!0){var s=o.value;s.state===d.COMPLETE&&s.tag===t&&s.type===e&&r.push(s)}}catch(u){n=!0,a=u}finally{try{!i&&l["return"]&&l["return"]()}finally{if(n)throw a}}return r}},{key:"getLoadedFiles",value:function(){var e=arguments.length<=0||void 0===arguments[0]?"":arguments[0],t=arguments.length<=1||void 0===arguments[1]?[]:arguments[1],r=!0,i=!1,n=void 0;try{for(var a,o=this.storage[Symbol.iterator]();!(r=(a=o.next()).done);r=!0){var l=a.value;l.state===d.COMPLETE&&l.tag===e&&""!==type&&l.type===type&&t.push(l)}}catch(s){i=!0,n=s}finally{try{!r&&o["return"]&&o["return"]()}finally{if(i)throw n}}return t}},{key:"reset",value:function(){this.list.clear(),this.inflight.clear(),this.failed.clear(),this.queue.clear(),this.storage.clear(),this.tag="",this.path="",this.baseURL="",this.state=f}},{key:"destroy",value:function(){this.reset(),this.state=y}},{key:"state",get:function(){return this._state},set:function(e){this._state!==e&&(this._state=e,e===v&&this._resolve?this._resolve(this.getLoadedFiles(),this):e===p&&this._reject&&this._reject(this))}},{key:"isLoading",get:function(){return this._state===c||this._state===h}},{key:"isReady",get:function(){return this._state===f||this._state===v||this._state===p}}]),e}();t["default"]=g},176:function(e,t){"use strict";function r(){var e=arguments.length<=0||void 0===arguments[0]?"":arguments[0],t=arguments.length<=1||void 0===arguments[1]?!0:arguments[1],r=arguments.length<=2||void 0===arguments[2]?"":arguments[2],i=arguments.length<=3||void 0===arguments[3]?"":arguments[3],n=arguments.length<=4||void 0===arguments[4]?0:arguments[4];return{responseType:e,async:t,user:r,password:i,timeout:n,header:void 0,headerValue:void 0,overrideMimeType:void 0}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r},177:function(e,t,r){"use strict";function i(e){return e&&e.__esModule?e:{"default":e}}function n(e,t,r){return e?{key:e,url:t,path:"",src:t,tag:"",type:r,state:u,multipart:void 0,linkFile:void 0,data:void 0,crossOrigin:void 0,resolve:void 0,reject:void 0,processCallback:void 0,xhr:(0,s["default"])("text"),onStateChange:function(e){this.state!==e&&(this.state=e,e===v?(this.multipart&&this.linkFile.state===v&&this.multipart.resolve&&this.multipart.resolve(this.multipart),this.resolve&&this.resolve(this)):e===c&&(this.multipart&&this.multipart.reject&&this.multipart.reject(this.multipart,error),this.reject&&this.reject(this)))},load:function(e){return this.onStateChange(d),(0,o["default"])(this,e)},onLoad:function(){this.onStateChange(f)},onError:function(){this.onStateChange(c)},onProcess:function(){this.onStateChange(h)},onComplete:function(){this.onStateChange(v)},onDestroy:function(){this.onStateChange(p)}}:void console.warn("Invalid File key")}Object.defineProperty(t,"__esModule",{value:!0}),t.DESTROYED=t.COMPLETE=t.PROCESSING=t.FAILED=t.LOADED=t.LOADING=t.PENDING=void 0,t["default"]=n;var a=r(178),o=i(a),l=r(176),s=i(l),u=t.PENDING=0,d=t.LOADING=1,f=t.LOADED=2,c=t.FAILED=3,h=t.PROCESSING=4,v=t.COMPLETE=5,p=t.DESTROYED=6},178:function(e,t,r){"use strict";function i(e){return e&&e.__esModule?e:{"default":e}}function n(e,t){var r=(0,o["default"])(t,e.xhr),i=new XMLHttpRequest;return i.open("GET",e.src,r.async,r.user,r.password),i.responseType=e.xhr.responseType,i.timeout=r.timeout,r.header&&r.headerValue&&i.setRequestHeader(r.header,r.headerValue),r.overrideMimeType&&i.overrideMimeType(r.overrideMimeType),new Promise(function(t,r){i.onload=function(){e.onLoad(i),t(e)},i.onerror=function(){e.onError(i),r(e)},i.send()})}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n;var a=r(179),o=i(a)},179:function(e,t,r){"use strict";function i(e){return e&&e.__esModule?e:{"default":e}}function n(e,t){var r=void 0===e?(0,o["default"])():Object.assign(e);if(t)for(var i in t)void 0!==t[i]&&(r[i]=t[i]);return r}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n;var a=r(176),o=i(a)},180:function(e,t,r){"use strict";function i(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t["default"]=e,t}function n(e){var t=arguments.length<=1||void 0===arguments[1]?"":arguments[1],r=arguments.length<=2||void 0===arguments[2]?void 0:arguments[2];""!==t||r||(t=e+".png");var i=(0,o["default"])(e,t,l);return i.load=function(){var t=this;return this.onStateChange(o.LOADING),this.data=new Image,this.crossOrigin&&(this.data.crossOrigin=this.crossOrigin),new Promise(function(r,n){t.data.onload=function(){t.data.onload&&(t.data.onload=null,t.data.onerror=null,t.state=o.LOADED,r(i))},t.data.onerror=function(e){t.data.onload&&(t.data.onload=null,t.data.onerror=null,t.error=e,t.state=o.FAILED,n(i))},t.data.name=e,t.data.src=t.src,t.data.complete&&t.data.width&&t.data.height&&(t.data.onload=null,t.data.onerror=null,t.state=o.LOADED,r(i))})},i}Object.defineProperty(t,"__esModule",{value:!0}),t.TYPE=void 0,t["default"]=n;var a=r(177),o=i(a),l=t.TYPE="image"},181:function(e,t,r){"use strict";function i(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t["default"]=e,t}function n(e){var t=arguments.length<=1||void 0===arguments[1]?"":arguments[1],r=arguments.length<=2||void 0===arguments[2]?void 0:arguments[2];""!==t||r||(t=e+".json");var i=(0,o["default"])(e,t,l);return i.xhr.responseType="text",i.onLoad=function(e){this.data=e.responseText,this.onStateChange(o.LOADED)},i.onProcess=function(){this.onStateChange(o.PROCESSING),this.data=JSON.parse(this.data)},r&&(i.data=r,i.onProcess()),i}Object.defineProperty(t,"__esModule",{value:!0}),t.TYPE=void 0,t["default"]=n;var a=r(177),o=i(a),l=t.TYPE="json"},182:function(e,t,r){"use strict";function i(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t["default"]=e,t}function n(e){return e&&e.__esModule?e:{"default":e}}function a(e){var t=arguments.length<=1||void 0===arguments[1]?"":arguments[1],r=arguments.length<=2||void 0===arguments[2]?void 0:arguments[2];""!==t||r||(t=e+".xml");var i=(0,u["default"])(e,t,d);return i.xhr.responseType="text",i.onLoad=function(e){this.data=e.responseText,this.onStateChange(u.LOADED)},i.onProcess=function(){this.onStateChange(u.PROCESSING);var e=(0,l["default"])(this.data);if(!e)throw new Error("XMLFile: Invalid XML");this.data=e},r&&(i.data=r,i.onProcess()),i}Object.defineProperty(t,"__esModule",{value:!0}),t.TYPE=void 0,t["default"]=a;var o=r(183),l=n(o),s=r(177),u=i(s),d=t.TYPE="xml"},183:function(e,t){"use strict";function r(e){var t="";try{if(window.DOMParser){var r=new DOMParser;t=r.parseFromString(e,"text/xml")}else t=new ActiveXObject("Microsoft.XMLDOM"),t.loadXML(e)}catch(i){t=null}return t&&t.documentElement&&!t.getElementsByTagName("parsererror").length?t:null}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r},184:function(e,t,r){"use strict";function i(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t["default"]=e,t}function n(e){var t=arguments.length<=1||void 0===arguments[1]?"":arguments[1],r=arguments.length<=2||void 0===arguments[2]?void 0:arguments[2];""!==t||r||(t=e+".txt");var i=(0,o["default"])(e,t,l);return i.xhr.responseType="text",i.onLoad=function(e){this.data=e.responseText,this.onStateChange(o.LOADED)},r&&(i.data=r,i.onProcess()),i}Object.defineProperty(t,"__esModule",{value:!0}),t.TYPE=void 0,t["default"]=n;var a=r(177),o=i(a),l=t.TYPE="text"},185:function(e,t,r){"use strict";function i(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t["default"]=e,t}function n(e){var t=arguments.length<=1||void 0===arguments[1]?"":arguments[1],r=arguments.length<=2||void 0===arguments[2]?void 0:arguments[2];""!==t||r||(t=e+".glsl");var i=(0,o["default"])(e,t,l);return i.xhr.responseType="text",i.onLoad=function(e){this.data=e.responseText,this.onStateChange(o.LOADED)},r&&(i.data=r,i.onProcess()),i}Object.defineProperty(t,"__esModule",{value:!0}),t.TYPE=void 0,t["default"]=n;var a=r(177),o=i(a),l=t.TYPE="glsl"},186:function(e,t,r){"use strict";function i(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t["default"]=e,t}function n(e){var t=arguments.length<=1||void 0===arguments[1]?"":arguments[1],r=arguments.length<=2||void 0===arguments[2]?void 0:arguments[2];""!==t||r||(t=e+".bin");var i=(0,o["default"])(e,t,l);return i.xhr.responseType="arraybuffer",i.onLoad=function(e){this.data=e.response,this.onStateChange(o.LOADED)},r&&(i.data=r,i.onProcess()),i}Object.defineProperty(t,"__esModule",{value:!0}),t.TYPE=void 0,t["default"]=n;var a=r(177),o=i(a),l=t.TYPE="binary"},187:function(e,t,r){"use strict";function i(e){return e&&e.__esModule?e:{"default":e}}function n(e,t,r,i){return""===r&&null===i&&(r=e+".json"),(0,d["default"])((0,o["default"])(e,t),(0,s["default"])(e,r,i))}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n;var a=r(180),o=i(a),l=r(181),s=i(l),u=r(188),d=i(u)},188:function(e,t){"use strict";function r(e,t){e.linkFile=t,t.linkFile=e;var r={multipart:!0,fileA:e,fileB:t,resolve:void 0,reject:void 0,load:function(){var e=this;return new Promise(function(t,r){e.resolve=t,e.reject=r,e.fileA.load().then(function(e){e.onProcess(),e.processCallback&&e.processCallback(e),e.onComplete()})["catch"](function(e){e.onError()}),e.fileB.load().then(function(e){e.onProcess(),e.processCallback&&e.processCallback(e),e.onComplete()})["catch"](function(e){e.onError()})})}};return e.multipart=r,t.multipart=r,r}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r},189:function(e,t,r){"use strict";function i(e){return e&&e.__esModule?e:{"default":e}}function n(e,t,r,i){return""===r&&null===i&&(r=e+".xml"),(0,u["default"])((0,o["default"])(e,t),XMLFile(e,r,i))}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n;var a=r(180),o=i(a),l=r(181),s=(i(l),r(188)),u=i(s)},408:function(e,t,r){"use strict";"create index";function i(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0}),t.XMLFile=t.TextFile=t.JSONFile=t.ImageFile=t.GLSLFile=t.BinaryFile=t.AtlasXMLFile=t.AtlasJSONFile=void 0;var n=r(187),a=i(n),o=r(189),l=i(o),s=r(186),u=i(s),d=r(185),f=i(d),c=r(180),h=i(c),v=r(181),p=i(v),y=r(184),g=i(y),_=r(182),O=i(_);t.AtlasJSONFile=a["default"],t.AtlasXMLFile=l["default"],t.BinaryFile=u["default"],t.GLSLFile=f["default"],t.ImageFile=h["default"],t.JSONFile=p["default"],t.TextFile=g["default"],t.XMLFile=O["default"]}})});
//# sourceMappingURL=data:application/json;base64,