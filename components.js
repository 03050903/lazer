!function(t,i){"object"==typeof exports&&"object"==typeof module?module.exports=i():"function"==typeof define&&define.amd?define("components",[],i):"object"==typeof exports?exports.components=i():(t.lazer=t.lazer||{},t.lazer.components=i())}(this,function(){return function(t){function i(n){if(e[n])return e[n].exports;var s=e[n]={exports:{},id:n,loaded:!1};return t[n].call(s.exports,s,s.exports,i),s.loaded=!0,s.exports}var e={};return i.m=t,i.c=e,i.p="",i(0)}({0:function(t,i,e){"use strict";"create index";function n(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(i,"__esModule",{value:!0}),i.Transform2D=i.Transform=i.Position=i.GameObjectFactory=void 0;var s=e(112),o=n(s),h=e(113),r=n(h),a=e(114),u=n(a),l=e(117),c=n(l);i.GameObjectFactory=o["default"],i.Position=r["default"],i.Transform=u["default"],i.Transform2D=c["default"]},100:function(t,i){"use strict";function e(t,i){if(!(t instanceof i))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(i,"__esModule",{value:!0});var n=function(){function t(t,i){for(var e=0;e<i.length;e++){var n=i[e];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(i,e,n){return e&&t(i.prototype,e),n&&t(i,n),i}}(),s=function(){function t(){var i=arguments.length<=0||void 0===arguments[0]?0:arguments[0],n=arguments.length<=1||void 0===arguments[1]?0:arguments[1];e(this,t),this[0]=i,this[1]=n}return n(t,[{key:"set",value:function(t){var i=arguments.length<=1||void 0===arguments[1]?t:arguments[1];return this[0]=t,this[1]=i,this}},{key:"setTo",value:function(t){var i=arguments.length<=1||void 0===arguments[1]?t:arguments[1];return this[0]=t,this[1]=i,this}},{key:"zero",value:function(){return this[0]=0,this[1]=0,this}},{key:"add",value:function(t){return this[0]+=t[0],this[1]+=t[1],this}},{key:"addScalar",value:function(t){return this[0]+=t,this[1]+=t,this}},{key:"addVectors",value:function(t,i){return this[0]=t[0]+i[0],this[1]=t[1]+i[1],this}},{key:"addScaledVector",value:function(t,i){return this[0]+=t[0]*i,this[1]+=t[1]*i,this}},{key:"sub",value:function(t){return this[0]-=t[0],this[1]-=t[1],this}},{key:"subScalar",value:function(t){return this[0]-=t,this[1]-=t,this}},{key:"subVectors",value:function(t,i){return this[0]=t[0]-i[0],this[1]=t[1]-i[1],this}},{key:"multiply",value:function(t){return this[0]*=t[0],this[1]*=t[1],this}},{key:"multiplyScalar",value:function(t){return isFinite(t)?(this[0]*=t,this[1]*=t):(this[0]=0,this[1]=0),this}},{key:"scale",value:function(t){var i=arguments.length<=1||void 0===arguments[1]?t:arguments[1];return this[0]*=t,this[1]*=i,this}},{key:"scaleV",value:function(t){return this[0]*=t[0],this[1]*=t[1],this}},{key:"divide",value:function(t){return this[0]/=t,this[1]/=t,this}},{key:"divideScalar",value:function(t){var i=1/t;return isFinite(i)?(this[0]*=i,this[1]*=i):(this[0]=0,this[1]=0),this}},{key:"min",value:function(t){return this[0]=Math.min(this[0],t[0]),this[1]=Math.min(this[1],t[1]),this}},{key:"max",value:function(t){return this[0]=Math.max(this[0],t[0]),this[1]=Math.max(this[1],t[1]),this}},{key:"clamp",value:function(t,i){return this[0]=Math.max(t[0],Math.min(i[0],this[0])),this[1]=Math.max(t[1],Math.min(i[1],this[1])),this}},{key:"floor",value:function(){return this[0]=Math.floor(this[0]),this[1]=Math.floor(this[1]),this}},{key:"ceil",value:function(){return this[0]=Math.ceil(this[0]),this[1]=Math.ceil(this[1]),this}},{key:"round",value:function(){return this[0]=Math.round(this[0]),this[1]=Math.round(this[1]),this}},{key:"roundToZero",value:function(){return this[0]<0?this[0]=Math.ceil(this[0]):this[0]=Math.floor(this[0]),this[1]<1?this[1]=Math.ceil(this[1]):this[1]=Math.floor(this[1]),this}},{key:"negate",value:function(){return this[0]=-this[0],this[1]=-this[1],this}},{key:"normalize",value:function(){var t=this.length();return t>0&&(this[0]/=t,this[1]/=t),this}},{key:"perp",value:function(){var t=this[0],i=this[1];return this[0]=i,this[1]=-t,this}},{key:"dot",value:function(t){return this[0]*t[0]+this[1]*t[1]}},{key:"lengthSq",value:function(){return this[0]*this[0]+this[1]*this[1]}},{key:"lengthManhattan",value:function(){return Math.abs(this[0])+Math.abs(this[1])}},{key:"toString",value:function(){return"[Vec2 (x="+this[0]+", y="+this[1]+")]"}},{key:"x",get:function(){return this[0]},set:function(t){this[0]=t}},{key:"y",get:function(){return this[1]},set:function(t){this[1]=t}},{key:"length",set:function(t){var i=Math.atan2(this[1],this[0]);this[0]=Math.cos(i)*t,this[1]=Math.sin(i)*t},get:function(){return Math.sqrt(this[0]*this[0]+this[1]*this[1])}}]),t}();i["default"]=s},104:function(t,i){"use strict";function e(t){return t*n}Object.defineProperty(i,"__esModule",{value:!0}),i["default"]=e;var n=Math.PI/180},105:function(t,i){"use strict";function e(t){return t*n}Object.defineProperty(i,"__esModule",{value:!0}),i["default"]=e;var n=180/Math.PI},106:function(t,i){"use strict";function e(t,i,e){var n=e-i;if(0>=n)return 0;var s=(t-i)%n;return 0>s&&(s+=n),s+i}Object.defineProperty(i,"__esModule",{value:!0}),i["default"]=e},112:function(t,i){"use strict";function e(t,i){return{name:"",transform:i}}Object.defineProperty(i,"__esModule",{value:!0}),i["default"]=e},113:function(t,i,e){"use strict";function n(t){return t&&t.__esModule?t:{"default":t}}function s(t,i){if(!(t instanceof i))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(i,"__esModule",{value:!0});var o=function(){function t(t,i){for(var e=0;e<i.length;e++){var n=i[e];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(i,e,n){return e&&t(i.prototype,e),n&&t(i,n),i}}(),h=e(100),r=n(h),a=function(){function t(i,e){s(this,t),this.now=new r["default"](i,e),this.old=new r["default"](i,e)}return o(t,[{key:"getRenderX",value:function(){var t=arguments.length<=0||void 0===arguments[0]?!1:arguments[0],i=arguments.length<=1||void 0===arguments[1]?0:arguments[1];return t?this.getDeltaX(i):this.now.x}},{key:"getRenderY",value:function(){var t=arguments.length<=0||void 0===arguments[0]?!1:arguments[0],i=arguments.length<=1||void 0===arguments[1]?0:arguments[1];return t?this.getDeltaY(i):this.now.y}},{key:"getDeltaX",value:function(){var t=arguments.length<=0||void 0===arguments[0]?0:arguments[0];return this.old.x+(this.now.x-this.old.x)*t}},{key:"getDeltaY",value:function(){var t=arguments.length<=0||void 0===arguments[0]?0:arguments[0];return this.old.y+(this.now.y-this.old.y)*t}},{key:"x",get:function(){return this.now.x},set:function(t){this.old.x=this.now.x,this.now.x=t}},{key:"y",get:function(){return this.now.y},set:function(t){this.old.y=this.now.y,this.now.y=t}}]),t}();i["default"]=a},114:function(t,i,e){"use strict";function n(t){return t&&t.__esModule?t:{"default":t}}function s(t,i){if(!(t instanceof i))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(i,"__esModule",{value:!0});var o=function(){function t(t,i){for(var e=0;e<i.length;e++){var n=i[e];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(i,e,n){return e&&t(i.prototype,e),n&&t(i,n),i}}(),h=e(115),r=n(h),a=e(116),u=n(a),l=function(){function t(){var i=arguments.length<=0||void 0===arguments[0]?null:arguments[0],e=arguments.length<=1||void 0===arguments[1]?0:arguments[1],n=arguments.length<=2||void 0===arguments[2]?0:arguments[2],o=arguments.length<=3||void 0===arguments[3]?0:arguments[3];s(this,t),this.gameObject=null,this.name="",this.hideFlags=!1,this.hasChanged=!1,this.parent=i,this.root=null,this.localPosition=new r["default"](0,0,0),this.localRotation=(0,u["default"])(),this.localScale=new r["default"](1,1,1),this.position=new r["default"](e,n,o),this.scale=new r["default"](1,1,1),this.rotation=(0,u["default"])(),this.children=new Set}return o(t,[{key:Symbol.iterator,value:function(){return this.children[Symbol.iterator]()}},{key:"scaleX",set:function(t){this.scale[2]=t}}]),t}();i["default"]=l},115:function(t,i){"use strict";function e(t,i){if(!(t instanceof i))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(i,"__esModule",{value:!0});var n=function(){function t(t,i){for(var e=0;e<i.length;e++){var n=i[e];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(i,e,n){return e&&t(i.prototype,e),n&&t(i,n),i}}(),s=function(){function t(){var i=arguments.length<=0||void 0===arguments[0]?0:arguments[0],n=arguments.length<=1||void 0===arguments[1]?0:arguments[1],s=arguments.length<=2||void 0===arguments[2]?0:arguments[2];e(this,t),this[0]=i,this[1]=n,this[2]=s}return n(t,[{key:"zero",value:function(){return this[0]=0,this[1]=0,this[2]=0,this}},{key:"add",value:function(t){return this[0]+=t[0],this[1]+=t[1],this[2]+=t[2],this}},{key:"sub",value:function(t){return this[0]-=t[0],this[1]-=t[1],this[2]-=t[2],this}},{key:"scale",value:function(t){var i=arguments.length<=1||void 0===arguments[1]?t:arguments[1],e=arguments.length<=2||void 0===arguments[2]?t:arguments[2];return this[0]*=t,this[1]*=i,this[2]*=e,this}},{key:"scaleV",value:function(t){return this[0]*=t[0],this[1]*=t[1],this[2]*=t[2],this}},{key:"div",value:function(t){return this[0]/=t,this[1]/=t,this[2]/=t,this}},{key:"floor",value:function(){return this[0]=Math.floor(this[0]),this[1]=Math.floor(this[1]),this[2]=Math.floor(this[2]),this}},{key:"ceil",value:function(){return this[0]=Math.ceil(this[0]),this[1]=Math.ceil(this[1]),this[2]=Math.ceil(this[2]),this}},{key:"negate",value:function(){return this[0]=-this[0],this[1]=-this[1],this[2]=-this[2],this}},{key:"normalize",value:function(){var t=this.length();return t>0&&(this[0]/=t,this[1]/=t,this[2]/=t),this}},{key:"perp",value:function(){var t=this[0],i=this[1];return this[0]=i,this[1]=-t,this}},{key:"dot",value:function(t){return this[0]*t[0]+this[1]*t[1]+this[2]*(t[2]||1)}},{key:"lengthSq",value:function(){return this[0]*this[0]+this[1]*this[1]+this[2]*this[2]}},{key:"lengthManhattan",value:function(){return Math.abs(this[0])+Math.abs(this[1])+Math.abs(this[2])}},{key:"toString",value:function(){return"[Vec2 (x="+this[0]+", y="+this[1]+")]"}},{key:"x",get:function(){return this[0]},set:function(t){this[0]=t}},{key:"y",get:function(){return this[1]},set:function(t){this[1]=t}},{key:"z",get:function(){return this[2]},set:function(t){this[2]=t}},{key:"length",set:function(t){var i=t/Math.sqrt(this[0]*this[0]+this[1]*this[1]+this[2]*this[2]);this[0]*=i,this[1]*=i,this[2]*=i},get:function(){return Math.sqrt(this[0]*this[0]+this[1]*this[1]+this[2]*this[2])}}]),t}();i["default"]=s},116:function(t,i){"use strict";function e(t,i,e,s){var o=arguments.length<=4||void 0===arguments[4]?new n(4):arguments[4];return o[0]=t,o[1]=i,o[2]=e,o[3]=s,o}Object.defineProperty(i,"__esModule",{value:!0}),i["default"]=e;var n=Float32Array},117:function(t,i,e){"use strict";function n(t){return t&&t.__esModule?t:{"default":t}}function s(t,i){if(!(t instanceof i))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(i,"__esModule",{value:!0});var o=function(){function t(t,i){for(var e=0;e<i.length;e++){var n=i[e];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(i,e,n){return e&&t(i.prototype,e),n&&t(i,n),i}}(),h=e(104),r=(n(h),e(105)),a=(n(r),e(106)),u=(n(a),e(118)),l=n(u),c=e(119),f=n(c),d=function(){function t(i){var e=arguments.length<=1||void 0===arguments[1]?null:arguments[1],n=arguments.length<=2||void 0===arguments[2]?0:arguments[2],o=arguments.length<=3||void 0===arguments[3]?0:arguments[3],h=arguments.length<=4||void 0===arguments[4]?0:arguments[4],r=arguments.length<=5||void 0===arguments[5]?1:arguments[5],a=arguments.length<=6||void 0===arguments[6]?1:arguments[6];s(this,t),this.gameObject=i,this.name="",this.hideFlags=!1,this.dirty=!1,this.parent=null,this.root=null,this.isRoot=!e,this._position=(0,l["default"])(n,o),this._scale=(0,l["default"])(r,a),this._rotation=h,this._local=new f["default"],this.interpolate=!0,this._oldPosition=(0,l["default"])(n,o),this._oldScale=(0,l["default"])(r,a),this._oldRotation=h,this._drawMatrix=new f["default"],this.children=new Set,this.drawList=[],e&&e.add(this),this.update()}return o(t,[{key:Symbol.iterator,value:function(){return this.children[Symbol.iterator]()}},{key:"getRenderX",value:function(){var t=arguments.length<=0||void 0===arguments[0]?1:arguments[0];return this._oldPosition[0]+(this._position[0]-this._oldPosition[0])*t}},{key:"getRenderY",value:function(){var t=arguments.length<=0||void 0===arguments[0]?1:arguments[0];return this._oldPosition[1]+(this._position[1]-this._oldPosition[1])*t}},{key:"getRenderScaleX",value:function(){var t=arguments.length<=0||void 0===arguments[0]?1:arguments[0];return this._oldScale[0]+(this._scale[0]-this._oldScale[0])*t}},{key:"getRenderScaleY",value:function(){var t=arguments.length<=0||void 0===arguments[0]?1:arguments[0];return this._oldScale[1]+(this._scale[1]-this._oldScale[1])*t}},{key:"getRenderRotation",value:function(){var t=arguments.length<=0||void 0===arguments[0]?1:arguments[0];return this._oldRotation+(this._rotation-this._oldRotation)*t}},{key:"setPosition",value:function(t){var i=arguments.length<=1||void 0===arguments[1]?t:arguments[1];this._oldPosition[0]=t,this._oldPosition[1]=i,this._position[0]=t,this._position[1]=i,this.update()}},{key:"setScale",value:function(t){var i=arguments.length<=1||void 0===arguments[1]?t:arguments[1];this._oldScale[0]=t,this._oldScale[1]=i,this._scale[0]=t,this._scale[1]=i,this.update()}},{key:"setRotation",value:function(t){this._oldRotation=t,this._rotation=t,this.update()}},{key:"setParent",value:function(t){if(this.parent!==t){this.parent;this.parent=t,this.root=t.root,this.isRoot=!1}}},{key:"add",value:function(t){if(!this.children.has(t)){var i=t.parent;this.children.add(t),this.drawList.push(t),t.parent=this,t.root=this.root;var e=!0,n=!1,s=void 0;try{for(var o,h=t.children[Symbol.iterator]();!(e=(o=h.next()).done);e=!0){var r=o.value;r.root=this.root}}catch(a){n=!0,s=a}finally{try{!e&&h["return"]&&h["return"]()}finally{if(n)throw s}}i&&i.remove(t)}return this}},{key:"update",value:function(){this._local.transform(this._position[0],this._position[1],this._rotation,this._scale[0],this._scale[1]),this.parent&&this._local.multiply(this.parent._local);for(var t=0;t<this.drawList.length;t++)this.drawList[t].update();this.dirty=!0}},{key:"draw",value:function(){var t=arguments.length<=0||void 0===arguments[0]?1:arguments[0];return this._drawMatrix.transform(this._oldPosition[0]+(this._position[0]-this._oldPosition[0])*t,this._oldPosition[1]+(this._position[1]-this._oldPosition[1])*t,this._oldRotation+(this._rotation-this._oldRotation)*t,this._oldScale[0]+(this._scale[0]-this._oldScale[0])*t,this._oldScale[1]+(this._scale[1]-this._oldScale[1])*t),this.parent&&this._drawMatrix.multiply(this.parent._drawMatrix),this._oldPosition[0]=this._position[0],this._oldPosition[1]=this._position[1],this._oldRotation=this._rotation,this._oldScale[0]=this._scale[0],this._oldScale[1]=this._scale[1],this._drawMatrix}},{key:"remove",value:function(t){return this.children.has(t)&&this.children["delete"](t),this}},{key:"x",get:function(){return this._position[0]},set:function(t){t!==this._position[0]&&(this._oldPosition[0]=this._position[0],this._position[0]=t,this.update())}},{key:"y",get:function(){return this._position[1]},set:function(t){t!==this._position[1]&&(this._oldPosition[1]=this._position[1],this._position[1]=t,this.update())}},{key:"scaleX",get:function(){return this._scale[0]},set:function(t){t!==this._scale[0]&&(this._oldScale[0]=this._scale[0],this._scale[0]=t,this.update())}},{key:"scaleY",get:function(){return this._scale[1]},set:function(t){t!==this._scale[1]&&(this._oldScale[1]=this._scale[1],this._scale[1]=t,this.update())}},{key:"rotation",get:function(){return this._rotation},set:function(t){t!==this._rotation&&(this._oldRotation=this._rotation,this._rotation=t,this.update())}}]),t}();i["default"]=d},118:function(t,i){"use strict";function e(t,i){var e=arguments.length<=2||void 0===arguments[2]?new n(2):arguments[2];return e[0]=t,e[1]=i,e}Object.defineProperty(i,"__esModule",{value:!0}),i["default"]=e;var n=Float32Array},119:function(t,i){"use strict";function e(t,i){if(!(t instanceof i))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(i,"__esModule",{value:!0});var n=function(){function t(t,i){for(var e=0;e<i.length;e++){var n=i[e];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(i,e,n){return e&&t(i.prototype,e),n&&t(i,n),i}}(),s=function(){function t(){var i=arguments.length<=0||void 0===arguments[0]?1:arguments[0],n=arguments.length<=1||void 0===arguments[1]?0:arguments[1],s=arguments.length<=2||void 0===arguments[2]?0:arguments[2],o=arguments.length<=3||void 0===arguments[3]?1:arguments[3],h=arguments.length<=4||void 0===arguments[4]?0:arguments[4],r=arguments.length<=5||void 0===arguments[5]?0:arguments[5];e(this,t),this[0]=i,this[1]=n,this[2]=0,this[3]=s,this[4]=o,this[5]=0,this[6]=h,this[7]=r,this[8]=1,this.rotationDirection=-1}return n(t,[{key:"transform",value:function(){var t=arguments.length<=0||void 0===arguments[0]?0:arguments[0],i=arguments.length<=1||void 0===arguments[1]?0:arguments[1],e=arguments.length<=2||void 0===arguments[2]?0:arguments[2],n=arguments.length<=3||void 0===arguments[3]?1:arguments[3],s=arguments.length<=4||void 0===arguments[4]?1:arguments[4],o=Math.cos(e),h=Math.sin(e)*this.rotationDirection;return this[0]=o*n,this[1]=-h*s,this[2]=0,this[3]=h*n,this[4]=o*s,this[5]=0,this[6]=t,this[7]=i,this[8]=1,this}},{key:"multiply",value:function(t){var i=this[0],e=this[1],n=this[3],s=this[4],o=this[6],h=this[7];return this[0]=t[0]*i+t[1]*n,this[1]=t[0]*e+t[1]*s,this[2]=0,this[3]=t[3]*i+t[4]*n,this[4]=t[3]*e+t[4]*s,this[5]=0,this[6]=o*t[0]+h*t[3]+t[6],this[7]=o*t[1]+h*t[4]+t[7],this[8]=1,this}},{key:"a",get:function(){return this[0]}},{key:"b",get:function(){return this[1]}},{key:"c",get:function(){return this[3]}},{key:"d",get:function(){return this[4]}},{key:"tx",get:function(){return this[6]}},{key:"ty",get:function(){return this[7]}}]),t}();i["default"]=s}})});
//# sourceMappingURL=data:application/json;base64,