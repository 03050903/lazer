!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("graphics",[],t):"object"==typeof exports?exports.graphics=t():(e.lazer=e.lazer||{},e.lazer.graphics=t())}(this,function(){return function(e){function t(n){if(r[n])return r[n].exports;var i=r[n]={exports:{},id:n,loaded:!1};return e[n].call(i.exports,i,i.exports,t),i.loaded=!0,i.exports}var r={};return t.m=e,t.c=r,t.p="",t(0)}({0:function(e,t,r){"use strict";function n(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t["default"]=e,t}Object.defineProperty(t,"__esModule",{value:!0}),t.color=void 0;var i=r(268),o=n(i);t.color=o},160:function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function i(){for(var e=arguments.length<=0||void 0===arguments[0]?1:arguments[0],t=arguments.length<=1||void 0===arguments[1]?1:arguments[1],r=[],n=0;359>=n;n++)r.push((0,u["default"])(n/359,e,t));return r}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=i;var o=r(161),u=n(o)},161:function(e,t){"use strict";function r(e){var t=arguments.length<=1||void 0===arguments[1]?1:arguments[1],r=arguments.length<=2||void 0===arguments[2]?1:arguments[2],n=Math.floor(6*e),i=6*e-n,o=Math.floor(r*(1-t)*255),u=Math.floor(r*(1-i*t)*255),a=Math.floor(r*(1-(1-i)*t)*255);r=Math.floor(r*=255);var l=n%6;return 0===l?{r:r,g:a,b:o}:1===l?{r:u,g:r,b:o}:2===l?{r:o,g:r,b:a}:3===l?{r:o,g:u,b:r}:4===l?{r:a,g:o,b:r}:5===l?{r:r,g:o,b:u}:void 0}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r},268:function(e,t,r){"use strict";function n(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t["default"]=e,t}function i(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0}),t.RandomRGB=t.RGBtoString=t.RGBtoHSV=t.LinearInterpolation=t.HueToColor=t.HSVtoRGB=t.HSVColorWheel=t.HSLtoRGB=t.GetColor32=t.GetColor=t.ComponentToHex=t.ColorToRGB=t.CSStoRGB=t.BlendModes=t.BaseColor=void 0;var o=r(269),u=i(o),a=r(280),l=n(a),s=r(281),h=i(s),d=r(277),f=i(d),c=r(273),g=i(c),v=r(270),b=i(v),y=r(271),p=i(y),m=r(274),M=i(m),k=r(160),_=i(k),B=r(161),w=i(B),G=r(275),R=i(G),j=r(278),O=n(j),C=r(282),P=i(C),S=r(272),x=i(S),H=r(276),L=i(H);t.BaseColor=u["default"],t.BlendModes=l,t.CSStoRGB=h["default"],t.ColorToRGB=f["default"],t.ComponentToHex=g["default"],t.GetColor=b["default"],t.GetColor32=p["default"],t.HSLtoRGB=M["default"],t.HSVColorWheel=_["default"],t.HSVtoRGB=w["default"],t.HueToColor=R["default"],t.LinearInterpolation=O,t.RGBtoHSV=P["default"],t.RGBtoString=x["default"],t.RandomRGB=L["default"]},269:function(e,t,r){"use strict";function n(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t["default"]=e,t}function i(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var u=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),a=r(270),l=i(a),s=r(271),h=i(s),d=r(272),f=i(d),c=r(161),g=i(c),v=r(274),b=i(v),y=r(276),p=i(y),m=r(277),M=i(m),k=r(278),_=n(k),B=function(){function e(){var t=arguments.length<=0||void 0===arguments[0]?0:arguments[0],r=arguments.length<=1||void 0===arguments[1]?0:arguments[1],n=arguments.length<=2||void 0===arguments[2]?0:arguments[2],i=arguments.length<=3||void 0===arguments[3]?255:arguments[3];o(this,e),this.r=t,this.g=r,this.b=n,this.a=i,this.gl=new Float32Array([0,0,0,1]),this.color=0,this.color32=0,this.rgba="",this.dirty=!0,this.update()}return u(e,[{key:"setRGB",value:function(e,t,r){var n=arguments.length<=3||void 0===arguments[3]?255:arguments[3];return this.r=e,this.g=t,this.b=r,this.a=n,this.dirty=!0,this.update()}},{key:"fromRGB",value:function(e,t,r){var n=arguments.length<=3||void 0===arguments[3]?255:arguments[3];return this.red=e,this.green=t,this.blue=r,this.alpha=n,this.update()}},{key:"fromColor",value:function(e){var t=(0,M["default"])(e),r=t.r,n=t.g,i=t.b,o=t.a;return this.setRGB(r,n,i,o)}},{key:"fromRandom",value:function(){var e=arguments.length<=0||void 0===arguments[0]?0:arguments[0],t=arguments.length<=1||void 0===arguments[1]?255:arguments[1],r=(0,p["default"])(e,t),n=r.r,i=r.g,o=r.b;return this.setRGB(n,i,o)}},{key:"fromHSV",value:function(e){var t=arguments.length<=1||void 0===arguments[1]?1:arguments[1],r=arguments.length<=2||void 0===arguments[2]?1:arguments[2],n=(0,g["default"])(e,t,r),i=n.r,o=n.g,u=n.b;return this.fromRGB(i,o,u)}},{key:"fromHSVColorWheel",value:function(){var e=arguments.length<=0||void 0===arguments[0]?0:arguments[0],t=arguments.length<=1||void 0===arguments[1]?1:arguments[1],r=arguments.length<=2||void 0===arguments[2]?1:arguments[2];e=Math.min(Math.abs(e),359)/359;var n=(0,g["default"])(e,t,r),i=n.r,o=n.g,u=n.b;return this.fromRGB(i,o,u)}},{key:"fromHSL",value:function(e,t,r){var n=(0,b["default"])(e,t,r),i=n.r,o=n.g,u=n.b;return this.fromRGB(i,o,u)}},{key:"fromHSLColorWheel",value:function(){var e=arguments.length<=0||void 0===arguments[0]?0:arguments[0],t=arguments.length<=1||void 0===arguments[1]?1:arguments[1],r=arguments.length<=2||void 0===arguments[2]?.5:arguments[2];e=Math.min(Math.abs(e),359)/359;var n=(0,b["default"])(e,t,r),i=n.r,o=n.g,u=n.b;return this.fromRGB(i,o,u)}},{key:"fromInterpolation",value:function(e,t,r,n){var i=_.colorWithColor(e,t,r,n),o=i.r,u=i.g,a=i.b;return this.fromRGB(o,u,a)}},{key:"interpolateWith",value:function(e,t,r){var n=_.colorWithColor(this,e,t,r),i=n.r,o=n.g,u=n.b;return this.fromRGB(i,o,u)}},{key:"clone",value:function(){return new e(this.r,this.g,this.b,this.a)}},{key:"copyFrom",value:function(e){return this.setRGB(e.r,e.g,e.b,e.a)}},{key:"copyTo",value:function(e){return e.setRGB(this.r,this.g,this.b,this.a)}},{key:"equals",value:function(e){return this.r===e.r&&this.g===e.g&&this.b===e.b&&this.a===e.a}},{key:"update",value:function(){return this.dirty?(this.color=(0,l["default"])(this.r,this.g,this.b),this.color32=(0,h["default"])(this.r,this.g,this.b,this.a),this.rgba="rgba("+this.r+", "+this.g+", "+this.b+", "+255/this.a+")",this.gl[0]=this.r/255,this.gl[1]=this.g/255,this.gl[2]=this.b/255,this.gl[3]=this.a/255,this.dirty=!1,this):this}},{key:"toGL",value:function(){return this.gl}},{key:"toString",value:function(){var e=arguments.length<=0||void 0===arguments[0]?"#":arguments[0];return(0,f["default"])(this.r,this.g,this.b,this.a,e)}},{key:"r1",get:function(){return this.gl[0]}},{key:"g1",get:function(){return this.gl[1]}},{key:"b1",get:function(){return this.gl[2]}},{key:"a1",get:function(){return this.gl[3]}},{key:"red",get:function(){return this.r},set:function(e){e!==this.r&&(e=Math.floor(Math.abs(e)),this.r=Math.min(e,255),this.gl[0]=this.r/255,this.dirty=!0)}},{key:"green",get:function(){return this.g},set:function(e){e!==this.g&&(e=Math.floor(Math.abs(e)),this.g=Math.min(e,255),this.gl[1]=this.g/255,this.dirty=!0)}},{key:"blue",get:function(){return this.b},set:function(e){e!==this.b&&(e=Math.floor(Math.abs(e)),this.b=Math.min(e,255),this.gl[2]=this.b/255,this.dirty=!0)}},{key:"alpha",get:function(){return this.a},set:function(e){e!==this.a&&(e=Math.floor(Math.abs(e)),this.a=Math.min(e,255),this.gl[3]=this.a/255,this.dirty=!0)}}],[{key:"create",value:function(t){return(new e).fromColor(t)}},{key:"createRandom",value:function(t,r){return(new e).fromRandom(t,r)}}]),e}();t["default"]=B},270:function(e,t){"use strict";function r(e,t,r){return e<<16|t<<8|r}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r},271:function(e,t){"use strict";function r(e,t,r,n){return n<<24|e<<16|t<<8|r}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r},272:function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function i(e,t,r){var n=arguments.length<=3||void 0===arguments[3]?255:arguments[3],i=arguments.length<=4||void 0===arguments[4]?"#":arguments[4];return"#"===i?"#"+((1<<24)+(e<<16)+(t<<8)+r).toString(16).slice(1):"0x"+(0,u["default"])(n)+(0,u["default"])(e)+(0,u["default"])(t)+(0,u["default"])(r)}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=i;var o=r(273),u=n(o)},273:function(e,t){"use strict";function r(e){var t=e.toString(16);return 1===t.length?"0"+t:t}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r},274:function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function i(e,t,r){var n=r,i=r,o=r;if(0!==t){var a=.5>r?r*(1+t):r+t-r*t,l=2*r-a;n=(0,u["default"])(l,a,e+1/3),i=(0,u["default"])(l,a,e),o=(0,u["default"])(l,a,e-1/3)}return{r:255*n,g:255*i,b:255*o}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=i;var o=r(275),u=n(o)},275:function(e,t){"use strict";function r(e,t,r){return 0>r&&(r+=1),r>1&&(r-=1),1/6>r?e+6*(t-e)*r:.5>r?t:2/3>r?e+(t-e)*(2/3-r)*6:e}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r},276:function(e,t){"use strict";function r(){var e=arguments.length<=0||void 0===arguments[0]?0:arguments[0],t=arguments.length<=1||void 0===arguments[1]?255:arguments[1],r=e+Math.round(Math.random()*(t-e)),n=e+Math.round(Math.random()*(t-e)),i=e+Math.round(Math.random()*(t-e));return{r:r,g:n,b:i}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r},277:function(e,t){"use strict";function r(e){if(e>16777215);else;var t=e>>16&255,r=e>>8&255,n=255&e;return{r:t,g:r,b:n,a:a}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r},278:function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function i(e,t){var r=arguments.length<=2||void 0===arguments[2]?100:arguments[2],n=arguments.length<=3||void 0===arguments[3]?0:arguments[3];return this.RGBwithRGB(e.r,e.g,e.b,t.r,t.g,t.b,r,n)}function o(e,t,r,n){var i=arguments.length<=4||void 0===arguments[4]?100:arguments[4],o=arguments.length<=5||void 0===arguments[5]?0:arguments[5];return this.RGBwithRGB(e.r,e.g,e.b,t,r,n,i,o)}function u(e,t,r,n,i,o){var u=arguments.length<=6||void 0===arguments[6]?100:arguments[6],a=arguments.length<=7||void 0===arguments[7]?0:arguments[7],s=a/u,h=(0,l["default"])(e,n,s),d=(0,l["default"])(t,i,s),f=(0,l["default"])(r,o,s);return{r:h,g:d,b:f}}Object.defineProperty(t,"__esModule",{value:!0}),t.colorWithColor=i,t.colorWithRGB=o,t.RGBwithRGB=u;var a=r(279),l=n(a)},279:function(e,t){"use strict";function r(e,t,r){return(t-e)*r+e}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r},280:function(e,t){"use strict";function r(e){return e}function n(e,t){return t>e?t:e}function i(e,t){return t>e?e:t}function o(e,t){return e*t/255}function u(e,t){return(e+t)/2}function a(e,t){return Math.min(255,e+t)}function l(e,t){return Math.max(0,e+t-255)}function s(e,t){return Math.abs(e-t)}function h(e,t){return 255-Math.abs(255-e-t)}function d(e,t){return 255-((255-e)*(255-t)>>8)}function f(e,t){return e+t-2*e*t/255}function c(e,t){return 128>t?2*e*t/255:255-2*(255-e)*(255-t)/255}function g(e,t){return 128>t?2*((e>>1)+64)*(t/255):255-2*(255-((e>>1)+64))*(255-t)/255}function v(e,t){return this.overlay(t,e)}function b(e,t){return 255===t?t:Math.min(255,(e<<8)/(255-t))}function y(e,t){return 0===t?t:Math.max(0,255-(255-e<<8)/t)}function p(e,t){return this.add(e,t)}function m(e,t){return this.subtract(e,t)}function M(e,t){return 128>t?this.linearBurn(e,2*t):this.linearDodge(e,2*(t-128))}function k(e,t){return 128>t?this.colorBurn(e,2*t):this.colorDodge(e,2*(t-128))}function _(e,t){return 128>t?this.darken(e,2*t):this.lighten(e,2*(t-128))}function B(e,t){return this.vividLight(e,t)<128?0:255}function w(e,t){return 255===t?t:Math.min(255,e*e/(255-t))}function G(e,t){return this.reflect(t,e)}function R(e,t){return Math.min(e,t)-Math.max(e,t)+255}Object.defineProperty(t,"__esModule",{value:!0}),t.normal=r,t.lighten=n,t.darken=i,t.multiply=o,t.average=u,t.add=a,t.subtract=l,t.difference=s,t.negation=h,t.screen=d,t.exclusion=f,t.overlay=c,t.softLight=g,t.hardLight=v,t.colorDodge=b,t.colorBurn=y,t.linearDodge=p,t.linearBurn=m,t.linearLight=M,t.vividLight=k,t.pinLight=_,t.hardMix=B,t.reflect=w,t.glow=G,t.phoenix=R},281:function(e,t){"use strict";function r(e){var t=n.get(e);return{r:t[0],g:t[1],b:t[2]}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var n=new Map([["aliceblue",[240,248,245]],["antiquewhite",[250,235,215]],["aqua",[0,255,255]],["aquamarine",[127,255,212]],["azure",[240,255,255]],["beige",[245,245,220]],["bisque",[255,228,196]],["black",[0,0,0]],["blanchedalmond",[255,235,205]],["blue",[0,0,255]],["blueviolet",[138,43,226]],["brown",[165,42,42]],["burlywood",[222,184,35]],["cadetblue",[95,158,160]],["chartreuse",[127,255,0]],["chocolate",[210,105,30]],["coral",[255,127,80]],["cornflowerblue",[100,149,237]],["cornsilk",[255,248,220]],["crimson",[220,20,60]],["darkblue",[0,0,139]],["darkcyan",[0,139,139]],["darkgoldenrod",[184,134,11]],["darkgray[*]",[169,169,169]],["darkgreen",[0,100,0]],["darkgrey[*]",[169,169,169]],["darkkhaki",[189,183,107]],["darkmagenta",[139,0,139]],["darkolivegreen",[85,107,47]],["darkorange",[255,140,0]],["darkorchid",[153,50,204]],["darkred",[139,0,0]],["darksalmon",[233,150,122]],["darkseagreen",[143,188,143]],["darkslateblue",[72,61,139]],["darkslategray",[47,79,79]],["darkslategrey",[47,79,79]],["darkturquoise",[0,206,209]],["darkviolet",[148,0,211]],["deeppink",[255,20,147]],["deepskyblue",[0,191,255]],["dimgray",[105,105,105]],["dimgrey",[105,105,105]],["dodgerblue",[30,144,255]],["firebrick",[178,34,34]],["floralwhite",[255,250,240]],["forestgreen",[34,139,34]],["fuchsia",[255,0,255]],["gainsboro",[220,220,220]],["ghostwhite",[248,248,255]],["gold",[255,215,0]],["goldenrod",[218,165,32]],["gray",[128,128,128]],["green",[0,128,0]],["greenyellow",[173,255,47]],["grey",[128,128,128]],["honeydew",[240,255,240]],["hotpink",[255,105,180]],["indianred",[205,92,92]],["indigo",[75,0,130]],["ivory",[255,255,240]],["khaki",[240,230,140]],["lavender",[230,230,250]],["lavenderblush",[255,240,245]],["lawngreen",[124,252,0]],["lemonchiffon",[255,250,205]],["lightblue",[173,216,230]],["lightcoral",[240,128,128]],["lightcyan",[224,255,255]],["lightgoldenrodyellow",[250,250,210]],["lightgray",[211,211,211]],["lightgreen",[144,238,144]],["lightgrey",[211,211,211]],["lightpink",[255,182,193]],["lightsalmon",[255,160,122]],["lightseagreen",[32,178,170]],["lightskyblue",[135,206,250]],["lightslategray",[119,136,153]],["lightslategrey",[119,136,153]],["lightsteelblue",[176,196,222]],["lightyellow",[255,255,224]],["lime",[0,255,0]],["limegreen",[50,205,50]],["linen",[250,240,230]],["maroon",[128,0,0]],["mediumaquamarine",[102,205,170]],["mediumblue",[0,0,205]],["mediumorchid",[186,85,211]],["mediumpurple",[147,112,219]],["mediumseagreen",[60,179,113]],["mediumslateblue",[123,104,238]],["mediumspringgreen",[0,250,154]],["mediumturquoise",[72,209,204]],["mediumvioletred",[199,21,133]],["midnightblue",[25,25,112]],["mintcream",[245,255,250]],["mistyrose",[255,228,225]],["moccasin",[255,228,181]],["navajowhite",[255,222,173]],["navy",[0,0,128]],["oldlace",[253,245,230]],["olive",[128,128,0]],["olivedrab",[107,142,35]],["orange",[255,165,0]],["orangered",[255,69,0]],["orchid",[218,112,214]],["palegoldenrod",[238,232,170]],["palegreen",[152,251,152]],["paleturquoise",[175,238,238]],["palevioletred",[219,112,147]],["papayawhip",[255,239,213]],["peachpuff",[255,218,185]],["peru",[205,133,63]],["pink",[255,192,203]],["plum",[221,160,221]],["powderblue",[176,224,230]],["purple",[128,0,128]],["rebeccapurple",[102,51,153]],["red",[255,0,0]],["rosybrown",[188,143,143]],["royalblue",[65,105,225]],["saddlebrown",[139,69,19]],["salmon",[250,128,114]],["sandybrown",[244,164,96]],["seagreen",[46,139,87]],["seashell",[255,245,238]],["sienna",[160,82,45]],["silver",[192,192,129]],["skyblue",[135,206,235]],["slateblue",[106,90,205]],["slategray",[112,128,144]],["slategrey",[112,128,144]],["snow",[255,250,250]],["springgreen",[0,255,127]],["steelblue",[70,130,180]],["tan",[210,180,140]],["teal",[0,128,128]],["thistle",[216,191,216]],["tomato",[255,99,71]],["turquoise",[64,224,208]],["violet",[238,130,238]],["wheat",[245,222,179]],["white",[255,255,255]],["whitesmoke",[245,245,245]],["yellow",[255,255,0]],["yellowgreen",[154,205,50]]])},282:function(e,t){"use strict";function r(e,t,r){e/=255,t/=255,r/=255;var n=Math.min(e,t,r),i=Math.max(e,t,r),o=i-n,u=0,a=0===i?0:o/i,l=i;return i!==n&&(i===e?u=(t-r)/o+(r>t?6:0):i===t?u=(r-e)/o+2:i===r&&(u=(e-t)/o+4),u/=6),{h:u,s:a,v:l}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r}})});
//# sourceMappingURL=data:application/json;base64,