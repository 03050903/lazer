!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("config",[],t):"object"==typeof exports?exports.config=t():(e.lazer=e.lazer||{},e.lazer.config=t())}(this,function(){return function(e){function t(n){if(r[n])return r[n].exports;var u=r[n]={exports:{},id:n,loaded:!1};return e[n].call(u.exports,u,u.exports,t),u.loaded=!0,u.exports}var r={};return t.m=e,t.c=r,t.p="",t(0)}({0:function(e,t,r){"use strict";"create index";function n(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t["default"]=e,t}function u(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0}),t.settings=t.Config=void 0;var a=r(120),o=u(a),i=r(121),l=n(i);t.Config=o["default"],t.settings=l},120:function(e,t){"use strict";function r(){for(var e=arguments.length,t=Array(e),r=0;e>r;r++)t[r]=arguments[r];var u={add:function(e){n[e.name]=e.hasOwnProperty("value")?e.value:e.properties},remove:function(e){delete n[e]},require:function(){for(var e=arguments.length,t=Array(e),r=0;e>r;r++)t[r]=arguments[r];var a=!0,o=!1,i=void 0;try{for(var l,f=t[Symbol.iterator]();!(a=(l=f.next()).done);a=!0){var d=l.value;n.hasOwnProperty(d.name)||u.add(d)}}catch(s){o=!0,i=s}finally{try{!a&&f["return"]&&f["return"]()}finally{if(o)throw i}}},get:function(e){return e&&n.hasOwnProperty(e)?n[e]:n}},a=!0,o=!1,i=void 0;try{for(var l,f=t[Symbol.iterator]();!(a=(l=f.next()).done);a=!0){var d=l.value;u.add(d)}}catch(s){o=!0,i=s}finally{try{!a&&f["return"]&&f["return"]()}finally{if(o)throw i}}return u}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var n={}},121:function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0}),t.Transparent=t.State=t.PixelArt=t.Parent=t.GameTitle=t.FrameRate=t.DisableWebGL=t.DisableWebAudio=t.DisableAudio=t.Dimensions=void 0;var u=r(122),a=n(u),o=r(123),i=n(o),l=r(124),f=n(l),d=r(125),s=n(d),c=r(126),v=n(c),p=r(127),b=n(p),y=r(128),_=n(y),m=r(129),h=n(m),g=r(130),P=n(g),O=r(131),j=n(O);t.Dimensions=a["default"],t.DisableAudio=i["default"],t.DisableWebAudio=f["default"],t.DisableWebGL=s["default"],t.FrameRate=v["default"],t.GameTitle=b["default"],t.Parent=_["default"],t.PixelArt=h["default"],t.State=P["default"],t.Transparent=j["default"]},122:function(e,t){"use strict";function r(){var e=arguments.length<=0||void 0===arguments[0]?800:arguments[0],t=arguments.length<=1||void 0===arguments[1]?600:arguments[1];return{name:"dimensions",properties:{width:e,height:t}}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r},123:function(e,t){"use strict";function r(){var e=arguments.length<=0||void 0===arguments[0]?!1:arguments[0];return{name:"disableAudio",value:e}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r},124:function(e,t){"use strict";function r(){var e=arguments.length<=0||void 0===arguments[0]?!1:arguments[0];return{name:"disableWebAudio",value:e}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r},125:function(e,t){"use strict";function r(){var e=arguments.length<=0||void 0===arguments[0]?!1:arguments[0];return{name:"disableWebGL",value:e}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r},126:function(e,t){"use strict";function r(){var e=arguments.length<=0||void 0===arguments[0]?60:arguments[0];return{name:"frameRate",value:e}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r},127:function(e,t){"use strict";function r(e,t){return{name:"gameTitle",properties:{name:e,url:t}}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r},128:function(e,t){"use strict";function r(){var e=arguments.length<=0||void 0===arguments[0]?"":arguments[0];return{name:"parent",value:e}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r},129:function(e,t){"use strict";function r(){var e=arguments.length<=0||void 0===arguments[0]?!1:arguments[0];return{name:"pixelArt",value:e}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r},130:function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function u(e){return{name:"state",value:(0,o["default"])(e)}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=u;var a=r(130),o=n(a)},131:function(e,t){"use strict";function r(){var e=arguments.length<=0||void 0===arguments[0]?!1:arguments[0];return{name:"transparent",value:e}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r}})});
//# sourceMappingURL=data:application/json;base64,