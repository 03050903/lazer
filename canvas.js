!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("canvas",[],e):"object"==typeof exports?exports.canvas=e():(t.lazer=t.lazer||{},t.lazer.canvas=e())}(this,function(){return function(t){function e(i){if(n[i])return n[i].exports;var r=n[i]={exports:{},id:i,loaded:!1};return t[i].call(r.exports,r,r.exports,e),r.loaded=!0,r.exports}var n={};return e.m=t,e.c=n,e.p="",e(0)}([function(t,e,n){"use strict";function i(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function r(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(e,"__esModule",{value:!0}),e.shapes=e.pixels=e.imagedata=e.graphics=e.filters=e.effects=e.UserSelect=e.TouchAction=e.Smoothing=e.SetTransformFromMatrix=e.SetTransform=e.Resize=e.ResetTransform=e.ImageRendering=e.GetContext=e.DrawImageFromMatrix=e.DrawImage=e.Canvas=e.BackgroundColor=void 0;var a=n(8),u=r(a),o=n(9),l=r(o),s=n(10),d=r(s),f=n(11),c=r(f),h=n(12),v=r(h),g=n(13),_=i(g),p=n(14),y=r(p),b=n(15),M=r(b),P=n(16),O=r(P),m=n(17),j=r(m),w=n(18),S=i(w),x=n(19),A=r(x),k=n(20),D=r(k),R=n(21),L=i(R),I=n(39),C=i(I),T=n(54),G=i(T),E=n(81),F=i(E),N=n(95),B=i(N),z=n(101),X=i(z);e.BackgroundColor=u["default"],e.Canvas=l["default"],e.DrawImage=d["default"],e.DrawImageFromMatrix=c["default"],e.GetContext=v["default"],e.ImageRendering=_,e.ResetTransform=y["default"],e.Resize=M["default"],e.SetTransform=O["default"],e.SetTransformFromMatrix=j["default"],e.Smoothing=S,e.TouchAction=A["default"],e.UserSelect=D["default"],e.effects=L,e.filters=C,e.graphics=G,e.imagedata=F,e.pixels=B,e.shapes=X},,,,,,,,function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?"rgb(0, 0, 0)":arguments[1];return t.style.backgroundColor=e,t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=function(){var t=arguments.length<=0||void 0===arguments[0]?256:arguments[0],e=arguments.length<=1||void 0===arguments[1]?256:arguments[1],n=arguments.length<=2||void 0===arguments[2]?"":arguments[2],i=document.createElement("canvas");return""!==n&&(i.id=n),i.width=t,i.height=e,i.style.display="block",i}},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?{}:arguments[2],i=n.srcX,r=void 0===i?0:i,a=n.srcY,u=void 0===a?0:a,o=n.srcWidth,l=void 0===o?e.width:o,s=n.srcHeight,d=void 0===s?e.height:s,f=n.x,c=void 0===f?c:f,h=n.y,v=void 0===h?v:h,g=n.width,_=void 0===g?l:g,p=n.height,y=void 0===p?d:p,b=n.rotate,M=void 0===b?0:b,P=n.anchorX,O=void 0===P?0:P,m=n.anchorY,j=void 0===m?0:m,w=n.scaleX,S=void 0===w?1:w,x=n.scaleY,A=void 0===x?1:x,k=n.alpha,D=void 0===k?1:k,R=n.blendMode,L=void 0===R?null:R,I=n.roundPx,C=void 0===I?!1:I;if(0!==D&&0!==S&&0!==A){var T=t.globalAlpha,G=t.globalCompositeOperation;return t.save(),t.globalAlpha=D,C&&(c|=0,v|=0),L&&(t.globalCompositeOperation=L),t.translate(c,v),t.scale(S,A),t.rotate(M),t.drawImage(e,r,u,l,d,-_*O,-y*j,_,y),t.restore(),t.globalAlpha=T,t.globalCompositeOperation=G,t}}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e,n){var i=arguments.length<=3||void 0===arguments[3]?1:arguments[3],r=arguments.length<=4||void 0===arguments[4]?null:arguments[4],a=t.globalAlpha,u=t.globalCompositeOperation;return t.save(),t.globalAlpha=i,r&&(t.globalCompositeOperation=r),t.setTransform(n.a,n.b,n.c,n.d,n.tx,n.ty),t.drawImage(e,0,0),t.restore(),t.globalAlpha=a,t.globalCompositeOperation=u,t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e){return t.getContext("2d",e)||null}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t){for(var e=["optimizeSpeed","crisp-edges","-moz-crisp-edges","-webkit-optimize-contrast","optimize-contrast","pixelated"],n=0;n<e.length;n++)t.style["image-rendering"]=e[n];return t.style.msInterpolationMode="nearest-neighbor",t}function i(t){return t.style["image-rendering"]="auto",t.style.msInterpolationMode="bicubic",t}Object.defineProperty(e,"__esModule",{value:!0}),e.crisp=n,e.bicubic=i},function(t,e){"use strict";function n(t){return t.setTransform(1,0,0,1,0,0),t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?e:arguments[2];return e=Math.abs(e),n=Math.abs(n),t.width!==e&&(t.width=e),t.height!==n&&(t.height=n),t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?0:arguments[1],n=arguments.length<=2||void 0===arguments[2]?0:arguments[2],i=arguments.length<=3||void 0===arguments[3]?1:arguments[3],r=arguments.length<=4||void 0===arguments[4]?1:arguments[4],a=arguments.length<=5||void 0===arguments[5]?0:arguments[5],u=arguments.length<=6||void 0===arguments[6]?0:arguments[6];return t.setTransform(i,a,u,r,e,n),t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e){return t.setTransform(e.a,e.b,e.c,e.d,e.tx,e.ty),t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e){var n=this.getPrefix(t);return n&&(t[n]=e),t}function i(t){return this.set(t,!0)}function r(t){return this.set(t,!1)}function a(t){var e=["i","webkitI","msI","mozI","oI"];for(var n in e){var i=e[n]+"mageSmoothingEnabled";if(i in t)return i}return null}function u(t){var e=this.getPrefix(t);return e?t[e]:void 0}Object.defineProperty(e,"__esModule",{value:!0}),e.set=n,e.enable=i,e.disable=r,e.getPrefix=a,e.isEnabled=u},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?"none":arguments[1];return t.style.msTouchAction=e,t.style["ms-touch-action"]=e,t.style["touch-action"]=e,t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?"none":arguments[1];return t.style["-webkit-touch-callout"]=e,t.style["-webkit-user-select"]=e,t.style["-khtml-user-select"]=e,t.style["-moz-user-select"]=e,t.style["-ms-user-select"]=e,t.style["user-select"]=e,t.style["-webkit-tap-highlight-color"]="rgba(0, 0, 0, 0)",t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e,n){"use strict";"create index";function i(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(e,"__esModule",{value:!0}),e.Threshold=e.ReplaceRGBA=e.ReplaceRGB=e.MoveVertical=e.MoveHorizontal=e.Move=e.Luminance=e.Invert=e.Grayscale=e.Brightness=void 0;var r=n(22),a=i(r),u=n(30),o=i(u),l=n(31),s=i(l),d=n(32),f=i(d),c=n(33),h=i(c),v=n(34),g=i(v),_=n(35),p=i(_),y=n(36),b=i(y),M=n(37),P=i(M),O=n(38),m=i(O);e.Brightness=a["default"],e.Grayscale=o["default"],e.Invert=s["default"],e.Luminance=f["default"],e.Move=h["default"],e.MoveHorizontal=g["default"],e.MoveVertical=p["default"],e.ReplaceRGB=b["default"],e.ReplaceRGBA=P["default"],e.Threshold=m["default"]},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(t,e){var n=arguments.length<=2||void 0===arguments[2]?0:arguments[2],i=arguments.length<=3||void 0===arguments[3]?0:arguments[3],r=arguments.length<=4||void 0===arguments[4]?0:arguments[4],a=arguments.length<=5||void 0===arguments[5]?0:arguments[5],o=function(e,n,i,r,a,u){return i+=t,r+=t,a+=t,[i,r,a,u]};(0,u["default"])(e,o,n,i,r,a)}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=r;var a=n(23),u=i(a)},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(t,e){var n=arguments.length<=2||void 0===arguments[2]?0:arguments[2],i=arguments.length<=3||void 0===arguments[3]?0:arguments[3],r=arguments.length<=4||void 0===arguments[4]?null:arguments[4],a=arguments.length<=5||void 0===arguments[5]?null:arguments[5];r||(r=t.canvas.width),a||(a=t.canvas.height);var o=(0,l["default"])(t,n,i,r,a);(0,u["default"])(o,e),(0,d["default"])(t,o,n,i)}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=r;var a=n(24),u=i(a),o=n(27),l=i(o),s=n(29),d=i(s)},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(t,e){for(var n=0;n<t.data.length;n+=4){var i=e((0,u["default"])(t,n),(0,l["default"])(t,n),t.data[n],t.data[n+1],t.data[n+2],t.data[n+3]);t.data[n]=i[0],t.data[n+1]=i[1],t.data[n+2]=i[2],t.data[n+3]=i[3]}return t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=r;var a=n(25),u=i(a),o=n(26),l=i(o)},function(t,e){"use strict";function n(t,e){return Math.floor(e/4)%t.width}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e){return Math.floor(Math.floor(e/t.width)/4)}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(t){var e=arguments.length<=1||void 0===arguments[1]?0:arguments[1],n=arguments.length<=2||void 0===arguments[2]?0:arguments[2],i=arguments.length<=3||void 0===arguments[3]?null:arguments[3],r=arguments.length<=4||void 0===arguments[4]?null:arguments[4];return i||(i=t.canvas.width),r||(r=t.canvas.height),e=(0,u["default"])(e,0,t.canvas.width-i),n=(0,u["default"])(n,0,t.canvas.height-r),t.getImageData(e,n,i,r)}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=r;var a=n(28),u=i(a)},function(t,e){"use strict";function n(t,e,n){return e>t?e:t>n?n:t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?0:arguments[2],i=arguments.length<=3||void 0===arguments[3]?0:arguments[3],r=arguments[4],a=arguments[5],u=arguments[6],o=arguments[7];return void 0!==r?t.putImageData(e,n,i,r,a,u,o):t.putImageData(e,n,i),t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(t){var e=arguments.length<=1||void 0===arguments[1]?0:arguments[1],n=arguments.length<=2||void 0===arguments[2]?0:arguments[2],i=arguments.length<=3||void 0===arguments[3]?0:arguments[3],r=arguments.length<=4||void 0===arguments[4]?0:arguments[4],a=function(t,e,n,i,r,a){var u=.2126*n+.7152*i+.0722*r;return n=u,i=u,r=u,[n,i,r,a]};(0,u["default"])(t,a,e,n,i,r)}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=r;var a=n(23),u=i(a)},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(t){var e=arguments.length<=1||void 0===arguments[1]?0:arguments[1],n=arguments.length<=2||void 0===arguments[2]?0:arguments[2],i=arguments.length<=3||void 0===arguments[3]?0:arguments[3],r=arguments.length<=4||void 0===arguments[4]?0:arguments[4],a=function(t,e,n,i,r,a){return n=255-n,i=255-i,r=255-r,[n,i,r,a]};(0,u["default"])(t,a,e,n,i,r)}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=r;var a=n(23),u=i(a)},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(t){var e=arguments.length<=1||void 0===arguments[1]?0:arguments[1],n=arguments.length<=2||void 0===arguments[2]?0:arguments[2],i=arguments.length<=3||void 0===arguments[3]?0:arguments[3],r=arguments.length<=4||void 0===arguments[4]?0:arguments[4],a=function(t,e,n,i,r,a){var u=.2126*n+.7152*i+.0722*r;return n=u,i=u,r=u,[n,i,r,a]};(0,u["default"])(t,a,e,n,i,r)}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=r;var a=n(23),u=i(a)},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(t,e,n){var i=arguments.length<=3||void 0===arguments[3]?!0:arguments[3],r=arguments.length<=4||void 0===arguments[4]?!0:arguments[4],a=(0,u["default"])(t),o="no-repeat";i&&r?o="repeat":i?o="repeat-x":r&&(o="repeat-y");var s=a.createPattern(t,o),f=a.fillStyle;return a.fillStyle=s,a.clearRect(0,0,t.width,t.height),(0,l["default"])(a,e,n),a.fillRect(e*=-1,n*=-1,t.width,t.height),a.fillStyle=f,(0,d["default"])(a),s=void 0,t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=r;var a=n(12),u=i(a),o=n(16),l=i(o),s=n(14),d=i(s)},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(t,e){var n=arguments.length<=2||void 0===arguments[2]?!0:arguments[2];return(0,u["default"])(t,e,0,n,!1)}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=r;var a=n(33),u=i(a)},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(t,e){var n=arguments.length<=2||void 0===arguments[2]?!0:arguments[2];return(0,u["default"])(t,0,e,!1,n)}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=r;var a=n(33),u=i(a)},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(t,e,n,i,r,a,o){var l=arguments.length<=7||void 0===arguments[7]?0:arguments[7],s=arguments.length<=8||void 0===arguments[8]?0:arguments[8],d=arguments.length<=9||void 0===arguments[9]?0:arguments[9],f=arguments.length<=10||void 0===arguments[10]?0:arguments[10],c=function(t,u,l,s,d,f){return l===e&&s===n&&d===i&&f===a1?[r,a,o,a2]:[l,s,d,f]};(0,u["default"])(t,c,l,s,d,f)}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=r;var a=n(23),u=i(a)},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(t,e,n,i,r,a,o,l,s){var d=arguments.length<=9||void 0===arguments[9]?0:arguments[9],f=arguments.length<=10||void 0===arguments[10]?0:arguments[10],c=arguments.length<=11||void 0===arguments[11]?0:arguments[11],h=arguments.length<=12||void 0===arguments[12]?0:arguments[12],v=function(t,u,d,f,c,h){return d===e&&f===n&&c===i&&h===r?[a,o,l,s]:[d,f,c,h]};(0,u["default"])(t,v,d,f,c,h)}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=r;var a=n(23),u=i(a)},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(t,e){var n=arguments.length<=2||void 0===arguments[2]?0:arguments[2],i=arguments.length<=3||void 0===arguments[3]?0:arguments[3],r=arguments.length<=4||void 0===arguments[4]?0:arguments[4],a=arguments.length<=5||void 0===arguments[5]?0:arguments[5],o=function(e,n,i,r,a,u){var o=.2126*i+.7152*r+.0722*a;return o=o>=t?255:0,i=o,r=o,a=o,[i,r,a,u]};(0,u["default"])(e,o,n,i,r,a)}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=r;var a=n(23),u=i(a)},function(t,e,n){"use strict";"create index";function i(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(e,"__esModule",{value:!0}),e.Sharpen=e.MeanRemoval=e.Laplace=e.FlipVertical=e.FlipHorizontal=e.EmbossSubtle=e.Emboss=e.EdgeDetectDark=e.EdgeDetect=e.Distort=e.Convolve=e.Blur=void 0;var r=n(40),a=i(r),u=n(41),o=i(u),l=n(43),s=i(l),d=n(45),f=i(d),c=n(46),h=i(c),v=n(47),g=i(v),_=n(48),p=i(_),y=n(49),b=i(y),M=n(50),P=i(M),O=n(51),m=i(O),j=n(52),w=i(j),S=n(53),x=i(S);e.Blur=a["default"],e.Convolve=o["default"],e.Distort=s["default"],e.EdgeDetect=f["default"],e.EdgeDetectDark=h["default"],e.Emboss=g["default"],e.EmbossSubtle=p["default"],e.FlipHorizontal=b["default"],e.FlipVertical=P["default"],e.Laplace=m["default"],e.MeanRemoval=w["default"],e.Sharpen=x["default"]},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(t){return(0,u["default"])(t,[1,2,1,2,4,2,1,2,1])}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=r;var a=n(41),u=i(a)},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(t,e){var n=arguments.length<=2||void 0===arguments[2]?!1:arguments[2],i=arguments.length<=3||void 0===arguments[3]?0:arguments[3],r=(0,u["default"])(t);n||(n=e.reduce(function(t,e){return t+e})||1);for(var a=r.data,o=t.data,l=t.width,s=0,d=0;d<a.length;d++)(d+1)%4!==0?(s=(a[d-4*l-4]||a[d])*e[0],s+=(a[d-4*l]||a[d])*e[1],s+=(a[d-4*l+4]||a[d])*e[2],s+=(a[d-4]||a[d])*e[3],s+=a[d]*e[4],s+=(a[d+4]||a[d])*e[5],s+=(a[d+4*l-4]||a[d])*e[6],s+=(a[d+4*l]||a[d])*e[7],s+=(a[d+4*l+4]||a[d])*e[8],s/=n,s+=i,o[d]=Math.min(s,255)):o[d]=a[d];return t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=r;var a=n(42),u=i(a)},function(t,e){"use strict";function n(t){return{width:t.width,height:t.height,data:new Float32Array(t.data.slice())}}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(t){for(var e=arguments.length<=1||void 0===arguments[1]?.5:arguments[1],n=arguments.length<=2||void 0===arguments[2]?e:arguments[2],i=(0,u["default"])(t),r=new Float32Array(4),a=t.width,o=t.height,s=0;o>s;s++){var d=-Math.sin(s/(o-1)*Math.PI*2),f=s+d*n*o/4;f=Math.max(Math.min(f,o-1),0);for(var c=0;a>c;c++){var h=-Math.sin(c/(a-1)*Math.PI*2),v=c+h*e*a/4;v=Math.max(Math.min(v,a-1),0);var g=(0,l["default"])(i,v,f,r),_=4*(s*a+c);t.data[_]=g[0],t.data[_+1]=g[1],t.data[_+2]=g[2],t.data[_+3]=g[3]}}}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=r;var a=n(42),u=i(a),o=n(44),l=i(o)},function(t,e){"use strict";function n(t,e,n){var i=arguments.length<=3||void 0===arguments[3]?[0,0,0,0]:arguments[3],r=Math.floor(e),a=Math.ceil(e),u=Math.floor(n),o=Math.ceil(n),l=4*(r+t.width*u),s=4*(a+t.width*u),d=4*(r+t.width*o),f=4*(a+t.width*o),c=e-r+(n-u),h=a-e+(n-u),v=e-r+(o-n),g=a-e+(o-n),_=1/(g+v+h+c);g*=_,v*=_,h*=_,c*=_;var p=t.data;return i[0]=p[l+0]*g+p[s+0]*v+p[d+0]*h+p[f+0]*c,i[1]=p[l+1]*g+p[s+1]*v+p[d+1]*h+p[f+1]*c,i[2]=p[l+2]*g+p[s+2]*v+p[d+2]*h+p[f+2]*c,i[3]=p[l+3]*g+p[s+3]*v+p[d+3]*h+p[f+3]*c,i}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(t){return(0,u["default"])(t,[1,1,1,1,-7,1,1,1,1])}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=r;var a=n(41),u=i(a)},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(t){return(0,u["default"])(t,[-5,0,0,0,0,0,0,0,5])}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=r;var a=n(41),u=i(a)},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(t){var e=arguments.length<=1||void 0===arguments[1]?127:arguments[1];return(0,u["default"])(t,[2,0,0,0,-1,0,0,0,-1],!1,e)}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=r;var a=n(41),u=i(a)},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(t){return(0,u["default"])(t,[1,1,-1,1,3,-1,1,-1,-1])}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=r;var a=n(41),u=i(a)},function(t,e){"use strict";function n(t){for(var e=new Float32Array(t.data.slice()),n=t.width,i=t.height,r=0;i>r;r++)for(var a=0;n>a;a++){var u=4*(r*n+a),o=4*(r*n+(n-a-1));t.data[o]=e[u],t.data[o+1]=e[u+1],t.data[o+2]=e[u+2],t.data[o+3]=e[u+3]}}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t){for(var e=new Float32Array(t.data.slice()),n=t.width,i=t.height,r=0;i>r;r++)for(var a=0;n>a;a++){var u=4*(r*n+a),o=4*((i-r-1)*n+a);t.data[o]=e[u],t.data[o+1]=e[u+1],t.data[o+2]=e[u+2],t.data[o+3]=e[u+3]}}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(t){return(0,u["default"])(t,[-1,-1,-1,-1,8,-1,-1,-1,-1])}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=r;var a=n(41),u=i(a)},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(t){return(0,u["default"])(t,[-1,-1,-1,-1,9,-1,-1,-1,-1])}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=r;var a=n(41),u=i(a)},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(t){return(0,u["default"])(t,[0,-2,0,-2,11,-2,0,-2,0])}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=r;var a=n(41),u=i(a)},function(t,e,n){"use strict";"create index";function i(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(e,"__esModule",{value:!0}),e.StrokePattern=e.StrokeGradient=e.Stroke=e.Shadow=e.Save=e.Restore=e.Rectangle=e.addColor=e.RadialGradient=e.Plot=e.Pattern=e.MiterLimit=e.LinearGradient=e.LineWidth=e.LineStyle=e.LineJoin=e.LineDash=e.LineCap=e.Gradient=e.FillPattern=e.FillGradient=e.Fill=e.ClosePath=e.Clear=e.Circle=e.BeginPath=e.Arc=void 0;var r=n(55),a=i(r),u=n(56),o=i(u),l=n(57),s=i(l),d=n(58),f=i(d),c=n(59),h=i(c),v=n(60),g=i(v),_=n(61),p=i(_),y=n(62),b=i(y),M=n(63),P=i(M),O=n(64),m=i(O),j=n(65),w=i(j),S=n(66),x=i(S),A=n(67),k=i(A),D=n(68),R=i(D),L=n(69),I=i(L),C=n(70),T=i(C),G=n(71),E=i(G),F=n(72),N=i(F),B=n(73),z=i(B),X=n(74),Y=i(X),V=n(75),H=i(V),W=n(76),J=i(W),Z=n(77),U=i(Z),q=n(78),K=i(q),Q=n(79),$=i(Q),tt=n(80),et=i(tt);e.Arc=a["default"],e.BeginPath=o["default"],e.Circle=s["default"],e.Clear=f["default"],e.ClosePath=h["default"],e.Fill=g["default"],e.FillGradient=p["default"],e.FillPattern=b["default"],e.Gradient=P["default"],e.LineCap=m["default"],e.LineDash=w["default"],e.LineJoin=x["default"],e.LineStyle=k["default"],e.LineWidth=R["default"],e.LinearGradient=I["default"],e.MiterLimit=T["default"],e.Pattern=E["default"],e.Plot=N["default"],e.RadialGradient=z["default"],e.addColor=B.addColor,e.Rectangle=Y["default"],e.Restore=H["default"],e.Save=J["default"],e.Shadow=U["default"],e.Stroke=K["default"],e.StrokeGradient=$["default"],e.StrokePattern=et["default"]},function(t,e){"use strict";function n(t,e,n){var i=arguments.length<=3||void 0===arguments[3]?128:arguments[3],r=arguments.length<=4||void 0===arguments[4]?0:arguments[4],a=arguments.length<=5||void 0===arguments[5]?360:arguments[5],u=arguments.length<=6||void 0===arguments[6]?0:arguments[6],o=arguments.length<=7||void 0===arguments[7]?!1:arguments[7];if(r>a){var l=r;r=a,a=l}t.translate(e,n),t.rotate(u),t.arc(0,0,i,r,a,o)}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t){return t.beginPath(),t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e,n){var i=arguments.length<=3||void 0===arguments[3]?128:arguments[3],r=arguments.length<=4||void 0===arguments[4]?0:arguments[4],a=arguments.length<=5||void 0===arguments[5]?!1:arguments[5];return t.save(),t.translate(e,n),t.rotate(r),a&&t.moveTo(0,0),t.arc(0,0,i,0,2*Math.PI),t.restore(),t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?!1:arguments[1],n=arguments.length<=2||void 0===arguments[2]?0:arguments[2],i=arguments.length<=3||void 0===arguments[3]?0:arguments[3],r=arguments.length<=4||void 0===arguments[4]?0:arguments[4],a=arguments.length<=5||void 0===arguments[5]?1:arguments[5],u=t.canvas;if(e){var o=t.fillStyle;t.fillStyle="rgba("+n+","+i+","+r+","+a+")",t.fillRect(0,0,u.width,u.height),t.fillStyle=o}else t.clearRect(0,0,u.width,u.height);return t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t){return t.closePath(),t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e,n,i){var r=arguments.length<=4||void 0===arguments[4]?1:arguments[4];t.fillStyle="rgba("+e+","+n+","+i+","+r+")",t.fill()}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e){t.fillStyle=e,t.fill()}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e){t.fillStyle=e,t.fill()}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var i=function r(t,e){n(this,r)};e["default"]=i},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?"butt":arguments[1];t.lineCap=e}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?[5,5]:arguments[1],n=arguments.length<=2||void 0===arguments[2]?0:arguments[2];t.setLineDash(e),t.lineDashOffset=n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?"bevel":arguments[1];t.lineJoin=e}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?1:arguments[1],n=arguments.length<=2||void 0===arguments[2]?"butt":arguments[2],i=arguments.length<=3||void 0===arguments[3]?"bevel":arguments[3],r=arguments.length<=4||void 0===arguments[4]?null:arguments[4],a=arguments.length<=5||void 0===arguments[5]?0:arguments[5],u=arguments.length<=6||void 0===arguments[6]?10:arguments[6];t.lineWidth=e,t.lineCap=n,t.lineJoin=i,t.miterLimit=u,r&&(t.setLineDash(r),t.lineDashOffset=a)}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?1:arguments[1];t.lineWidth=e}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(t,e,n,i,r){for(var a=arguments.length,u=Array(a>5?a-5:0),o=5;a>o;o++)u[o-5]=arguments[o];var l=t.createLinearGradient(e,n,i,r);if(u.length>0){Array.isArray(u[0])&&(u=u[0]);for(var s=0;s<u.length/2;s+=2)l.addColorStop(u[s],u[s+1])}return l}function a(t,e,n){return t.addColorStop((0,o["default"])(e,0,1),n),t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=r,e.addColor=a;var u=n(28),o=i(u)},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?10:arguments[1];t.miterLimit=e}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e){var n=arguments.length<=2||void 0===arguments[2]?!0:arguments[2],i=arguments.length<=3||void 0===arguments[3]?!0:arguments[3],r="no-repeat";return n&&i?r="repeat":n?r="repeat-x":i&&(r="repeat-y"),e.createPattern(t,r)}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e,n){var i=arguments.length<=3||void 0===arguments[3]?1:arguments[3],r=arguments.length<=4||void 0===arguments[4]?"#ffffff":arguments[4],a=t.fillStyle;return t.fillStyle=r,t.fillRect(e,n,i,i),t.fillStyle=a,t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(t,e,n,i,r,a,u){for(var o=arguments.length,l=Array(o>7?o-7:0),s=7;o>s;s++)l[s-7]=arguments[s];var d=t.createRadialGradient(e,n,i,r,a,u);if(l.length>0){Array.isArray(l[0])&&(l=l[0]);for(var f=0;f<l.length/2;f+=2)d.addColorStop(l[f],l[f+1])}return d}function a(t,e,n){return t.addColorStop((0,o["default"])(e,0,1),n),t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=r,e.addColor=a;var u=n(28),o=i(u)},function(t,e){"use strict";function n(t,e,n){var i=arguments.length<=3||void 0===arguments[3]?128:arguments[3],r=arguments.length<=4||void 0===arguments[4]?128:arguments[4],a=arguments.length<=5||void 0===arguments[5]?0:arguments[5],u=arguments.length<=6||void 0===arguments[6]?!1:arguments[6];t.translate(e,n),t.rotate(a),u?t.rect(.5*-i,.5*-r,i,r):t.rect(0,0,i,r)}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t){return t.restore(),t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t){return t.save(),t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t){var e=arguments.length<=1||void 0===arguments[1]?"rgba(0,0,0,0)":arguments[1],n=arguments.length<=2||void 0===arguments[2]?5:arguments[2],i=arguments.length<=3||void 0===arguments[3]?10:arguments[3],r=arguments.length<=4||void 0===arguments[4]?10:arguments[4];t.shadowColor=e,t.shadowBlur=n,t.shadowOffsetX=i,t.shadowOffsetY=r}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e,n,i){var r=arguments.length<=4||void 0===arguments[4]?1:arguments[4];t.strokeStyle="rgba("+e+","+n+","+i+","+r+")",t.stroke()}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e){t.strokeStyle=e,t.stroke()}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e){"use strict";function n(t,e){t.strokeStyle=e,t.stroke()}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(e,"__esModule",{value:!0}),e.SetPixel=e.PutImageData=e.Process=e.GetPixels3x3=e.GetPixel=e.GetIndexFast=e.GetIndex=e.GetImageData=e.GetFirstPixel=e.GetBounds=e.CreateImageData=e.CopyImageData=e.BilinearSample=e.ScanTopToBottom=e.ScanRightToLeft=e.ScanLeftToRight=e.ScanBottomToTop=e.GetXY=e.GetY=e.GetX=void 0;var r=n(44),a=i(r),u=n(42),o=i(u),l=n(82),s=i(l),d=n(25),f=i(d),c=n(26),h=i(c),v=n(83),g=i(v),_=n(84),p=i(_),y=n(85),b=i(y),M=n(87),P=i(M),O=n(88),m=i(O),j=n(89),w=i(j),S=n(90),x=i(S),A=n(27),k=i(A),D=n(86),R=i(D),L=n(91),I=i(L),C=n(92),T=i(C),G=n(93),E=i(G),F=n(24),N=i(F),B=n(29),z=i(B),X=n(94),Y=i(X);e.GetX=f["default"],e.GetY=h["default"],e.GetXY=g["default"],e.ScanBottomToTop=p["default"],e.ScanLeftToRight=b["default"],e.ScanRightToLeft=P["default"],e.ScanTopToBottom=m["default"],e.BilinearSample=a["default"],e.CopyImageData=o["default"],e.CreateImageData=s["default"],e.GetBounds=w["default"],e.GetFirstPixel=x["default"],e.GetImageData=k["default"],e.GetIndex=R["default"],e.GetIndexFast=I["default"],e.GetPixel=T["default"],e.GetPixels3x3=E["default"],e.Process=N["default"],e.PutImageData=z["default"],e.SetPixel=Y["default"]},function(t,e){"use strict";function n(t,e){return{width:t,height:e,data:new Float32Array(t*e*4)}}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(t,e){return[(0,u["default"])(t,e),(0,l["default"])(t,e)]}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=r;var a=n(25),u=i(a),o=n(26),l=i(o)},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(t){for(var e=arguments.length<=1||void 0===arguments[1]?0:arguments[1],n=t.data.length;n>0;n-=4)if(t.data[n]>e)return(0,u["default"])(t,n-3);return!1}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=r;var a=n(83),u=i(a)},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(t){for(var e=arguments.length<=1||void 0===arguments[1]?0:arguments[1],n=arguments.length<=2||void 0===arguments[2]?0:arguments[2],i=t.width,r=t.height,a=n;a<t.height;a++)for(var o=0;o<t.width;o++)i>o&&t.data[(0,u["default"])(t,o,a)]>e&&(i=o,r=a);return[i,r]}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=r;var a=n(86),u=i(a)},function(t,e){"use strict";function n(t,e,n){return e=Math.abs(Math.round(e)),n=Math.abs(Math.round(n)),e<t.width&&n<t.height?4*(e+n*t.width):-1}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(t){for(var e=arguments.length<=1||void 0===arguments[1]?0:arguments[1],n=arguments.length<=2||void 0===arguments[2]?0:arguments[2],i=0,r=t.height,a=n;a<t.height;a++)for(var o=t.width;o>=0;o--)o>i&&t.data[(0,u["default"])(t,o,a)]>e&&(i=o,r=a);return[i,r]}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=r;var a=n(86),u=i(a)},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(t){
for(var e=arguments.length<=1||void 0===arguments[1]?0:arguments[1],n=3;n<t.data.length;n+=4)if(t.data[n]>e)return(0,u["default"])(t,n-3);return!1}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=r;var a=n(83),u=i(a)},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(t,e){var n=arguments.length<=2||void 0===arguments[2]?{x:0,y:0,width:0,height:0}:arguments[2],i=(0,u["default"])(t,e);if(i[0]===t.width||i[1]===t.height)return n;var r=(0,l["default"])(t,e),a=(0,d["default"])(t,e,i[1]),o=(0,c["default"])(t,e,i[1]);return n.x=a[0],n.y=i[1],n.width=o[0]-a[0],n.height=r[1]-i[1],n}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=r;var a=n(88),u=i(a),o=n(84),l=i(o),s=n(85),d=i(s),f=n(87),c=i(f)},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(t){var e=arguments.length<=1||void 0===arguments[1]?0:arguments[1],n=arguments.length<=2||void 0===arguments[2]?0:arguments[2];return 0===e?(0,u["default"])(t,n):1===e?(0,l["default"])(t,n):2===e?(0,d["default"])(t,n):3===e?(0,c["default"])(t,n):void 0}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=r;var a=n(88),u=i(a),o=n(84),l=i(o),s=n(85),d=i(s),f=n(87),c=i(f)},function(t,e){"use strict";function n(t,e,n){return 4*(e+n*t.width)}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(t,e,n){var i=arguments.length<=3||void 0===arguments[3]?{r:0,g:0,b:0,a:0}:arguments[3],r=(0,u["default"])(t,e,n);return t.data[r]>=0&&(i.r=t.data[r],i.g=t.data[++r],i.b=t.data[++r],i.a=t.data[++r]),i}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=r;var a=n(86),u=i(a)},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(t,e,n){var i=arguments.length<=3||void 0===arguments[3]?[]:arguments[3],r=(0,u["default"])(t,e,n);if(-1===r)return i;for(var a=t.data[r],o=t.data[r+1],l=t.data[r+2],s=t.data[r+3],d=Math.max(0,e-1),f=Math.max(0,n-1),c=Math.min(t.width,d+2),h=Math.min(t.height,f+2),v=0,g=f;h>=g;g++)for(var _=d;c>=_;_++){var p=(0,u["default"])(t,_,g);-1===p?(i[v++]=a,i[v++]=o,i[v++]=l,i[v++]=s):(i[v++]=t.data[p],i[v++]=t.data[p+1],i[v++]=t.data[p+2],i[v++]=t.data[p+3])}return i}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=r;var a=n(86),u=i(a)},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(t,e,n){var i=arguments.length<=3||void 0===arguments[3]?0:arguments[3],r=arguments.length<=4||void 0===arguments[4]?0:arguments[4],a=arguments.length<=5||void 0===arguments[5]?0:arguments[5],o=arguments.length<=6||void 0===arguments[6]?255:arguments[6],l=(0,u["default"])(t,e,n);return t.data[l]>=0?(t.data[l]=i,t.data[++l]=r,t.data[++l]=a,t.data[++l]=o,!0):!1}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=r;var a=n(86),u=i(a)},function(t,e,n){"use strict";"create index";function i(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function r(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(e,"__esModule",{value:!0}),e.SetPixels=e.SetPixel=e.Process=e.PixelData=e.GetPixel=void 0;var a=n(96),u=r(a),o=n(97),l=r(o),s=n(23),d=r(s),f=n(98),c=r(f),h=n(99),v=i(h);e.GetPixel=u["default"],e.PixelData=l["default"],e.Process=d["default"],e.SetPixel=c["default"],e.SetPixels=v},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(t,e,n){var i=arguments.length<=3||void 0===arguments[3]?{r:0,g:0,b:0,a:0}:arguments[3],r=(0,u["default"])(t,e,n,1,1);return i.r=r.data[0],i.g=r.data[1],i.b=r.data[2],i.a=r.data[3],i}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=r;var a=n(27),u=i(a)},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var a=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),u=n(12),o=i(u),l=n(27),s=i(l),d=function(){function t(e){r(this,t),this.context=(0,o["default"])(e,{alpha:!0}),this.imageData=null,this.data=null,this.pixels=null,this.buffer=null,this.update()}return a(t,[{key:"update",value:function(){return this.imageData=(0,s["default"])(this.context,0,0),this.data=this.imageData.data,this.imageData.data.buffer?(this.buffer=this.imageData.data.buffer,this.pixels=new Uint32Array(this.buffer)):window.ArrayBuffer?(this.buffer=new ArrayBuffer(this.imageData.data.length),this.pixels=new Uint32Array(this.buffer)):this.pixels=this.imageData.data,this}},{key:"destroy",value:function(){this.context=null,this.imageData=null,this.data=null,this.buffer=null,this.pixels=null}},{key:"width",get:function(){return this.context.canvas.width}},{key:"height",get:function(){return this.context.canvas.height}}]),t}();e["default"]=d},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(t,e,n){var i=arguments.length<=3||void 0===arguments[3]?0:arguments[3],r=arguments.length<=4||void 0===arguments[4]?0:arguments[4],a=arguments.length<=5||void 0===arguments[5]?0:arguments[5],o=arguments.length<=6||void 0===arguments[6]?255:arguments[6],s=(0,l["default"])(t,e,n,1,1);return(0,u["default"])(s,0,0,i,r,a,o)&&(0,d["default"])(t,s,e,n),t}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=r;var a=n(94),u=i(a),o=n(27),l=i(o),s=n(29),d=i(s)},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(t,e){var n=arguments.length<=2||void 0===arguments[2]?0:arguments[2],i=arguments.length<=3||void 0===arguments[3]?0:arguments[3];this.context=t,this.imageData=e,this.tl?(this.tl.setTo(1/0,1/0),this.br.zero(),this.offset.setTo(n,i)):(this.tl=new l["default"](1/0,1/0),this.br=new l["default"](0,0),this.offset=new l["default"](n,i))}function a(t,e){var n=arguments.length<=2||void 0===arguments[2]?0:arguments[2],i=arguments.length<=3||void 0===arguments[3]?0:arguments[3],r=arguments.length<=4||void 0===arguments[4]?0:arguments[4],a=arguments.length<=5||void 0===arguments[5]?255:arguments[5];(0,d["default"])(this.imageData,t,e,n,i,r,a)&&(t<this.tl.x&&(this.tl.x=t),e<this.tl.y&&(this.tl.y=e),t>this.br.x&&(this.br.x=t),e>this.br.y&&(this.br.y=e))}function u(){return this.imageData?(0,c["default"])(this.context,this.imageData,this.offset.x,this.offset.y,this.tl.x,this.tl.y,this.br.x-this.tl.x,this.br.y-this.tl.y):void 0}Object.defineProperty(e,"__esModule",{value:!0}),e.load=r,e.set=a,e.write=u;var o=n(100),l=i(o),s=n(94),d=i(s),f=n(29),c=i(f)},function(t,e){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),r=function(){function t(){var e=arguments.length<=0||void 0===arguments[0]?0:arguments[0],i=arguments.length<=1||void 0===arguments[1]?0:arguments[1];n(this,t),this[0]=e,this[1]=i}return i(t,[{key:"set",value:function(t){var e=arguments.length<=1||void 0===arguments[1]?t:arguments[1];return this[0]=t,this[1]=e,this}},{key:"setTo",value:function(t){var e=arguments.length<=1||void 0===arguments[1]?t:arguments[1];return this[0]=t,this[1]=e,this}},{key:"zero",value:function(){return this[0]=0,this[1]=0,this}},{key:"add",value:function(t){return this[0]+=t[0],this[1]+=t[1],this}},{key:"addScalar",value:function(t){return this[0]+=t,this[1]+=t,this}},{key:"addVectors",value:function(t,e){return this[0]=t[0]+e[0],this[1]=t[1]+e[1],this}},{key:"addScaledVector",value:function(t,e){return this[0]+=t[0]*e,this[1]+=t[1]*e,this}},{key:"sub",value:function(t){return this[0]-=t[0],this[1]-=t[1],this}},{key:"subScalar",value:function(t){return this[0]-=t,this[1]-=t,this}},{key:"subVectors",value:function(t,e){return this[0]=t[0]-e[0],this[1]=t[1]-e[1],this}},{key:"multiply",value:function(t){return this[0]*=t[0],this[1]*=t[1],this}},{key:"multiplyScalar",value:function(t){return isFinite(t)?(this[0]*=t,this[1]*=t):(this[0]=0,this[1]=0),this}},{key:"scale",value:function(t){var e=arguments.length<=1||void 0===arguments[1]?t:arguments[1];return this[0]*=t,this[1]*=e,this}},{key:"scaleV",value:function(t){return this[0]*=t[0],this[1]*=t[1],this}},{key:"divide",value:function(t){return this[0]/=t,this[1]/=t,this}},{key:"divideScalar",value:function(t){var e=1/t;return isFinite(e)?(this[0]*=e,this[1]*=e):(this[0]=0,this[1]=0),this}},{key:"min",value:function(t){return this[0]=Math.min(this[0],t[0]),this[1]=Math.min(this[1],t[1]),this}},{key:"max",value:function(t){return this[0]=Math.max(this[0],t[0]),this[1]=Math.max(this[1],t[1]),this}},{key:"clamp",value:function(t,e){return this[0]=Math.max(t[0],Math.min(e[0],this[0])),this[1]=Math.max(t[1],Math.min(e[1],this[1])),this}},{key:"floor",value:function(){return this[0]=Math.floor(this[0]),this[1]=Math.floor(this[1]),this}},{key:"ceil",value:function(){return this[0]=Math.ceil(this[0]),this[1]=Math.ceil(this[1]),this}},{key:"round",value:function(){return this[0]=Math.round(this[0]),this[1]=Math.round(this[1]),this}},{key:"roundToZero",value:function(){return this[0]<0?this[0]=Math.ceil(this[0]):this[0]=Math.floor(this[0]),this[1]<1?this[1]=Math.ceil(this[1]):this[1]=Math.floor(this[1]),this}},{key:"negate",value:function(){return this[0]=-this[0],this[1]=-this[1],this}},{key:"normalize",value:function(){var t=this.length();return t>0&&(this[0]/=t,this[1]/=t),this}},{key:"perp",value:function(){var t=this[0],e=this[1];return this[0]=e,this[1]=-t,this}},{key:"dot",value:function(t){return this[0]*t[0]+this[1]*t[1]}},{key:"lengthSq",value:function(){return this[0]*this[0]+this[1]*this[1]}},{key:"lengthManhattan",value:function(){return Math.abs(this[0])+Math.abs(this[1])}},{key:"toString",value:function(){return"[Vec2 (x="+this[0]+", y="+this[1]+")]"}},{key:"x",get:function(){return this[0]},set:function(t){this[0]=t}},{key:"y",get:function(){return this[1]},set:function(t){this[1]=t}},{key:"length",set:function(t){var e=Math.atan2(this[1],this[0]);this[0]=Math.cos(e)*t,this[1]=Math.sin(e)*t},get:function(){return Math.sqrt(this[0]*this[0]+this[1]*this[1])}}]),t}();e["default"]=r},function(t,e,n){"use strict";"create index";function i(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(e,"__esModule",{value:!0}),e.Star=e.ShapeStroke=e.ShapeGradient=e.ShapeFill=e.Shape=e.Rectangle=e.Circle=void 0;var r=n(102),a=i(r),u=n(109),o=i(u),l=n(103),s=i(l),d=n(107),f=i(d),c=n(110),h=i(c),v=n(108),g=i(v),_=n(111),p=i(_);e.Circle=a["default"],e.Rectangle=o["default"],e.Shape=s["default"],e.ShapeFill=f["default"],e.ShapeGradient=h["default"],e.ShapeStroke=g["default"],e.Star=p["default"]},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function a(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function u(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),l=n(103),s=i(l),d=function(t){function e(t){return r(this,e),a(this,Object.getPrototypeOf(e).call(this,t))}return u(e,t),o(e,[{key:"draw",value:function(t,e){if(this.visible){this.startDraw(t,e);var n=this.rotationAnchorX*-this.width,i=this.rotationAnchorY*-this.height;t.arc(n,i,this.radius,0,2*Math.PI),this.endDraw(t)}}}]),e}(s["default"]);e["default"]=d},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(){var t=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],e=t.x,n=void 0===e?0:e,i=t.y,r=void 0===i?0:i,a=t.width,o=void 0===a?0:a,s=t.height,f=void 0===s?o:s,h=t.rotation,g=void 0===h?0:h,_=t.stroke,p=void 0===_?"":_,y=t.fill,b=void 0===y?"":y,M=t.strokeFirst,P=void 0===M?!1:M,O=t.radius,m=void 0===O?0:O,j=t.startAngle,w=void 0===j?0:j,S=t.endAngle,x=void 0===S?360:S,A=t.antiClockwise,k=void 0===A?!1:A,D=t.angle,R=void 0===D?0:D,L=t.anchor,I=void 0===L?void 0:L,C=t.anchorX,T=void 0===C?0:C,G=t.anchorY,E=void 0===G?0:G,F=t.scale,N=void 0===F?void 0:F,B=t.scaleX,z=void 0===B?1:B,X=t.scaleY,Y=void 0===X?1:X,V=t.lineWidth,H=void 0===V?1:V,W=t.lineCap,J=void 0===W?"butt":W,Z=t.lineJoin,U=void 0===Z?"bevel":Z,q=t.miterLimit,K=void 0===q?10:q,Q=t.lineDashSegments,$=void 0===Q?void 0:Q,tt=t.lineDashOffset,et=void 0===tt?0:tt,nt=t.interpolate,it=void 0===nt?!0:nt,rt=t.subPixelAdjust,at=void 0===rt?!0:rt,ut=t.visible,ot=void 0===ut?!0:ut,lt={visible:ot,x:n,y:r,rotation:g,scaleX:z,scaleY:Y,rotationAnchorX:T,rotationAnchorY:E,width:o,height:f,radius:m,startAngle:w,endAngle:x,antiClockwise:k,lineWidth:H,lineCap:J,lineJoin:U,miterLimit:K,lineDashSegments:$,lineDashOffset:et,interpolate:it,subPixelAdjust:at,fills:[],addFill:function(){var t=new c["default"](this);return this.fills.push(t),t},addStroke:function(){var t=new v["default"](this);return this.fills.push(t),t},getFill:function(){var t=arguments.length<=0||void 0===arguments[0]?0:arguments[0];return this.fills[t]},lineDash:function(t){var e=arguments.length<=1||void 0===arguments[1]?0:arguments[1];this.lineDashSegments=t,this.lineDashOffset=e},set angle(t){this.rotation=(0,u["default"])((0,d["default"])(t,0,360))},get angle(){return(0,l["default"])(this.rotation)},startDraw:function(t,e){t.save(),t.lineWidth=this.lineWidth,t.lineCap=this.lineCap,t.lineJoin=this.lineJoin,t.miterLimit=this.miterLimit,this.lineDashSegments&&(t.setLineDash(this.lineDashSegments),t.lineDashOffset=this.lineDashOffset),this.transform.setTransform(t),t.beginPath()},endDraw:function(t){var e=!0,n=!1,i=void 0;try{for(var r,a=this.fills[Symbol.iterator]();!(e=(r=a.next()).done);e=!0){var u=r.value;u.draw(t)}}catch(o){n=!0,i=o}finally{try{!e&&a["return"]&&a["return"]()}finally{if(n)throw i}}t.restore()}};if(void 0!==I&&(lt.rotationAnchorX=I,lt.rotationAnchorY=I),void 0!==N&&(lt.scaleX=N,lt.scaleY=N),0!==m&&(lt.width=2*m,lt.height=2*m),0!==R&&(lt.angle=R),P){if(""!==p){var st=lt.addStroke();st.setSolid(p)}if(""!==b){var dt=lt.addFill();dt.setSolid(b)}}else{if(""!==b){var ft=lt.addFill();ft.setSolid(b)}if(""!==p){var ct=lt.addStroke();ct.setSolid(p)}}return lt}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=r;var a=n(104),u=i(a),o=n(105),l=i(o),s=n(106),d=i(s),f=n(107),c=i(f),h=n(108),v=i(h)},function(t,e){"use strict";function n(t){return t*i}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var i=Math.PI/180},function(t,e){"use strict";function n(t){return t*i}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n;var i=180/Math.PI},function(t,e){"use strict";function n(t,e,n){var i=n-e;if(0>=i)return 0;var r=(t-e)%i;return 0>r&&(r+=i),r+e}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=n},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0}),e.RADIAL=e.LINEAR_DIAGONAL=e.LINEAR_VERTICAL=e.LINEAR_HORIZONTAL=e.PATTERN=e.SOLID=void 0;var a=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),u=n(69),o=(i(u),n(73)),l=(i(o),e.SOLID=0),s=e.PATTERN=1,d=e.LINEAR_HORIZONTAL=2,f=e.LINEAR_VERTICAL=3,c=e.LINEAR_DIAGONAL=4,h=e.RADIAL=5,v=function(){function t(e){var n=arguments.length<=1||void 0===arguments[1]?l:arguments[1];r(this,t),this.shape=e,this.type=n,this.angle=0,this.colors=null,this.pattern=null,this.gradient=null,this.colorString="",this.style="rgba(0,0,0,1)",this.dirty=!1}return a(t,[{key:"setSolid",value:function(t){return this.type=l,this.colorString=t,this.style=t,this}},{key:"setSolidFromRGB",value:function(t,e,n){var i=arguments.length<=3||void 0===arguments[3]?1:arguments[3];return this.type=l,this.colorString="rgba("+t+","+e+","+n+","+i+")",this.style=this.colorString,this}},{key:"setPattern",value:function(t){return this.type=s,this.pattern=t,this.style=t,this}},{key:"setLinearGradientHorizontal",value:function(){this.type=d;for(var t=arguments.length,e=Array(t),n=0;t>n;n++)e[n]=arguments[n];return this.setColors(e)}},{key:"setLinearGradientVertical",value:function(){this.type=f;for(var t=arguments.length,e=Array(t),n=0;t>n;n++)e[n]=arguments[n];return this.setColors(e)}},{key:"setLinearGradientDiagonal",value:function(){this.type=c;for(var t=arguments.length,e=Array(t),n=0;t>n;n++)e[n]=arguments[n];return this.setColors(e)}},{key:"setRadialGradient",value:function(){this.type=h;for(var t=arguments.length,e=Array(t),n=0;t>n;n++)e[n]=arguments[n];return this.setColors(e)}},{key:"setColors",value:function(){for(var t=arguments.length,e=Array(t),n=0;t>n;n++)e[n]=arguments[n];return 1===e.length&&Array.isArray(e[0])?this.colors=e[0]:this.colors=e,this.dirty=!0,this}},{key:"updateGradient",value:function(t){if(this.gradient=null,t.save(),t.translate(0,0),this.type===d?this.gradient=t.createLinearGradient(0,0,this.shape.width,0):this.type===f?this.gradient=t.createLinearGradient(0,0,0,this.shape.height):this.type===c?this.gradient=t.createLinearGradient(0,0,this.shape.width,this.shape.height):this.type===h,this.gradient){for(var e=0,n=0;n<this.colors.length/2;n++)this.gradient.addColorStop(this.colors[e],this.colors[e+1]),e+=2;this.style=this.gradient}return t.restore(),this.dirty=!1,this}},{key:"draw",value:function(t){this.dirty&&this.updateGradient(t),t.fillStyle=this.style,t.fill()}}]),t}();e["default"]=v},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function a(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function u(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0}),e.RADIAL=e.LINEAR_DIAGONAL=e.LINEAR_VERTICAL=e.LINEAR_HORIZONTAL=e.PATTERN=e.SOLID=void 0;var o=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),l=n(107),s=i(l),d=e.SOLID=0,f=(e.PATTERN=1,e.LINEAR_HORIZONTAL=2,e.LINEAR_VERTICAL=3,e.LINEAR_DIAGONAL=4,e.RADIAL=5,function(t){function e(t){var n=arguments.length<=1||void 0===arguments[1]?d:arguments[1];return r(this,e),a(this,Object.getPrototypeOf(e).call(this,t,n))}return u(e,t),o(e,[{key:"draw",value:function(t){this.dirty&&this.updateGradient(t),t.strokeStyle=this.style,t.stroke()}}]),e}(s["default"]));e["default"]=f},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(t){var e=(0,u["default"])(t);return e.draw=function(t,e){this.visible&&(this.startDraw(t,e),t.rect(0,0,this.width,this.height),this.endDraw(t))},e}Object.defineProperty(e,"__esModule",{value:!0}),e["default"]=r;var a=n(103),u=i(a)},function(t,e){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),r=e.LINEAR=0,a=(e.RADIAL=1,function(){function t(e){var i=arguments.length<=1||void 0===arguments[1]?r:arguments[1],a=arguments.length<=2||void 0===arguments[2]?[]:arguments[2];n(this,t),this.shape=e,this.type=i,this.angle=0,this.gradient=null,1===a.length&&Array.isArray(a[0])?this.colors=a[0]:this.colors=a,this.dirty=!0}return i(t,[{key:"update",value:function(t){if(this.dirty){this.gradient=t.createLinearGradient(0,0,2*this.shape.width,0);for(var e=0;e<this.colors.length/2;e+=2)this.gradient.addColorStop(this.colors[e],this.colors[e+1]);this.dirty=!1}return this.gradient}}]),t}());e["default"]=a},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function a(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function u(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),l=n(103),s=i(l),d=function(t){function e(t){r(this,e);var n=a(this,Object.getPrototypeOf(e).call(this,t));return n._points=0,n._pointsScaled=0,n._pointsAngle=0,n.innerRadius=t.innerRadius||32,n.outerRadius=t.outerRadius||64,n.points=t.points||5,n}return u(e,t),o(e,[{key:"draw",value:function(t,e){if(this.visible){this.startDraw(t,e),t.moveTo(this.outerRadius,0);for(var n=1;n<this._pointsScaled;n++){var i=this._pointsAngle*n,r=n%2?this.innerRadius:this.outerRadius;t.lineTo(Math.cos(i)*r,Math.sin(i)*r)}t.lineTo(this.outerRadius,0),this.endDraw(t)}}},{key:"points",get:function(){return this._points},set:function(t){this._points=t,this._pointsScaled=2*t,this._pointsAngle=2*Math.PI/t/2}}]),e}(s["default"]);e["default"]=d}])});
//# sourceMappingURL=data:application/json;base64,