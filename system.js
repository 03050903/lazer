!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("system",[],t):"object"==typeof exports?exports.system=t():(e.lazer=e.lazer||{},e.lazer.system=t())}(this,function(){return function(e){function t(i){if(n[i])return n[i].exports;var r=n[i]={exports:{},id:i,loaded:!1};return e[i].call(r.exports,r,r.exports,t),r.loaded=!0,r.exports}var n={};return t.m=e,t.c=n,t.p="",t(0)}({0:function(e,t,n){"use strict";function i(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0}),t.SignalGroup=t.SignalBinding=t.Signal=t.ParseXML=t.NOOP=t.MainLoop=t.EventDispatcher=void 0;var r=n(771),a=i(r),s=n(173),u=i(s),o=n(157),l=i(o),c=n(183),f=i(c),h=n(294),d=i(h),v=n(295),m=i(v),y=n(772),p=i(y);t.EventDispatcher=a["default"],t.MainLoop=u["default"],t.NOOP=l["default"],t.ParseXML=f["default"],t.Signal=d["default"],t.SignalBinding=m["default"],t.SignalGroup=p["default"]},156:function(e,t,n){"use strict";function i(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),s=n(157),u=i(s),o=function(){function e(t){var n=arguments.length<=1||void 0===arguments[1]?!1:arguments[1];r(this,e),this.root=t,this.forceSetTimeOut=n,n||(this.forceSetTimeOut=!this.normalizeRaf()),this._running=!1,this._timeOutID=null,this._callback=u["default"]}return a(e,[{key:"start",value:function(e){var t=this;this._running||(this._running=!0,this._callback=e,this.usingSetTimeout?this._timeOutID=this.root.setTimeout(function(e){return t.updateSetTimeout(Date.now())},0):this._timeOutID=this.root.requestAnimationFrame(function(e){return t.updateRAF(e)}))}},{key:"updateRAF",value:function(e){var t=this;this._callback(e),this._timeOutID=this.root.requestAnimationFrame(function(e){return t.updateRAF(e)})}},{key:"updateSetTimeout",value:function(e){var t=this;this._timeOutID=this.root.setTimeout(function(e){return t.updateSetTimeout(Date.now())},0)}},{key:"stop",value:function(){this._running&&(this.usingSetTimeout?this.root.clearTimeout(this._timeOutID):this.root.cancelAnimationFrame(this._timeOutID),this._running=!1)}},{key:"normalizeRaf",value:function(){if(this.root.requestAnimationFrame)return!0;for(var e=["ms","moz","webkit","o"],t=0;t<e.length;t++){var n=e[t];return this.root.requestAnimationFrame=this.root[n]+"RequestAnimationFrame",this.root.cancelAnimationFrame=this.root[n]+"CancelAnimationFrame",!0}return!1}},{key:"usingSetTimeout",get:function(){return this.forceSetTimeOut}},{key:"usingRAF",get:function(){return!this.forceSetTimeOut}},{key:"isRunning",get:function(){return this._running},set:function(e){e?this.start():this.stop()}}]),e}();t["default"]=o},157:function(e,t){"use strict";function n(){}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},173:function(e,t,n){"use strict";function i(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),s=n(156),u=i(s),o=n(157),l=i(o),c=function(){function e(){var t=arguments.length<=0||void 0===arguments[0]?60:arguments[0];r(this,e),this.getTime=Date.now,window.performance&&(window.performance.now?this.getTime=function(){return window.performance.now()}:window.performance.webkitNow&&(this.getTime=function(){return window.performance.webkitNow()})),this.timestep=1e3/t,this.physicsStep=1/t,this.frameDelta=0,this.lastFrameTimeMs=0,this.fps=60,this.lastFpsUpdate=0,this.framesThisSecond=0,this.numUpdateSteps=0,this.minFrameDelay=0,this.running=!1,this.started=!1,this.panic=!1,this.begin=l["default"],this.update=l["default"],this.draw=l["default"],this.end=l["default"],this.raf=new u["default"](window,!1)}return a(e,[{key:"resetFrameDelta",value:function(){var e=this.frameDelta;return this.frameDelta=0,e}},{key:"start",value:function(){var e=this;return this.started?this:(this.started=!0,this.running=!0,this.lastFrameTimeMs=this.getTime(),this.lastFpsUpdate=this.getTime(),this.framesThisSecond=0,void this.raf.start(function(t){return e.step(t)}))}},{key:"step",value:function(e){if(!(e<this.lastFrameTimeMs+this.minFrameDelay)){for(this.frameDelta+=e-this.lastFrameTimeMs,this.lastFrameTimeMs=e,this.begin(e,this.frameDelta),e>this.lastFpsUpdate+1e3&&(this.fps=.25*this.framesThisSecond+.75*this.fps,this.lastFpsUpdate=e,this.framesThisSecond=0),this.framesThisSecond++,this.numUpdateSteps=0;this.frameDelta>=this.timestep;)if(this.update(this.timestep),this.frameDelta-=this.timestep,++this.numUpdateSteps>=240){this.panic=!0;break}this.draw(this.frameDelta/this.timestep),this.end(this.fps,this.panic),this.panic=!1}}},{key:"stop",value:function(){return this.running=!1,this.started=!1,this.raf.stop(),this}},{key:"maxFPS",get:function(){return 1e3/this.minFrameDelay},set:function(){var e=arguments.length<=0||void 0===arguments[0]?1/0:arguments[0];0===e?this.stop():this.minFrameDelay=1e3/e}},{key:"isRunning",get:function(){return this.running}}]),e}();t["default"]=c},183:function(e,t){"use strict";function n(e){var t="";try{if(window.DOMParser){var n=new DOMParser;t=n.parseFromString(e,"text/xml")}else t=new ActiveXObject("Microsoft.XMLDOM"),t.loadXML(e)}catch(i){t=null}return t&&t.documentElement&&!t.getElementsByTagName("parsererror").length?t:null}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},294:function(e,t,n){"use strict";function i(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),s=n(295),u=i(s),o=function(){function e(){r(this,e),this.callbacks=new Map,this.prevParams=[],this.memorize=!1,this.active=!0,this.propagate=!0}return a(e,[{key:"validate",value:function(e,t){if("function"!=typeof e)return console.warn("Signal.add: listener argument is required and should be a Function."),!1;var n=!0,i=!1,r=void 0;try{for(var a,s=this.callbacks.keys()[Symbol.iterator]();!(n=(a=s.next()).done);n=!0){var u=a.value;if(u.listener===e){if(u.isOnce)return console.warn("Signal.add: You already have the given listener bound 'isOnce' to this Signal."),!1;if(t)return console.warn("Signal.addOnce: You cannot addOnce a listener that is already bound to this Signal."),!1}}}catch(o){i=!0,r=o}finally{try{!n&&s["return"]&&s["return"]()}finally{if(i)throw r}}return!0}},{key:"add",value:function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),i=1;t>i;i++)n[i-1]=arguments[i];return this.register(e,!1,n)}},{key:"addOnce",value:function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),i=1;t>i;i++)n[i-1]=arguments[i];return this.register(e,!0,n)}},{key:"register",value:function(e,t,n){if(!this.validate(e,!1))return null;var i=new u["default"](this,e,!1,n);return this.callbacks.set(i,e),this.memorize&&this.prevParams.length>0&&i.execute(this.prevParams),i}},{key:"dispatch",value:function(){for(var e=arguments.length,t=Array(e),n=0;e>n;n++)t[n]=arguments[n];this.memorize&&(this.prevParams=t);var i=!0,r=!1,a=void 0;try{for(var s,u=this.callbacks.keys()[Symbol.iterator]();!(i=(s=u.next()).done);i=!0){var o=s.value,l=!0;if(o.active&&(l=o.execute(t)),!this.propagate||!l)return}}catch(c){r=!0,a=c}finally{try{!i&&u["return"]&&u["return"]()}finally{if(r)throw a}}}},{key:"remove",value:function(e){e.destroy(),this.callbacks["delete"](e)}},{key:"removeAll",value:function(){var e=!0,t=!1,n=void 0;try{for(var i,r=this.callbacks.keys()[Symbol.iterator]();!(e=(i=r.next()).done);e=!0){var a=i.value;a.destroy()}}catch(s){t=!0,n=s}finally{try{!e&&r["return"]&&r["return"]()}finally{if(t)throw n}}this.callbacks.clear()}},{key:"halt",value:function(){this.propagate=!1}},{key:"has",value:function(e){var t=!0,n=!1,i=void 0;try{for(var r,a=this.callbacks.keys()[Symbol.iterator]();!(t=(r=a.next()).done);t=!0){var s=r.value;if(s.listener===e)return!0}}catch(u){n=!0,i=u}finally{try{!t&&a["return"]&&a["return"]()}finally{if(n)throw i}}return!1}},{key:"forget",value:function(){this.prevParams=[]}},{key:"getNumListeners",value:function(){return this.callbacks.size}},{key:"destroy",value:function(){this.removeAll(),this.forget(),this.callbacks=null}},{key:"hasListeners",get:function(){return this.callbacks.size>0}}]),e}();t["default"]=o},295:function(e,t){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),r=function(){function e(t,i){var r=arguments.length<=2||void 0===arguments[2]?!1:arguments[2],a=arguments.length<=3||void 0===arguments[3]?[]:arguments[3];n(this,e),this.signal=t,this.listener=i,this.isOnce=r,this.args=a,this.active=!0}return i(e,[{key:"execute",value:function(e){var t=this.listener.apply(null,e.concat(this.args));return this.isOnce&&this.signal.remove(this),t}},{key:"destroy",value:function(){this.signal=null,this.listener=null,this.args=null,this.active=!1}}]),e}();t["default"]=r},771:function(e,t,n){"use strict";function i(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),s=n(294),u=(i(s),function(){function e(){r(this,e)}return a(e,[{key:"add",value:function(e,t){}},{key:"remove",value:function(e,t){}},{key:"dispatch",value:function(){}}]),e}());t["default"]=u},772:function(e,t,n){"use strict";function i(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),s=n(294),u=i(s),o=function(){function e(){r(this,e),this.signals=new Set}return a(e,[{key:"add",value:function(){for(var e=arguments.length,t=Array(e),n=0;e>n;n++)t[n]=arguments[n];var i=!0,r=!1,a=void 0;try{for(var s,u=t[Symbol.iterator]();!(i=(s=u.next()).done);i=!0){var o=s.value;this.signals.add(o)}}catch(l){r=!0,a=l}finally{try{!i&&u["return"]&&u["return"]()}finally{if(r)throw a}}}},{key:"create",value:function(){var e=new u["default"];return this.signals.add(e),e}},{key:"remove",value:function(e){this.signals["delete"](e)}},{key:"removeAll",value:function(){this.signals.clear()}},{key:"listen",value:function(e){var t=!0,n=!1,i=void 0;try{for(var r,a=this.signals[Symbol.iterator]();!(t=(r=a.next()).done);t=!0){var s=r.value;s.add(e)}}catch(u){n=!0,i=u}finally{try{!t&&a["return"]&&a["return"]()}finally{if(n)throw i}}}}]),e}();t["default"]=o}})});
//# sourceMappingURL=data:application/json;base64,